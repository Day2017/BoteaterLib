#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'

module AuthEnum
  INTERNAL_ERROR = 0
  ILLEGAL_ARGUMENT = 1
  VERIFICATION_FAILED = 2
  NOT_FOUND = 3
  RETRY_LATER = 4
  HUMAN_VERIFICATION_REQUIRED = 5
  INVALID_CONTEXT = 100
  APP_UPGRADE_REQUIRED = 101
  VALUE_MAP = {0 => "INTERNAL_ERROR", 1 => "ILLEGAL_ARGUMENT", 2 => "VERIFICATION_FAILED", 3 => "NOT_FOUND", 4 => "RETRY_LATER", 5 => "HUMAN_VERIFICATION_REQUIRED", 100 => "INVALID_CONTEXT", 101 => "APP_UPGRADE_REQUIRED"}
  VALID_VALUES = Set.new([INTERNAL_ERROR, ILLEGAL_ARGUMENT, VERIFICATION_FAILED, NOT_FOUND, RETRY_LATER, HUMAN_VERIFICATION_REQUIRED, INVALID_CONTEXT, APP_UPGRADE_REQUIRED]).freeze
end

module ShopEnum
  NONE = 1
  ILLEGAL_ARGUMENT = 16641
  NOT_FOUND = 16642
  NOT_AVAILABLE = 16643
  NOT_PAID_PRODUCT = 16644
  NOT_FREE_PRODUCT = 16645
  ALREADY_OWNED = 16646
  ERROR_WITH_CUSTOM_MESSAGE = 16647
  NOT_AVAILABLE_TO_RECIPIENT = 16648
  NOT_AVAILABLE_FOR_CHANNEL_ID = 16649
  NOT_SALE_FOR_COUNTRY = 16650
  NOT_SALES_PERIOD = 16651
  NOT_SALE_FOR_DEVICE = 16652
  NOT_SALE_FOR_VERSION = 16653
  ALREADY_EXPIRED = 16654
  AUTHENTICATION_FAILED = 16897
  BALANCE_SHORTAGE = 17153
  INTERNAL_SERVER_ERROR = 20737
  SERVICE_IN_MAINTENANCE_MODE = 20738
  SERVICE_UNAVAILABLE = 20739
  VALUE_MAP = {1 => "NONE", 16641 => "ILLEGAL_ARGUMENT", 16642 => "NOT_FOUND", 16643 => "NOT_AVAILABLE", 16644 => "NOT_PAID_PRODUCT", 16645 => "NOT_FREE_PRODUCT", 16646 => "ALREADY_OWNED", 16647 => "ERROR_WITH_CUSTOM_MESSAGE", 16648 => "NOT_AVAILABLE_TO_RECIPIENT", 16649 => "NOT_AVAILABLE_FOR_CHANNEL_ID", 16650 => "NOT_SALE_FOR_COUNTRY", 16651 => "NOT_SALES_PERIOD", 16652 => "NOT_SALE_FOR_DEVICE", 16653 => "NOT_SALE_FOR_VERSION", 16654 => "ALREADY_EXPIRED", 16897 => "AUTHENTICATION_FAILED", 17153 => "BALANCE_SHORTAGE", 20737 => "INTERNAL_SERVER_ERROR", 20738 => "SERVICE_IN_MAINTENANCE_MODE", 20739 => "SERVICE_UNAVAILABLE"}
  VALID_VALUES = Set.new([NONE, ILLEGAL_ARGUMENT, NOT_FOUND, NOT_AVAILABLE, NOT_PAID_PRODUCT, NOT_FREE_PRODUCT, ALREADY_OWNED, ERROR_WITH_CUSTOM_MESSAGE, NOT_AVAILABLE_TO_RECIPIENT, NOT_AVAILABLE_FOR_CHANNEL_ID, NOT_SALE_FOR_COUNTRY, NOT_SALES_PERIOD, NOT_SALE_FOR_DEVICE, NOT_SALE_FOR_VERSION, ALREADY_EXPIRED, AUTHENTICATION_FAILED, BALANCE_SHORTAGE, INTERNAL_SERVER_ERROR, SERVICE_IN_MAINTENANCE_MODE, SERVICE_UNAVAILABLE]).freeze
end

module LiffEnum
  INVALID_REQUEST = 1
  UNAUTHORIZED = 2
  CONSENT_REQUIRED = 3
  VERSION_UPDATE_REQUIRED = 4
  SERVER_ERROR = 100
  VALUE_MAP = {1 => "INVALID_REQUEST", 2 => "UNAUTHORIZED", 3 => "CONSENT_REQUIRED", 4 => "VERSION_UPDATE_REQUIRED", 100 => "SERVER_ERROR"}
  VALID_VALUES = Set.new([INVALID_REQUEST, UNAUTHORIZED, CONSENT_REQUIRED, VERSION_UPDATE_REQUIRED, SERVER_ERROR]).freeze
end

module CategoryEnum
  PROFILE = 0
  SETTINGS = 1
  OPS = 2
  CONTACT = 3
  RECOMMEND = 4
  BLOCK = 5
  GROUP = 6
  ROOM = 7
  NOTIFICATION = 8
  ADDRESS_BOOK = 9
  VALUE_MAP = {0 => "PROFILE", 1 => "SETTINGS", 2 => "OPS", 3 => "CONTACT", 4 => "RECOMMEND", 5 => "BLOCK", 6 => "GROUP", 7 => "ROOM", 8 => "NOTIFICATION", 9 => "ADDRESS_BOOK"}
  VALID_VALUES = Set.new([PROFILE, SETTINGS, OPS, CONTACT, RECOMMEND, BLOCK, GROUP, ROOM, NOTIFICATION, ADDRESS_BOOK]).freeze
end

module ChannelEnum
  ILLEGAL_ARGUMENT = 0
  INTERNAL_ERROR = 1
  CONNECTION_ERROR = 2
  AUTHENTICATIONI_FAILED = 3
  NEED_PERMISSION_APPROVAL = 4
  COIN_NOT_USABLE = 5
  WEBVIEW_NOT_ALLOWED = 6
  VALUE_MAP = {0 => "ILLEGAL_ARGUMENT", 1 => "INTERNAL_ERROR", 2 => "CONNECTION_ERROR", 3 => "AUTHENTICATIONI_FAILED", 4 => "NEED_PERMISSION_APPROVAL", 5 => "COIN_NOT_USABLE", 6 => "WEBVIEW_NOT_ALLOWED"}
  VALID_VALUES = Set.new([ILLEGAL_ARGUMENT, INTERNAL_ERROR, CONNECTION_ERROR, AUTHENTICATIONI_FAILED, NEED_PERMISSION_APPROVAL, COIN_NOT_USABLE, WEBVIEW_NOT_ALLOWED]).freeze
end

module TalkEnum
  ILLEGAL_ARGUMENT = 0
  AUTHENTICATION_FAILED = 1
  DB_FAILED = 2
  INVALID_STATE = 3
  EXCESSIVE_ACCESS = 4
  NOT_FOUND = 5
  INVALID_MID = 9
  NOT_A_MEMBER = 10
  INVALID_LENGTH = 6
  NOT_AVAILABLE_USER = 7
  NOT_AUTHORIZED_DEVICE = 8
  NOT_AUTHORIZED_SESSION = 14
  INCOMPATIBLE_APP_VERSION = 11
  NOT_READY = 12
  NOT_AVAILABLE_SESSION = 13
  SYSTEM_ERROR = 15
  NO_AVAILABLE_VERIFICATION_METHOD = 16
  NOT_AUTHENTICATED = 17
  INVALID_IDENTITY_CREDENTIAL = 18
  NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19
  INTERNAL_ERROR = 20
  NO_SUCH_IDENTITY_IDENFIER = 21
  DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22
  ILLEGAL_IDENTITY_CREDENTIAL = 23
  UNKNOWN_CHANNEL = 24
  NO_SUCH_MESSAGE_BOX = 25
  NOT_AVAILABLE_MESSAGE_BOX = 26
  CHANNEL_DOES_NOT_MATCH = 27
  NOT_YOUR_MESSAGE = 28
  MESSAGE_DEFINED_ERROR = 29
  USER_CANNOT_ACCEPT_PRESENTS = 30
  USER_NOT_STICKER_OWNER = 32
  MAINTENANCE_ERROR = 33
  ACCOUNT_NOT_MATCHED = 34
  ABUSE_BLOCK = 35
  NOT_FRIEND = 36
  NOT_ALLOWED_CALL = 37
  BLOCK_FRIEND = 38
  INCOMPATIBLE_VOIP_VERSION = 39
  INVALID_SNS_ACCESS_TOKEN = 40
  EXTERNAL_SERVICE_NOT_AVAILABLE = 41
  NOT_ALLOWED_ADD_CONTACT = 42
  NOT_CERTIFICATED = 43
  NOT_ALLOWED_SECONDARY_DEVICE = 44
  INVALID_PIN_CODE = 45
  NOT_FOUND_IDENTITY_CREDENTIAL = 46
  EXCEED_FILE_MAX_SIZE = 47
  EXCEED_DAILY_QUOTA = 48
  NOT_SUPPORT_SEND_FILE = 49
  MUST_UPGRADE = 50
  NOT_AVAILABLE_PIN_CODE_SESSION = 51
  EXPIRED_REVISION = 52
  NOT_YET_PHONE_NUMBER = 54
  BAD_CALL_NUMBER = 55
  UNAVAILABLE_CALL_NUMBER = 56
  NOT_SUPPORT_CALL_SERVICE = 57
  CONGESTION_CONTROL = 58
  NO_BALANCE = 59
  NOT_PERMITTED_CALLER_ID = 60
  NO_CALLER_ID_LIMIT_EXCEEDED = 61
  CALLER_ID_VERIFICATION_REQUIRED = 62
  NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63
  MESSAGE_NOT_FOUND = 64
  INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65
  ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66
  ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67
  INVALID_PASSWORD_FORMAT = 69
  FEATURE_RESTRICTED = 70
  MESSAGE_NOT_DESTRUCTIBLE = 71
  PAID_CALL_REDEEM_FAILED = 72
  PREVENTED_JOIN_BY_TICKET = 73
  SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75
  SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76
  SECURITY_CENTER_NOT_VERIFIED = 77
  SECURITY_CENTER_BLOCKED_BY_SETTING = 78
  SECURITY_CENTER_BLOCKED = 79
  TALK_PROXY_EXCEPTION = 80
  E2EE_INVALID_PROTOCOL = 81
  E2EE_RETRY_ENCRYPT = 82
  E2EE_UPDATE_SENDER_KEY = 83
  E2EE_UPDATE_RECEIVER_KEY = 84
  E2EE_INVALID_ARGUMENT = 85
  E2EE_INVALID_VERSION = 86
  E2EE_SENDER_DISABLED = 87
  E2EE_RECEIVER_DISABLED = 88
  E2EE_SENDER_NOT_ALLOWED = 89
  E2EE_RECEIVER_NOT_ALLOWED = 90
  E2EE_RESEND_FAIL = 91
  E2EE_RESEND_OK = 92
  HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93
  E2EE_UPDATE_PRIMARY_DEVICE = 94
  SUCCESS = 95
  CANCEL = 96
  E2EE_PRIMARY_NOT_SUPPORT = 97
  E2EE_RETRY_PLAIN = 98
  E2EE_RECREATE_GROUP_KEY = 99
  E2EE_GROUP_TOO_MANY_MEMBERS = 100
  SERVER_BUSY = 101
  NOT_ALLOWED_ADD_FOLLOW = 102
  INCOMING_FRIEND_REQUEST_LIMIT = 103
  OUTGOING_FRIEND_REQUEST_LIMIT = 104
  OUTGOING_FRIEND_REQUEST_QUOTA = 105
  DUPLICATED = 106
  BANNED = 107
  NOT_AN_INVITEE = 108
  NOT_AN_OUTSIDER = 109
  AGE_CHECK_REQUIRED = 110
  EMPTY_GROUP = 111
  EXCEED_FOLLOW_LIMIT = 112
  VALUE_MAP = {0 => "ILLEGAL_ARGUMENT", 1 => "AUTHENTICATION_FAILED", 2 => "DB_FAILED", 3 => "INVALID_STATE", 4 => "EXCESSIVE_ACCESS", 5 => "NOT_FOUND", 9 => "INVALID_MID", 10 => "NOT_A_MEMBER", 6 => "INVALID_LENGTH", 7 => "NOT_AVAILABLE_USER", 8 => "NOT_AUTHORIZED_DEVICE", 14 => "NOT_AUTHORIZED_SESSION", 11 => "INCOMPATIBLE_APP_VERSION", 12 => "NOT_READY", 13 => "NOT_AVAILABLE_SESSION", 15 => "SYSTEM_ERROR", 16 => "NO_AVAILABLE_VERIFICATION_METHOD", 17 => "NOT_AUTHENTICATED", 18 => "INVALID_IDENTITY_CREDENTIAL", 19 => "NOT_AVAILABLE_IDENTITY_IDENTIFIER", 20 => "INTERNAL_ERROR", 21 => "NO_SUCH_IDENTITY_IDENFIER", 22 => "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY", 23 => "ILLEGAL_IDENTITY_CREDENTIAL", 24 => "UNKNOWN_CHANNEL", 25 => "NO_SUCH_MESSAGE_BOX", 26 => "NOT_AVAILABLE_MESSAGE_BOX", 27 => "CHANNEL_DOES_NOT_MATCH", 28 => "NOT_YOUR_MESSAGE", 29 => "MESSAGE_DEFINED_ERROR", 30 => "USER_CANNOT_ACCEPT_PRESENTS", 32 => "USER_NOT_STICKER_OWNER", 33 => "MAINTENANCE_ERROR", 34 => "ACCOUNT_NOT_MATCHED", 35 => "ABUSE_BLOCK", 36 => "NOT_FRIEND", 37 => "NOT_ALLOWED_CALL", 38 => "BLOCK_FRIEND", 39 => "INCOMPATIBLE_VOIP_VERSION", 40 => "INVALID_SNS_ACCESS_TOKEN", 41 => "EXTERNAL_SERVICE_NOT_AVAILABLE", 42 => "NOT_ALLOWED_ADD_CONTACT", 43 => "NOT_CERTIFICATED", 44 => "NOT_ALLOWED_SECONDARY_DEVICE", 45 => "INVALID_PIN_CODE", 46 => "NOT_FOUND_IDENTITY_CREDENTIAL", 47 => "EXCEED_FILE_MAX_SIZE", 48 => "EXCEED_DAILY_QUOTA", 49 => "NOT_SUPPORT_SEND_FILE", 50 => "MUST_UPGRADE", 51 => "NOT_AVAILABLE_PIN_CODE_SESSION", 52 => "EXPIRED_REVISION", 54 => "NOT_YET_PHONE_NUMBER", 55 => "BAD_CALL_NUMBER", 56 => "UNAVAILABLE_CALL_NUMBER", 57 => "NOT_SUPPORT_CALL_SERVICE", 58 => "CONGESTION_CONTROL", 59 => "NO_BALANCE", 60 => "NOT_PERMITTED_CALLER_ID", 61 => "NO_CALLER_ID_LIMIT_EXCEEDED", 62 => "CALLER_ID_VERIFICATION_REQUIRED", 63 => "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED", 64 => "MESSAGE_NOT_FOUND", 65 => "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT", 66 => "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED", 67 => "ACCOUNT_MIGRATION_PINCODE_BLOCKED", 69 => "INVALID_PASSWORD_FORMAT", 70 => "FEATURE_RESTRICTED", 71 => "MESSAGE_NOT_DESTRUCTIBLE", 72 => "PAID_CALL_REDEEM_FAILED", 73 => "PREVENTED_JOIN_BY_TICKET", 75 => "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT", 76 => "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY", 77 => "SECURITY_CENTER_NOT_VERIFIED", 78 => "SECURITY_CENTER_BLOCKED_BY_SETTING", 79 => "SECURITY_CENTER_BLOCKED", 80 => "TALK_PROXY_EXCEPTION", 81 => "E2EE_INVALID_PROTOCOL", 82 => "E2EE_RETRY_ENCRYPT", 83 => "E2EE_UPDATE_SENDER_KEY", 84 => "E2EE_UPDATE_RECEIVER_KEY", 85 => "E2EE_INVALID_ARGUMENT", 86 => "E2EE_INVALID_VERSION", 87 => "E2EE_SENDER_DISABLED", 88 => "E2EE_RECEIVER_DISABLED", 89 => "E2EE_SENDER_NOT_ALLOWED", 90 => "E2EE_RECEIVER_NOT_ALLOWED", 91 => "E2EE_RESEND_FAIL", 92 => "E2EE_RESEND_OK", 93 => "HITOKOTO_BACKUP_NO_AVAILABLE_DATA", 94 => "E2EE_UPDATE_PRIMARY_DEVICE", 95 => "SUCCESS", 96 => "CANCEL", 97 => "E2EE_PRIMARY_NOT_SUPPORT", 98 => "E2EE_RETRY_PLAIN", 99 => "E2EE_RECREATE_GROUP_KEY", 100 => "E2EE_GROUP_TOO_MANY_MEMBERS", 101 => "SERVER_BUSY", 102 => "NOT_ALLOWED_ADD_FOLLOW", 103 => "INCOMING_FRIEND_REQUEST_LIMIT", 104 => "OUTGOING_FRIEND_REQUEST_LIMIT", 105 => "OUTGOING_FRIEND_REQUEST_QUOTA", 106 => "DUPLICATED", 107 => "BANNED", 108 => "NOT_AN_INVITEE", 109 => "NOT_AN_OUTSIDER", 110 => "AGE_CHECK_REQUIRED", 111 => "EMPTY_GROUP", 112 => "EXCEED_FOLLOW_LIMIT"}
  VALID_VALUES = Set.new([ILLEGAL_ARGUMENT, AUTHENTICATION_FAILED, DB_FAILED, INVALID_STATE, EXCESSIVE_ACCESS, NOT_FOUND, INVALID_MID, NOT_A_MEMBER, INVALID_LENGTH, NOT_AVAILABLE_USER, NOT_AUTHORIZED_DEVICE, NOT_AUTHORIZED_SESSION, INCOMPATIBLE_APP_VERSION, NOT_READY, NOT_AVAILABLE_SESSION, SYSTEM_ERROR, NO_AVAILABLE_VERIFICATION_METHOD, NOT_AUTHENTICATED, INVALID_IDENTITY_CREDENTIAL, NOT_AVAILABLE_IDENTITY_IDENTIFIER, INTERNAL_ERROR, NO_SUCH_IDENTITY_IDENFIER, DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY, ILLEGAL_IDENTITY_CREDENTIAL, UNKNOWN_CHANNEL, NO_SUCH_MESSAGE_BOX, NOT_AVAILABLE_MESSAGE_BOX, CHANNEL_DOES_NOT_MATCH, NOT_YOUR_MESSAGE, MESSAGE_DEFINED_ERROR, USER_CANNOT_ACCEPT_PRESENTS, USER_NOT_STICKER_OWNER, MAINTENANCE_ERROR, ACCOUNT_NOT_MATCHED, ABUSE_BLOCK, NOT_FRIEND, NOT_ALLOWED_CALL, BLOCK_FRIEND, INCOMPATIBLE_VOIP_VERSION, INVALID_SNS_ACCESS_TOKEN, EXTERNAL_SERVICE_NOT_AVAILABLE, NOT_ALLOWED_ADD_CONTACT, NOT_CERTIFICATED, NOT_ALLOWED_SECONDARY_DEVICE, INVALID_PIN_CODE, NOT_FOUND_IDENTITY_CREDENTIAL, EXCEED_FILE_MAX_SIZE, EXCEED_DAILY_QUOTA, NOT_SUPPORT_SEND_FILE, MUST_UPGRADE, NOT_AVAILABLE_PIN_CODE_SESSION, EXPIRED_REVISION, NOT_YET_PHONE_NUMBER, BAD_CALL_NUMBER, UNAVAILABLE_CALL_NUMBER, NOT_SUPPORT_CALL_SERVICE, CONGESTION_CONTROL, NO_BALANCE, NOT_PERMITTED_CALLER_ID, NO_CALLER_ID_LIMIT_EXCEEDED, CALLER_ID_VERIFICATION_REQUIRED, NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED, MESSAGE_NOT_FOUND, INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT, ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED, ACCOUNT_MIGRATION_PINCODE_BLOCKED, INVALID_PASSWORD_FORMAT, FEATURE_RESTRICTED, MESSAGE_NOT_DESTRUCTIBLE, PAID_CALL_REDEEM_FAILED, PREVENTED_JOIN_BY_TICKET, SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT, SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY, SECURITY_CENTER_NOT_VERIFIED, SECURITY_CENTER_BLOCKED_BY_SETTING, SECURITY_CENTER_BLOCKED, TALK_PROXY_EXCEPTION, E2EE_INVALID_PROTOCOL, E2EE_RETRY_ENCRYPT, E2EE_UPDATE_SENDER_KEY, E2EE_UPDATE_RECEIVER_KEY, E2EE_INVALID_ARGUMENT, E2EE_INVALID_VERSION, E2EE_SENDER_DISABLED, E2EE_RECEIVER_DISABLED, E2EE_SENDER_NOT_ALLOWED, E2EE_RECEIVER_NOT_ALLOWED, E2EE_RESEND_FAIL, E2EE_RESEND_OK, HITOKOTO_BACKUP_NO_AVAILABLE_DATA, E2EE_UPDATE_PRIMARY_DEVICE, SUCCESS, CANCEL, E2EE_PRIMARY_NOT_SUPPORT, E2EE_RETRY_PLAIN, E2EE_RECREATE_GROUP_KEY, E2EE_GROUP_TOO_MANY_MEMBERS, SERVER_BUSY, NOT_ALLOWED_ADD_FOLLOW, INCOMING_FRIEND_REQUEST_LIMIT, OUTGOING_FRIEND_REQUEST_LIMIT, OUTGOING_FRIEND_REQUEST_QUOTA, DUPLICATED, BANNED, NOT_AN_INVITEE, NOT_AN_OUTSIDER, AGE_CHECK_REQUIRED, EMPTY_GROUP, EXCEED_FOLLOW_LIMIT]).freeze
end

module ProviderEnum
  GOOGLE = 0
  BAIDU = 1
  FOURSQUARE = 2
  VALUE_MAP = {0 => "GOOGLE", 1 => "BAIDU", 2 => "FOURSQUARE"}
  VALID_VALUES = Set.new([GOOGLE, BAIDU, FOURSQUARE]).freeze
end

module FeatureTypeEnum
  OBS_VIDEO = 0
  OBS_GENERAL = 1
  OBS_RINGBACK_TONE = 2
  VALUE_MAP = {0 => "OBS_VIDEO", 1 => "OBS_GENERAL", 2 => "OBS_RINGBACK_TONE"}
  VALID_VALUES = Set.new([OBS_VIDEO, OBS_GENERAL, OBS_RINGBACK_TONE]).freeze
end

module ProductTypeEnum
  STICKER = 1
  THEME = 2
  STICON = 3
  VALUE_MAP = {1 => "STICKER", 2 => "THEME", 3 => "STICON"}
  VALID_VALUES = Set.new([STICKER, THEME, STICON]).freeze
end

module PromoMissionTypeEnum
  DEFAULT = 1
  VIEW_VIDEO = 2
  VALUE_MAP = {1 => "DEFAULT", 2 => "VIEW_VIDEO"}
  VALID_VALUES = Set.new([DEFAULT, VIEW_VIDEO]).freeze
end

module ProtoEnum
  STANDARD = 1
  CONSTELLA = 2
  VALUE_MAP = {1 => "STANDARD", 2 => "CONSTELLA"}
  VALID_VALUES = Set.new([STANDARD, CONSTELLA]).freeze
end

module ThemeResourceTypeEnum
  STATIC = 1
  ANIMATION = 2
  VALUE_MAP = {1 => "STATIC", 2 => "ANIMATION"}
  VALID_VALUES = Set.new([STATIC, ANIMATION]).freeze
end

module PromoTypeEnum
  CARRIER = 1
  BUDDY = 2
  INSTALL = 3
  MISSION = 4
  MUSTBUY = 5
  VALUE_MAP = {1 => "CARRIER", 2 => "BUDDY", 3 => "INSTALL", 4 => "MISSION", 5 => "MUSTBUY"}
  VALID_VALUES = Set.new([CARRIER, BUDDY, INSTALL, MISSION, MUSTBUY]).freeze
end

module StatusEnum
  OK = 0
  PRODUCT_UNSUPPORTED = 1
  TEXT_NOT_SPECIFIED = 2
  TEXT_STYLE_UNAVAILABLE = 3
  CHARACTER_COUNT_LIMIT_EXCEEDED = 4
  CONTAINS_INVALID_WORD = 5
  VALUE_MAP = {0 => "OK", 1 => "PRODUCT_UNSUPPORTED", 2 => "TEXT_NOT_SPECIFIED", 3 => "TEXT_STYLE_UNAVAILABLE", 4 => "CHARACTER_COUNT_LIMIT_EXCEEDED", 5 => "CONTAINS_INVALID_WORD"}
  VALID_VALUES = Set.new([OK, PRODUCT_UNSUPPORTED, TEXT_NOT_SPECIFIED, TEXT_STYLE_UNAVAILABLE, CHARACTER_COUNT_LIMIT_EXCEEDED, CONTAINS_INVALID_WORD]).freeze
end

module ToTypeEnum
  USER = 0
  ROOM = 1
  GROUP = 2
  SQUARE = 3
  SQUARE_CHAT = 4
  SQUARE_MEMBER = 5
  BOT = 6
  VALUE_MAP = {0 => "USER", 1 => "ROOM", 2 => "GROUP", 3 => "SQUARE", 4 => "SQUARE_CHAT", 5 => "SQUARE_MEMBER", 6 => "BOT"}
  VALID_VALUES = Set.new([USER, ROOM, GROUP, SQUARE, SQUARE_CHAT, SQUARE_MEMBER, BOT]).freeze
end

module ShowcaseTypeEnum
  POPULAR = 0
  NEW_RELEASE = 1
  EVENT = 2
  RECOMMENDED = 3
  POPULAR_WEEKLY = 4
  POPULAR_MONTHLY = 5
  POPULAR_RECENTLY_PUBLISHED = 6
  BUDDY = 7
  EXTRA_EVENT = 8
  BROWSING_HISTORY = 9
  POPULAR_TOTAL_SALES = 10
  NEW_SUBSCRIPTION = 11
  POPULAR_SUBSCRIPTION_30D = 12
  VALUE_MAP = {0 => "POPULAR", 1 => "NEW_RELEASE", 2 => "EVENT", 3 => "RECOMMENDED", 4 => "POPULAR_WEEKLY", 5 => "POPULAR_MONTHLY", 6 => "POPULAR_RECENTLY_PUBLISHED", 7 => "BUDDY", 8 => "EXTRA_EVENT", 9 => "BROWSING_HISTORY", 10 => "POPULAR_TOTAL_SALES", 11 => "NEW_SUBSCRIPTION", 12 => "POPULAR_SUBSCRIPTION_30D"}
  VALID_VALUES = Set.new([POPULAR, NEW_RELEASE, EVENT, RECOMMENDED, POPULAR_WEEKLY, POPULAR_MONTHLY, POPULAR_RECENTLY_PUBLISHED, BUDDY, EXTRA_EVENT, BROWSING_HISTORY, POPULAR_TOTAL_SALES, NEW_SUBSCRIPTION, POPULAR_SUBSCRIPTION_30D]).freeze
end

module ContentTypeEnum
  NONE = 0
  IMAGE = 1
  VIDEO = 2
  AUDIO = 3
  HTML = 4
  PDF = 5
  CALL = 6
  STICKER = 7
  PRESENCE = 8
  GIFT = 9
  GROUPBOARD = 10
  APPLINK = 11
  LINK = 12
  CONTACT = 13
  FILE = 14
  LOCATION = 15
  POSTNOTIFICATION = 16
  RICH = 17
  CHATEVENT = 18
  MUSIC = 19
  PAYMENT = 20
  EXTIMAGE = 21
  FLEX = 22
  VALUE_MAP = {0 => "NONE", 1 => "IMAGE", 2 => "VIDEO", 3 => "AUDIO", 4 => "HTML", 5 => "PDF", 6 => "CALL", 7 => "STICKER", 8 => "PRESENCE", 9 => "GIFT", 10 => "GROUPBOARD", 11 => "APPLINK", 12 => "LINK", 13 => "CONTACT", 14 => "FILE", 15 => "LOCATION", 16 => "POSTNOTIFICATION", 17 => "RICH", 18 => "CHATEVENT", 19 => "MUSIC", 20 => "PAYMENT", 21 => "EXTIMAGE", 22 => "FLEX"}
  VALID_VALUES = Set.new([NONE, IMAGE, VIDEO, AUDIO, HTML, PDF, CALL, STICKER, PRESENCE, GIFT, GROUPBOARD, APPLINK, LINK, CONTACT, FILE, LOCATION, POSTNOTIFICATION, RICH, CHATEVENT, MUSIC, PAYMENT, EXTIMAGE, FLEX]).freeze
end

module RelationTypeEnum
  FORWARD = 0
  AUTO_REPLY = 1
  SUBORDINATE = 2
  REPLY = 3
  VALUE_MAP = {0 => "FORWARD", 1 => "AUTO_REPLY", 2 => "SUBORDINATE", 3 => "REPLY"}
  VALID_VALUES = Set.new([FORWARD, AUTO_REPLY, SUBORDINATE, REPLY]).freeze
end

module GroupPreferenceAttributeEnum
  INVITATION_TICKET = 1
  FAVORITE_TIMESTAMP = 2
  VALUE_MAP = {1 => "INVITATION_TICKET", 2 => "FAVORITE_TIMESTAMP"}
  VALID_VALUES = Set.new([INVITATION_TICKET, FAVORITE_TIMESTAMP]).freeze
end

module MessageServiceCodeEnum
  UNKNOWN = 0
  TALK = 1
  SQUARE = 2
  VALUE_MAP = {0 => "UNKNOWN", 1 => "TALK", 2 => "SQUARE"}
  VALID_VALUES = Set.new([UNKNOWN, TALK, SQUARE]).freeze
end

module ContactTypeEnum
  MID = 0
  PHONE = 1
  EMAIL = 2
  USERID = 3
  PROXIMITY = 4
  GROUP = 5
  USER = 6
  QRCODE = 7
  PROMOTION_BOT = 8
  CONTACT_MESSAGE = 9
  FRIEND_REQUEST = 10
  REPAIR = 128
  FACEBOOK = 2305
  SINA = 2306
  RENREN = 2307
  FEIXIN = 2308
  BBM = 2309
  BEACON = 11
  VALUE_MAP = {0 => "MID", 1 => "PHONE", 2 => "EMAIL", 3 => "USERID", 4 => "PROXIMITY", 5 => "GROUP", 6 => "USER", 7 => "QRCODE", 8 => "PROMOTION_BOT", 9 => "CONTACT_MESSAGE", 10 => "FRIEND_REQUEST", 128 => "REPAIR", 2305 => "FACEBOOK", 2306 => "SINA", 2307 => "RENREN", 2308 => "FEIXIN", 2309 => "BBM", 11 => "BEACON"}
  VALID_VALUES = Set.new([MID, PHONE, EMAIL, USERID, PROXIMITY, GROUP, USER, QRCODE, PROMOTION_BOT, CONTACT_MESSAGE, FRIEND_REQUEST, REPAIR, FACEBOOK, SINA, RENREN, FEIXIN, BBM, BEACON]).freeze
end

module ContactStatusEnum
  UNSPECIFIED = 0
  FRIEND = 1
  FRIEND_BLOCKED = 2
  RECOMMEND = 3
  RECOMMEND_BLOCKED = 4
  DELETED = 5
  DELETED_BLOCKED = 6
  VALUE_MAP = {0 => "UNSPECIFIED", 1 => "FRIEND", 2 => "FRIEND_BLOCKED", 3 => "RECOMMEND", 4 => "RECOMMEND_BLOCKED", 5 => "DELETED", 6 => "DELETED_BLOCKED"}
  VALID_VALUES = Set.new([UNSPECIFIED, FRIEND, FRIEND_BLOCKED, RECOMMEND, RECOMMEND_BLOCKED, DELETED, DELETED_BLOCKED]).freeze
end

module ContactRelationEnum
  ONEWAY = 0
  BOTH = 1
  NOT_REGISTERED = 2
  VALUE_MAP = {0 => "ONEWAY", 1 => "BOTH", 2 => "NOT_REGISTERED"}
  VALID_VALUES = Set.new([ONEWAY, BOTH, NOT_REGISTERED]).freeze
end

module GroupCallMediaTypeEnum
  AUDIO = 1
  VIDEO = 2
  LIVE = 3
  VALUE_MAP = {1 => "AUDIO", 2 => "VIDEO", 3 => "LIVE"}
  VALID_VALUES = Set.new([AUDIO, VIDEO, LIVE]).freeze
end

module IdentityProviderEnum
  UNKNOWN = 0
  LINE = 1
  NAVER_KR = 2
  LINE_PHONE = 3
  VALUE_MAP = {0 => "UNKNOWN", 1 => "LINE", 2 => "NAVER_KR", 3 => "LINE_PHONE"}
  VALID_VALUES = Set.new([UNKNOWN, LINE, NAVER_KR, LINE_PHONE]).freeze
end

module SnsIdTypeEnum
  FACEBOOK = 1
  SINA = 2
  RENREN = 3
  FEIXIN = 4
  BBM = 5
  VALUE_MAP = {1 => "FACEBOOK", 2 => "SINA", 3 => "RENREN", 4 => "FEIXIN", 5 => "BBM"}
  VALID_VALUES = Set.new([FACEBOOK, SINA, RENREN, FEIXIN, BBM]).freeze
end

module CustomModeEnum
  PROMOTION_FRIENDS_INVITE = 1
  CAPABILITY_SERVER_SIDE_SMS = 2
  LINE_CLIENT_ANALYTICS_CONFIGURATION = 3
  VALUE_MAP = {1 => "PROMOTION_FRIENDS_INVITE", 2 => "CAPABILITY_SERVER_SIDE_SMS", 3 => "LINE_CLIENT_ANALYTICS_CONFIGURATION"}
  VALID_VALUES = Set.new([PROMOTION_FRIENDS_INVITE, CAPABILITY_SERVER_SIDE_SMS, LINE_CLIENT_ANALYTICS_CONFIGURATION]).freeze
end

module ProfileAttributeEnum
  ALL = 511
  EMAIL = 1
  DISPLAY_NAME = 2
  PHONETIC_NAME = 4
  PICTURE = 8
  STATUS_MESSAGE = 16
  ALLOW_SEARCH_BY_USERID = 32
  ALLOW_SEARCH_BY_EMAIL = 64
  BUDDY_STATUS = 128
  MUSIC_PROFILE = 256
  VALUE_MAP = {511 => "ALL", 1 => "EMAIL", 2 => "DISPLAY_NAME", 4 => "PHONETIC_NAME", 8 => "PICTURE", 16 => "STATUS_MESSAGE", 32 => "ALLOW_SEARCH_BY_USERID", 64 => "ALLOW_SEARCH_BY_EMAIL", 128 => "BUDDY_STATUS", 256 => "MUSIC_PROFILE"}
  VALID_VALUES = Set.new([ALL, EMAIL, DISPLAY_NAME, PHONETIC_NAME, PICTURE, STATUS_MESSAGE, ALLOW_SEARCH_BY_USERID, ALLOW_SEARCH_BY_EMAIL, BUDDY_STATUS, MUSIC_PROFILE]).freeze
end

module OpTypeEnum
  END_OF_OPERATION = 0
  UPDATE_PROFILE = 1
  UPDATE_SETTINGS = 36
  NOTIFIED_UPDATE_PROFILE = 2
  REGISTER_USERID = 3
  ADD_CONTACT = 4
  NOTIFIED_ADD_CONTACT = 5
  BLOCK_CONTACT = 6
  UNBLOCK_CONTACT = 7
  NOTIFIED_RECOMMEND_CONTACT = 8
  CREATE_GROUP = 9
  UPDATE_GROUP = 10
  NOTIFIED_UPDATE_GROUP = 11
  INVITE_INTO_GROUP = 12
  NOTIFIED_INVITE_INTO_GROUP = 13
  CANCEL_INVITATION_GROUP = 31
  NOTIFIED_CANCEL_INVITATION_GROUP = 32
  LEAVE_GROUP = 14
  NOTIFIED_LEAVE_GROUP = 15
  ACCEPT_GROUP_INVITATION = 16
  NOTIFIED_ACCEPT_GROUP_INVITATION = 17
  REJECT_GROUP_INVITATION = 34
  NOTIFIED_REJECT_GROUP_INVITATION = 35
  KICKOUT_FROM_GROUP = 18
  NOTIFIED_KICKOUT_FROM_GROUP = 19
  CREATE_ROOM = 20
  INVITE_INTO_ROOM = 21
  NOTIFIED_INVITE_INTO_ROOM = 22
  LEAVE_ROOM = 23
  NOTIFIED_LEAVE_ROOM = 24
  SEND_MESSAGE = 25
  RECEIVE_MESSAGE = 26
  SEND_MESSAGE_RECEIPT = 27
  RECEIVE_MESSAGE_RECEIPT = 28
  SEND_CONTENT_RECEIPT = 29
  RECEIVE_ANNOUNCEMENT = 30
  NOTIFIED_UNREGISTER_USER = 33
  INVITE_VIA_EMAIL = 38
  NOTIFIED_REGISTER_USER = 37
  NOTIFIED_REQUEST_RECOVERY = 39
  SEND_CHAT_CHECKED = 40
  SEND_CHAT_REMOVED = 41
  NOTIFIED_FORCE_SYNC = 42
  SEND_CONTENT = 43
  SEND_MESSAGE_MYHOME = 44
  NOTIFIED_UPDATE_CONTENT_PREVIEW = 45
  REMOVE_ALL_MESSAGES = 46
  NOTIFIED_UPDATE_PURCHASES = 47
  DUMMY = 48
  UPDATE_CONTACT = 49
  NOTIFIED_RECEIVED_CALL = 50
  CANCEL_CALL = 51
  NOTIFIED_REDIRECT = 52
  NOTIFIED_CHANNEL_SYNC = 53
  FAILED_SEND_MESSAGE = 54
  NOTIFIED_READ_MESSAGE = 55
  FAILED_EMAIL_CONFIRMATION = 56
  NOTIFIED_CHAT_CONTENT = 58
  NOTIFIED_PUSH_NOTICENTER_ITEM = 59
  NOTIFIED_JOIN_CHAT = 60
  NOTIFIED_LEAVE_CHAT = 61
  NOTIFIED_TYPING = 62
  FRIEND_REQUEST_ACCEPTED = 63
  DESTROY_MESSAGE = 64
  NOTIFIED_DESTROY_MESSAGE = 65
  UPDATE_PUBLICKEYCHAIN = 66
  NOTIFIED_UPDATE_PUBLICKEYCHAIN = 67
  NOTIFIED_BLOCK_CONTACT = 68
  NOTIFIED_UNBLOCK_CONTACT = 69
  UPDATE_GROUPPREFERENCE = 70
  NOTIFIED_PAYMENT_EVENT = 71
  REGISTER_E2EE_PUBLICKEY = 72
  NOTIFIED_E2EE_KEY_EXCHANGE_REQ = 73
  NOTIFIED_E2EE_KEY_EXCHANGE_RESP = 74
  NOTIFIED_E2EE_MESSAGE_RESEND_REQ = 75
  NOTIFIED_E2EE_MESSAGE_RESEND_RESP = 76
  NOTIFIED_E2EE_KEY_UPDATE = 77
  NOTIFIED_BUDDY_UPDATE_PROFILE = 78
  NOTIFIED_UPDATE_LINEAT_TABS = 79
  UPDATE_ROOM = 80
  NOTIFIED_BEACON_DETECTED = 81
  UPDATE_EXTENDED_PROFILE = 82
  ADD_FOLLOW = 83
  NOTIFIED_ADD_FOLLOW = 84
  DELETE_FOLLOW = 85
  NOTIFIED_DELETE_FOLLOW = 86
  UPDATE_TIMELINE_SETTINGS = 87
  NOTIFIED_FRIEND_REQUEST = 88
  UPDATE_RINGBACK_TONE = 89
  NOTIFIED_POSTBACK = 90
  RECEIVE_READ_WATERMARK = 91
  NOTIFIED_MESSAGE_DELIVERED = 92
  NOTIFIED_UPDATE_CHAT_BAR = 93
  NOTIFIED_CHATAPP_INSTALLED = 94
  NOTIFIED_CHATAPP_UPDATED = 95
  NOTIFIED_CHATAPP_NEW_MARK = 96
  NOTIFIED_CHATAPP_DELETED = 97
  NOTIFIED_CHATAPP_SYNC = 98
  NOTIFIED_UPDATE_MESSAGE = 99
  UPDATE_CHATROOMBGM = 100
  NOTIFIED_UPDATE_CHATROOMBGM = 101
  UPDATE_RINGTONE = 102
  CREATE_CHAT = 103
  UPDATE_CHAT = 104
  NOTIFIED_UPDATE_CHAT = 105
  INVITE_INTO_CHAT = 106
  NOTIFIED_INVITE_INTO_CHAT = 107
  CANCEL_CHAT_INVITATION = 108
  NOTIFIED_CANCEL_CHAT_INVITATION = 109
  DELETE_SELF_FROM_CHAT = 110
  NOTIFIED_DELETE_SELF_FROM_CHAT = 111
  ACCEPT_CHAT_INVITATION = 112
  NOTIFIED_ACCEPT_CHAT_INVITATION = 113
  REJECT_CHAT_INVITATION = 114
  NOTIFIED_REJECT_CHAT_INVITATION = 115
  DELETE_OTHER_FROM_CHAT = 116
  NOTIFIED_DELETE_OTHER_FROM_CHAT = 117
  UPDATE_USER_SETTINGS = 118
  VALUE_MAP = {0 => "END_OF_OPERATION", 1 => "UPDATE_PROFILE", 36 => "UPDATE_SETTINGS", 2 => "NOTIFIED_UPDATE_PROFILE", 3 => "REGISTER_USERID", 4 => "ADD_CONTACT", 5 => "NOTIFIED_ADD_CONTACT", 6 => "BLOCK_CONTACT", 7 => "UNBLOCK_CONTACT", 8 => "NOTIFIED_RECOMMEND_CONTACT", 9 => "CREATE_GROUP", 10 => "UPDATE_GROUP", 11 => "NOTIFIED_UPDATE_GROUP", 12 => "INVITE_INTO_GROUP", 13 => "NOTIFIED_INVITE_INTO_GROUP", 31 => "CANCEL_INVITATION_GROUP", 32 => "NOTIFIED_CANCEL_INVITATION_GROUP", 14 => "LEAVE_GROUP", 15 => "NOTIFIED_LEAVE_GROUP", 16 => "ACCEPT_GROUP_INVITATION", 17 => "NOTIFIED_ACCEPT_GROUP_INVITATION", 34 => "REJECT_GROUP_INVITATION", 35 => "NOTIFIED_REJECT_GROUP_INVITATION", 18 => "KICKOUT_FROM_GROUP", 19 => "NOTIFIED_KICKOUT_FROM_GROUP", 20 => "CREATE_ROOM", 21 => "INVITE_INTO_ROOM", 22 => "NOTIFIED_INVITE_INTO_ROOM", 23 => "LEAVE_ROOM", 24 => "NOTIFIED_LEAVE_ROOM", 25 => "SEND_MESSAGE", 26 => "RECEIVE_MESSAGE", 27 => "SEND_MESSAGE_RECEIPT", 28 => "RECEIVE_MESSAGE_RECEIPT", 29 => "SEND_CONTENT_RECEIPT", 30 => "RECEIVE_ANNOUNCEMENT", 33 => "NOTIFIED_UNREGISTER_USER", 38 => "INVITE_VIA_EMAIL", 37 => "NOTIFIED_REGISTER_USER", 39 => "NOTIFIED_REQUEST_RECOVERY", 40 => "SEND_CHAT_CHECKED", 41 => "SEND_CHAT_REMOVED", 42 => "NOTIFIED_FORCE_SYNC", 43 => "SEND_CONTENT", 44 => "SEND_MESSAGE_MYHOME", 45 => "NOTIFIED_UPDATE_CONTENT_PREVIEW", 46 => "REMOVE_ALL_MESSAGES", 47 => "NOTIFIED_UPDATE_PURCHASES", 48 => "DUMMY", 49 => "UPDATE_CONTACT", 50 => "NOTIFIED_RECEIVED_CALL", 51 => "CANCEL_CALL", 52 => "NOTIFIED_REDIRECT", 53 => "NOTIFIED_CHANNEL_SYNC", 54 => "FAILED_SEND_MESSAGE", 55 => "NOTIFIED_READ_MESSAGE", 56 => "FAILED_EMAIL_CONFIRMATION", 58 => "NOTIFIED_CHAT_CONTENT", 59 => "NOTIFIED_PUSH_NOTICENTER_ITEM", 60 => "NOTIFIED_JOIN_CHAT", 61 => "NOTIFIED_LEAVE_CHAT", 62 => "NOTIFIED_TYPING", 63 => "FRIEND_REQUEST_ACCEPTED", 64 => "DESTROY_MESSAGE", 65 => "NOTIFIED_DESTROY_MESSAGE", 66 => "UPDATE_PUBLICKEYCHAIN", 67 => "NOTIFIED_UPDATE_PUBLICKEYCHAIN", 68 => "NOTIFIED_BLOCK_CONTACT", 69 => "NOTIFIED_UNBLOCK_CONTACT", 70 => "UPDATE_GROUPPREFERENCE", 71 => "NOTIFIED_PAYMENT_EVENT", 72 => "REGISTER_E2EE_PUBLICKEY", 73 => "NOTIFIED_E2EE_KEY_EXCHANGE_REQ", 74 => "NOTIFIED_E2EE_KEY_EXCHANGE_RESP", 75 => "NOTIFIED_E2EE_MESSAGE_RESEND_REQ", 76 => "NOTIFIED_E2EE_MESSAGE_RESEND_RESP", 77 => "NOTIFIED_E2EE_KEY_UPDATE", 78 => "NOTIFIED_BUDDY_UPDATE_PROFILE", 79 => "NOTIFIED_UPDATE_LINEAT_TABS", 80 => "UPDATE_ROOM", 81 => "NOTIFIED_BEACON_DETECTED", 82 => "UPDATE_EXTENDED_PROFILE", 83 => "ADD_FOLLOW", 84 => "NOTIFIED_ADD_FOLLOW", 85 => "DELETE_FOLLOW", 86 => "NOTIFIED_DELETE_FOLLOW", 87 => "UPDATE_TIMELINE_SETTINGS", 88 => "NOTIFIED_FRIEND_REQUEST", 89 => "UPDATE_RINGBACK_TONE", 90 => "NOTIFIED_POSTBACK", 91 => "RECEIVE_READ_WATERMARK", 92 => "NOTIFIED_MESSAGE_DELIVERED", 93 => "NOTIFIED_UPDATE_CHAT_BAR", 94 => "NOTIFIED_CHATAPP_INSTALLED", 95 => "NOTIFIED_CHATAPP_UPDATED", 96 => "NOTIFIED_CHATAPP_NEW_MARK", 97 => "NOTIFIED_CHATAPP_DELETED", 98 => "NOTIFIED_CHATAPP_SYNC", 99 => "NOTIFIED_UPDATE_MESSAGE", 100 => "UPDATE_CHATROOMBGM", 101 => "NOTIFIED_UPDATE_CHATROOMBGM", 102 => "UPDATE_RINGTONE", 103 => "CREATE_CHAT", 104 => "UPDATE_CHAT", 105 => "NOTIFIED_UPDATE_CHAT", 106 => "INVITE_INTO_CHAT", 107 => "NOTIFIED_INVITE_INTO_CHAT", 108 => "CANCEL_CHAT_INVITATION", 109 => "NOTIFIED_CANCEL_CHAT_INVITATION", 110 => "DELETE_SELF_FROM_CHAT", 111 => "NOTIFIED_DELETE_SELF_FROM_CHAT", 112 => "ACCEPT_CHAT_INVITATION", 113 => "NOTIFIED_ACCEPT_CHAT_INVITATION", 114 => "REJECT_CHAT_INVITATION", 115 => "NOTIFIED_REJECT_CHAT_INVITATION", 116 => "DELETE_OTHER_FROM_CHAT", 117 => "NOTIFIED_DELETE_OTHER_FROM_CHAT", 118 => "UPDATE_USER_SETTINGS"}
  VALID_VALUES = Set.new([END_OF_OPERATION, UPDATE_PROFILE, UPDATE_SETTINGS, NOTIFIED_UPDATE_PROFILE, REGISTER_USERID, ADD_CONTACT, NOTIFIED_ADD_CONTACT, BLOCK_CONTACT, UNBLOCK_CONTACT, NOTIFIED_RECOMMEND_CONTACT, CREATE_GROUP, UPDATE_GROUP, NOTIFIED_UPDATE_GROUP, INVITE_INTO_GROUP, NOTIFIED_INVITE_INTO_GROUP, CANCEL_INVITATION_GROUP, NOTIFIED_CANCEL_INVITATION_GROUP, LEAVE_GROUP, NOTIFIED_LEAVE_GROUP, ACCEPT_GROUP_INVITATION, NOTIFIED_ACCEPT_GROUP_INVITATION, REJECT_GROUP_INVITATION, NOTIFIED_REJECT_GROUP_INVITATION, KICKOUT_FROM_GROUP, NOTIFIED_KICKOUT_FROM_GROUP, CREATE_ROOM, INVITE_INTO_ROOM, NOTIFIED_INVITE_INTO_ROOM, LEAVE_ROOM, NOTIFIED_LEAVE_ROOM, SEND_MESSAGE, RECEIVE_MESSAGE, SEND_MESSAGE_RECEIPT, RECEIVE_MESSAGE_RECEIPT, SEND_CONTENT_RECEIPT, RECEIVE_ANNOUNCEMENT, NOTIFIED_UNREGISTER_USER, INVITE_VIA_EMAIL, NOTIFIED_REGISTER_USER, NOTIFIED_REQUEST_RECOVERY, SEND_CHAT_CHECKED, SEND_CHAT_REMOVED, NOTIFIED_FORCE_SYNC, SEND_CONTENT, SEND_MESSAGE_MYHOME, NOTIFIED_UPDATE_CONTENT_PREVIEW, REMOVE_ALL_MESSAGES, NOTIFIED_UPDATE_PURCHASES, DUMMY, UPDATE_CONTACT, NOTIFIED_RECEIVED_CALL, CANCEL_CALL, NOTIFIED_REDIRECT, NOTIFIED_CHANNEL_SYNC, FAILED_SEND_MESSAGE, NOTIFIED_READ_MESSAGE, FAILED_EMAIL_CONFIRMATION, NOTIFIED_CHAT_CONTENT, NOTIFIED_PUSH_NOTICENTER_ITEM, NOTIFIED_JOIN_CHAT, NOTIFIED_LEAVE_CHAT, NOTIFIED_TYPING, FRIEND_REQUEST_ACCEPTED, DESTROY_MESSAGE, NOTIFIED_DESTROY_MESSAGE, UPDATE_PUBLICKEYCHAIN, NOTIFIED_UPDATE_PUBLICKEYCHAIN, NOTIFIED_BLOCK_CONTACT, NOTIFIED_UNBLOCK_CONTACT, UPDATE_GROUPPREFERENCE, NOTIFIED_PAYMENT_EVENT, REGISTER_E2EE_PUBLICKEY, NOTIFIED_E2EE_KEY_EXCHANGE_REQ, NOTIFIED_E2EE_KEY_EXCHANGE_RESP, NOTIFIED_E2EE_MESSAGE_RESEND_REQ, NOTIFIED_E2EE_MESSAGE_RESEND_RESP, NOTIFIED_E2EE_KEY_UPDATE, NOTIFIED_BUDDY_UPDATE_PROFILE, NOTIFIED_UPDATE_LINEAT_TABS, UPDATE_ROOM, NOTIFIED_BEACON_DETECTED, UPDATE_EXTENDED_PROFILE, ADD_FOLLOW, NOTIFIED_ADD_FOLLOW, DELETE_FOLLOW, NOTIFIED_DELETE_FOLLOW, UPDATE_TIMELINE_SETTINGS, NOTIFIED_FRIEND_REQUEST, UPDATE_RINGBACK_TONE, NOTIFIED_POSTBACK, RECEIVE_READ_WATERMARK, NOTIFIED_MESSAGE_DELIVERED, NOTIFIED_UPDATE_CHAT_BAR, NOTIFIED_CHATAPP_INSTALLED, NOTIFIED_CHATAPP_UPDATED, NOTIFIED_CHATAPP_NEW_MARK, NOTIFIED_CHATAPP_DELETED, NOTIFIED_CHATAPP_SYNC, NOTIFIED_UPDATE_MESSAGE, UPDATE_CHATROOMBGM, NOTIFIED_UPDATE_CHATROOMBGM, UPDATE_RINGTONE, CREATE_CHAT, UPDATE_CHAT, NOTIFIED_UPDATE_CHAT, INVITE_INTO_CHAT, NOTIFIED_INVITE_INTO_CHAT, CANCEL_CHAT_INVITATION, NOTIFIED_CANCEL_CHAT_INVITATION, DELETE_SELF_FROM_CHAT, NOTIFIED_DELETE_SELF_FROM_CHAT, ACCEPT_CHAT_INVITATION, NOTIFIED_ACCEPT_CHAT_INVITATION, REJECT_CHAT_INVITATION, NOTIFIED_REJECT_CHAT_INVITATION, DELETE_OTHER_FROM_CHAT, NOTIFIED_DELETE_OTHER_FROM_CHAT, UPDATE_USER_SETTINGS]).freeze
end

module SettingsAttributes2Enum
  NOTIFICATION_ENABLE = 0
  NOTIFICATION_MUTE_EXPIRATION = 1
  NOTIFICATION_NEW_MESSAGE = 2
  NOTIFICATION_GROUP_INVITATION = 3
  NOTIFICATION_SHOW_MESSAGE = 4
  NOTIFICATION_INCOMING_CALL = 5
  NOTIFICATION_SOUND_MESSAGE = 8
  NOTIFICATION_SOUND_GROUP = 9
  NOTIFICATION_DISABLED_WITH_SUB = 16
  NOTIFICATION_PAYMENT = 17
  NOTIFICATION_MENTION = 40
  NOTIFICATION_THUMBNAIL = 45
  PRIVACY_SYNC_CONTACTS = 6
  PRIVACY_SEARCH_BY_PHONE_NUMBER = 7
  PRIVACY_SEARCH_BY_USERID = 13
  PRIVACY_SEARCH_BY_EMAIL = 14
  PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 21
  PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 23
  PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME = 35
  PRIVACY_ALLOW_FRIEND_REQUEST = 30
  PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 25
  PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 26
  PRIVACY_AGREE_USE_PAIDCALL = 27
  CONTACT_MY_TICKET = 10
  IDENTITY_PROVIDER = 11
  IDENTITY_IDENTIFIER = 12
  SNS_ACCOUNT = 19
  PHONE_REGISTRATION = 20
  PREFERENCE_LOCALE = 15
  CUSTOM_MODE = 22
  EMAIL_CONFIRMATION_STATUS = 24
  ACCOUNT_MIGRATION_PINCODE = 28
  ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 29
  SECURITY_CENTER_SETTINGS = 18
  E2EE_ENABLE = 33
  ENABLE_SOUND_TO_TEXT = 47
  HITOKOTO_BACKUP_REQUESTED = 34
  CONTACT_ALLOW_FOLLOWING = 36
  PRIVACY_ALLOW_NEARBY = 37
  AGREEMENT_NEARBY = 38
  AGREEMENT_SQUARE = 39
  ALLOW_UNREGISTRATION_SECONDARY_DEVICE = 41
  AGREEMENT_BOT_USE = 42
  AGREEMENT_SHAKE_FUNCTION = 43
  AGREEMENT_MOBILE_CONTACT_NAME = 44
  AGREEMENT_SOUND_TO_TEXT = 46
  AGREEMENT_PRIVACY_POLICY_VERSION = 47
  AGREEMENT_AD_BY_WEB_ACCESS = 48
  AGREEMENT_PHONE_NUMBER_MATCHING = 49
  AGREEMENT_COMMUNICATION_INFO = 50
  AGREEMENT_THINGS_WIRELESS_COMMUNICATION = 52
  AGREEMENT_GDPR = 53
  AGREEMENT_PROVIDE_LOCATION = 55
  AGREEMENT_BEACON = 56
  AGREEMENT_CONTENTS_SUGGEST = 58
  AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION = 59
  VALUE_MAP = {0 => "NOTIFICATION_ENABLE", 1 => "NOTIFICATION_MUTE_EXPIRATION", 2 => "NOTIFICATION_NEW_MESSAGE", 3 => "NOTIFICATION_GROUP_INVITATION", 4 => "NOTIFICATION_SHOW_MESSAGE", 5 => "NOTIFICATION_INCOMING_CALL", 8 => "NOTIFICATION_SOUND_MESSAGE", 9 => "NOTIFICATION_SOUND_GROUP", 16 => "NOTIFICATION_DISABLED_WITH_SUB", 17 => "NOTIFICATION_PAYMENT", 40 => "NOTIFICATION_MENTION", 45 => "NOTIFICATION_THUMBNAIL", 6 => "PRIVACY_SYNC_CONTACTS", 7 => "PRIVACY_SEARCH_BY_PHONE_NUMBER", 13 => "PRIVACY_SEARCH_BY_USERID", 14 => "PRIVACY_SEARCH_BY_EMAIL", 21 => "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN", 23 => "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME", 35 => "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME", 30 => "PRIVACY_ALLOW_FRIEND_REQUEST", 25 => "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND", 26 => "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL", 27 => "PRIVACY_AGREE_USE_PAIDCALL", 10 => "CONTACT_MY_TICKET", 11 => "IDENTITY_PROVIDER", 12 => "IDENTITY_IDENTIFIER", 19 => "SNS_ACCOUNT", 20 => "PHONE_REGISTRATION", 15 => "PREFERENCE_LOCALE", 22 => "CUSTOM_MODE", 24 => "EMAIL_CONFIRMATION_STATUS", 28 => "ACCOUNT_MIGRATION_PINCODE", 29 => "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE", 18 => "SECURITY_CENTER_SETTINGS", 33 => "E2EE_ENABLE", 47 => "ENABLE_SOUND_TO_TEXT", 34 => "HITOKOTO_BACKUP_REQUESTED", 36 => "CONTACT_ALLOW_FOLLOWING", 37 => "PRIVACY_ALLOW_NEARBY", 38 => "AGREEMENT_NEARBY", 39 => "AGREEMENT_SQUARE", 41 => "ALLOW_UNREGISTRATION_SECONDARY_DEVICE", 42 => "AGREEMENT_BOT_USE", 43 => "AGREEMENT_SHAKE_FUNCTION", 44 => "AGREEMENT_MOBILE_CONTACT_NAME", 46 => "AGREEMENT_SOUND_TO_TEXT", 47 => "AGREEMENT_PRIVACY_POLICY_VERSION", 48 => "AGREEMENT_AD_BY_WEB_ACCESS", 49 => "AGREEMENT_PHONE_NUMBER_MATCHING", 50 => "AGREEMENT_COMMUNICATION_INFO", 52 => "AGREEMENT_THINGS_WIRELESS_COMMUNICATION", 53 => "AGREEMENT_GDPR", 55 => "AGREEMENT_PROVIDE_LOCATION", 56 => "AGREEMENT_BEACON", 58 => "AGREEMENT_CONTENTS_SUGGEST", 59 => "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION"}
  VALID_VALUES = Set.new([NOTIFICATION_ENABLE, NOTIFICATION_MUTE_EXPIRATION, NOTIFICATION_NEW_MESSAGE, NOTIFICATION_GROUP_INVITATION, NOTIFICATION_SHOW_MESSAGE, NOTIFICATION_INCOMING_CALL, NOTIFICATION_SOUND_MESSAGE, NOTIFICATION_SOUND_GROUP, NOTIFICATION_DISABLED_WITH_SUB, NOTIFICATION_PAYMENT, NOTIFICATION_MENTION, NOTIFICATION_THUMBNAIL, PRIVACY_SYNC_CONTACTS, PRIVACY_SEARCH_BY_PHONE_NUMBER, PRIVACY_SEARCH_BY_USERID, PRIVACY_SEARCH_BY_EMAIL, PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN, PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME, PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME, PRIVACY_ALLOW_FRIEND_REQUEST, PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND, PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL, PRIVACY_AGREE_USE_PAIDCALL, CONTACT_MY_TICKET, IDENTITY_PROVIDER, IDENTITY_IDENTIFIER, SNS_ACCOUNT, PHONE_REGISTRATION, PREFERENCE_LOCALE, CUSTOM_MODE, EMAIL_CONFIRMATION_STATUS, ACCOUNT_MIGRATION_PINCODE, ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE, SECURITY_CENTER_SETTINGS, E2EE_ENABLE, ENABLE_SOUND_TO_TEXT, HITOKOTO_BACKUP_REQUESTED, CONTACT_ALLOW_FOLLOWING, PRIVACY_ALLOW_NEARBY, AGREEMENT_NEARBY, AGREEMENT_SQUARE, ALLOW_UNREGISTRATION_SECONDARY_DEVICE, AGREEMENT_BOT_USE, AGREEMENT_SHAKE_FUNCTION, AGREEMENT_MOBILE_CONTACT_NAME, AGREEMENT_SOUND_TO_TEXT, AGREEMENT_PRIVACY_POLICY_VERSION, AGREEMENT_AD_BY_WEB_ACCESS, AGREEMENT_PHONE_NUMBER_MATCHING, AGREEMENT_COMMUNICATION_INFO, AGREEMENT_THINGS_WIRELESS_COMMUNICATION, AGREEMENT_GDPR, AGREEMENT_PROVIDE_LOCATION, AGREEMENT_BEACON, AGREEMENT_CONTENTS_SUGGEST, AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION]).freeze
end

module OpStatusEnum
  NORMAL = 0
  ALERT_DISABLED = 1
  ALWAYS = 2
  VALUE_MAP = {0 => "NORMAL", 1 => "ALERT_DISABLED", 2 => "ALWAYS"}
  VALID_VALUES = Set.new([NORMAL, ALERT_DISABLED, ALWAYS]).freeze
end

module FriendRequestStatusEnum
  NONE = 0
  AVAILABLE = 1
  ALREADY_REQUESTED = 2
  UNAVAILABLE = 3
  VALUE_MAP = {0 => "NONE", 1 => "AVAILABLE", 2 => "ALREADY_REQUESTED", 3 => "UNAVAILABLE"}
  VALID_VALUES = Set.new([NONE, AVAILABLE, ALREADY_REQUESTED, UNAVAILABLE]).freeze
end

module PublicTypeEnum
  HIDDEN = 0
  PUBLIC = 1000
  VALUE_MAP = {0 => "HIDDEN", 1000 => "PUBLIC"}
  VALID_VALUES = Set.new([HIDDEN, PUBLIC]).freeze
end

module ChannelConfigurationEnum
  MESSAGE = 0
  MESSAGE_NOTIFICATION = 1
  NOTIFICATION_CENTER = 2
  VALUE_MAP = {0 => "MESSAGE", 1 => "MESSAGE_NOTIFICATION", 2 => "NOTIFICATION_CENTER"}
  VALID_VALUES = Set.new([MESSAGE, MESSAGE_NOTIFICATION, NOTIFICATION_CENTER]).freeze
end

module LiffFeatureStuct
  GEOLOCATION = 1
  ADVERTISING_ID = 2
  BLUETOOTH_LE = 3
  QR_CODE = 4
  ADVERTISING_SDK = 5
  VALUE_MAP = {1 => "GEOLOCATION", 2 => "ADVERTISING_ID", 3 => "BLUETOOTH_LE", 4 => "QR_CODE", 5 => "ADVERTISING_SDK"}
  VALID_VALUES = Set.new([GEOLOCATION, ADVERTISING_ID, BLUETOOTH_LE, QR_CODE, ADVERTISING_SDK]).freeze
end

module ChannelPermissionEnum
  PROFILE = 0
  FRIENDS = 1
  GROUP = 2
  VALUE_MAP = {0 => "PROFILE", 1 => "FRIENDS", 2 => "GROUP"}
  VALID_VALUES = Set.new([PROFILE, FRIENDS, GROUP]).freeze
end

module FeatureLicensesEnum
  BLE_LCS_API_USABLE = 26
  PROHIBIT_MINIMIZE_CHANNEL_BROWSER = 27
  ALLOW_IOS_WEBKIT = 28
  PURCHASE_LCS_API_USABLE = 38
  VALUE_MAP = {26 => "BLE_LCS_API_USABLE", 27 => "PROHIBIT_MINIMIZE_CHANNEL_BROWSER", 28 => "ALLOW_IOS_WEBKIT", 38 => "PURCHASE_LCS_API_USABLE"}
  VALID_VALUES = Set.new([BLE_LCS_API_USABLE, PROHIBIT_MINIMIZE_CHANNEL_BROWSER, ALLOW_IOS_WEBKIT, PURCHASE_LCS_API_USABLE]).freeze
end

module FriendDirectionEnum
  INCOMING = 1
  OUTGOING = 2
  VALUE_MAP = {1 => "INCOMING", 2 => "OUTGOING"}
  VALID_VALUES = Set.new([INCOMING, OUTGOING]).freeze
end

module FriendMethodEnum
  TIMELINE = 1
  NEARBY = 2
  SQUARE = 3
  VALUE_MAP = {1 => "TIMELINE", 2 => "NEARBY", 3 => "SQUARE"}
  VALID_VALUES = Set.new([TIMELINE, NEARBY, SQUARE]).freeze
end

module EmailConfirmationStatusEnum
  NOT_SPECIFIED = 0
  NOT_YET = 1
  DONE = 3
  NEED_ENFORCED_INPUT = 4
  VALUE_MAP = {0 => "NOT_SPECIFIED", 1 => "NOT_YET", 3 => "DONE", 4 => "NEED_ENFORCED_INPUT"}
  VALID_VALUES = Set.new([NOT_SPECIFIED, NOT_YET, DONE, NEED_ENFORCED_INPUT]).freeze
end

module CustomModesEnum
  PROMOTION_FRIENDS_INVITE = 1
  CAPABILITY_SERVER_SIDE_SMS = 2
  LINE_CLIENT_ANALYTICS_CONFIGURATION = 3
  VALUE_MAP = {1 => "PROMOTION_FRIENDS_INVITE", 2 => "CAPABILITY_SERVER_SIDE_SMS", 3 => "LINE_CLIENT_ANALYTICS_CONFIGURATION"}
  VALID_VALUES = Set.new([PROMOTION_FRIENDS_INVITE, CAPABILITY_SERVER_SIDE_SMS, LINE_CLIENT_ANALYTICS_CONFIGURATION]).freeze
end

module SecurityCenterSettingsTypeEnum
  NOT_APPLICABLE = 0
  NOT_SET = 1
  SET = 2
  NEED_ENFORCED_INPUT = 3
  VALUE_MAP = {0 => "NOT_APPLICABLE", 1 => "NOT_SET", 2 => "SET", 3 => "NEED_ENFORCED_INPUT"}
  VALID_VALUES = Set.new([NOT_APPLICABLE, NOT_SET, SET, NEED_ENFORCED_INPUT]).freeze
end

module AccountMigrationPincodeTypeEnum
  NOT_APPLICABLE = 0
  NOT_SET = 1
  SET = 2
  NEED_ENFORCED_INPUT = 3
  VALUE_MAP = {0 => "NOT_APPLICABLE", 1 => "NOT_SET", 2 => "SET", 3 => "NEED_ENFORCED_INPUT"}
  VALID_VALUES = Set.new([NOT_APPLICABLE, NOT_SET, SET, NEED_ENFORCED_INPUT]).freeze
end

module PrivacyAgeResultEnum
  OVER = 1
  UNDER = 2
  UNDEFINED = 3
  VALUE_MAP = {1 => "OVER", 2 => "UNDER", 3 => "UNDEFINED"}
  VALID_VALUES = Set.new([OVER, UNDER, UNDEFINED]).freeze
end

module SharePersonalInfoToFriendsEnum
  NEVER_SHOW = 0
  ONE_WAY = 1
  MUTUAL = 2
  VALUE_MAP = {0 => "NEVER_SHOW", 1 => "ONE_WAY", 2 => "MUTUAL"}
  VALID_VALUES = Set.new([NEVER_SHOW, ONE_WAY, MUTUAL]).freeze
end

module StatusMessageHistoryEnum
  NONE = 1
  ALL = 2
  VALUE_MAP = {1 => "NONE", 2 => "ALL"}
  VALID_VALUES = Set.new([NONE, ALL]).freeze
end

module AllowProfileHistoryEnum
  OWNER = 0
  FRIEND = 1
  VALUE_MAP = {0 => "OWNER", 1 => "FRIEND"}
  VALID_VALUES = Set.new([OWNER, FRIEND]).freeze
end

module StickerResourceEnum
  STATIC = 1
  ANIMATION = 2
  SOUND = 3
  ANIMATION_SOUND = 4
  POPUP = 5
  POPUP_SOUND = 6
  NAME_TEXT = 7
  VALUE_MAP = {1 => "STATIC", 2 => "ANIMATION", 3 => "SOUND", 4 => "ANIMATION_SOUND", 5 => "POPUP", 6 => "POPUP_SOUND", 7 => "NAME_TEXT"}
  VALID_VALUES = Set.new([STATIC, ANIMATION, SOUND, ANIMATION_SOUND, POPUP, POPUP_SOUND, NAME_TEXT]).freeze
end

module SubTypeEnum
  GENERAL = 0
  CREATORS = 1
  STICON = 2
  VALUE_MAP = {0 => "GENERAL", 1 => "CREATORS", 2 => "STICON"}
  VALID_VALUES = Set.new([GENERAL, CREATORS, STICON]).freeze
end

module ResultTypeEnum
  SUCCESS = 1
  REQUIRE_QRCODE = 2
  REQUIRE_DEVICE_CONFIRM = 3
  REQUIRE_SMS_CONFIRM = 4
  VALUE_MAP = {1 => "SUCCESS", 2 => "REQUIRE_QRCODE", 3 => "REQUIRE_DEVICE_CONFIRM", 4 => "REQUIRE_SMS_CONFIRM"}
  VALID_VALUES = Set.new([SUCCESS, REQUIRE_QRCODE, REQUIRE_DEVICE_CONFIRM, REQUIRE_SMS_CONFIRM]).freeze
end

module MethodEnum
  NO_AVAILABLE = 0
  PIN_VIA_SMS = 1
  CALLERID_INDIGO = 2
  PIN_VIA_TTS = 4
  SKIP = 10
  VALUE_MAP = {0 => "NO_AVAILABLE", 1 => "PIN_VIA_SMS", 2 => "CALLERID_INDIGO", 4 => "PIN_VIA_TTS", 10 => "SKIP"}
  VALID_VALUES = Set.new([NO_AVAILABLE, PIN_VIA_SMS, CALLERID_INDIGO, PIN_VIA_TTS, SKIP]).freeze
end

module SalesStateEnum
  ON_SALE = 0
  OUTDATED_VERSION = 1
  NOT_ON_SALE = 2
  VALUE_MAP = {0 => "ON_SALE", 1 => "OUTDATED_VERSION", 2 => "NOT_ON_SALE"}
  VALID_VALUES = Set.new([ON_SALE, OUTDATED_VERSION, NOT_ON_SALE]).freeze
end

module AvailabilityEnum
  PURCHASE_ONLY = 0
  PURCHASE_OR_SUBSCRIPTION = 1
  SUBSCRIPTION_ONLY = 2
  VALUE_MAP = {0 => "PURCHASE_ONLY", 1 => "PURCHASE_OR_SUBSCRIPTION", 2 => "SUBSCRIPTION_ONLY"}
  VALID_VALUES = Set.new([PURCHASE_ONLY, PURCHASE_OR_SUBSCRIPTION, SUBSCRIPTION_ONLY]).freeze
end

module ContactSettingEnum
  CONTACT_SETTING_NOTIFICATION_DISABLE = 1
  CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2
  CONTACT_SETTING_CONTACT_HIDE = 4
  CONTACT_SETTING_FAVORITE = 8
  CONTACT_SETTING_DELETE = 16
  VALUE_MAP = {1 => "CONTACT_SETTING_NOTIFICATION_DISABLE", 2 => "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE", 4 => "CONTACT_SETTING_CONTACT_HIDE", 8 => "CONTACT_SETTING_FAVORITE", 16 => "CONTACT_SETTING_DELETE"}
  VALID_VALUES = Set.new([CONTACT_SETTING_NOTIFICATION_DISABLE, CONTACT_SETTING_DISPLAY_NAME_OVERRIDE, CONTACT_SETTING_CONTACT_HIDE, CONTACT_SETTING_FAVORITE, CONTACT_SETTING_DELETE]).freeze
end

module SettingsAttributeEnum
  ALL = 2147483647
  NOTIFICATION_ENABLE = 1
  NOTIFICATION_MUTE_EXPIRATION = 2
  NOTIFICATION_NEW_MESSAGE = 4
  NOTIFICATION_GROUP_INVITATION = 8
  NOTIFICATION_SHOW_MESSAGE = 16
  NOTIFICATION_INCOMING_CALL = 32
  NOTIFICATION_SOUND_MESSAGE = 256
  NOTIFICATION_SOUND_GROUP = 512
  NOTIFICATION_DISABLED_WITH_SUB = 65536
  NOTIFICATION_PAYMENT = 131072
  PRIVACY_SYNC_CONTACTS = 64
  PRIVACY_SEARCH_BY_PHONE_NUMBER = 128
  PRIVACY_SEARCH_BY_USERID = 8192
  PRIVACY_SEARCH_BY_EMAIL = 16384
  PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152
  PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608
  PRIVACY_ALLOW_FRIEND_REQUEST = 1073741824
  PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432
  PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 67108864
  PRIVACY_AGREE_USE_PAIDCALL = 134217728
  CONTACT_MY_TICKET = 1024
  IDENTITY_PROVIDER = 2048
  IDENTITY_IDENTIFIER = 4096
  SNS_ACCOUNT = 524288
  PHONE_REGISTRATION = 1048576
  PREFERENCE_LOCALE = 32768
  CUSTOM_MODE = 4194304
  EMAIL_CONFIRMATION_STATUS = 16777216
  ACCOUNT_MIGRATION_PINCODE = 268435456
  ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 536870912
  SECURITY_CENTER_SETTINGS = 262144
  VALUE_MAP = {2147483647 => "ALL", 1 => "NOTIFICATION_ENABLE", 2 => "NOTIFICATION_MUTE_EXPIRATION", 4 => "NOTIFICATION_NEW_MESSAGE", 8 => "NOTIFICATION_GROUP_INVITATION", 16 => "NOTIFICATION_SHOW_MESSAGE", 32 => "NOTIFICATION_INCOMING_CALL", 256 => "NOTIFICATION_SOUND_MESSAGE", 512 => "NOTIFICATION_SOUND_GROUP", 65536 => "NOTIFICATION_DISABLED_WITH_SUB", 131072 => "NOTIFICATION_PAYMENT", 64 => "PRIVACY_SYNC_CONTACTS", 128 => "PRIVACY_SEARCH_BY_PHONE_NUMBER", 8192 => "PRIVACY_SEARCH_BY_USERID", 16384 => "PRIVACY_SEARCH_BY_EMAIL", 2097152 => "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN", 8388608 => "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME", 1073741824 => "PRIVACY_ALLOW_FRIEND_REQUEST", 33554432 => "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND", 67108864 => "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL", 134217728 => "PRIVACY_AGREE_USE_PAIDCALL", 1024 => "CONTACT_MY_TICKET", 2048 => "IDENTITY_PROVIDER", 4096 => "IDENTITY_IDENTIFIER", 524288 => "SNS_ACCOUNT", 1048576 => "PHONE_REGISTRATION", 32768 => "PREFERENCE_LOCALE", 4194304 => "CUSTOM_MODE", 16777216 => "EMAIL_CONFIRMATION_STATUS", 268435456 => "ACCOUNT_MIGRATION_PINCODE", 536870912 => "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE", 262144 => "SECURITY_CENTER_SETTINGS"}
  VALID_VALUES = Set.newfreeze
end

class ChannelDomainStruct; end

class ChannelProviderStruct; end

class WebAuthStuct; end

class GeolocationAccuracyStruct; end

class LocationStuct; end

class MessageStruct; end

class ContactStruct; end

class GroupPreferenceStruct; end

class GroupStruct; end

class RoomStruct; end

class GroupCallStruct; end

class ProfileStruct; end

class CallHostStruct; end

class GroupCallRouteStruct; end

class OperationStruct; end

class ChannelTokenStruct; end

class ChatContextStruct; end

class SquareChatContextStruct; end

class LiffContextStruct; end

class LiffViewRequestStruct; end

class ChannelInfoStruct; end

class LiffViewStruct; end

class FriendRequestStruct; end

class PriceStruct; end

class VersionRangeStruct; end

class PromoBuddyInfoStruct; end

class PromoInstallInfoStruct; end

class PromoMissionInfoStruct; end

class PromoDetailStruct; end

class PromotionInfoStruct; end

class WishPropertyStruct; end

class SubscriptionPropertyStruct; end

class GetProductStruct; end

class GetProductStructV2; end

class GetProductRequestStruct; end

class LocaleStruct; end

class PurchaseOrderStruct; end

class AuthQrcodeStruct; end

class SessionDataStruct; end

class LoginRequestStruct; end

class LoginResultStruct; end

class PurchaseOrderResponseStruct; end

class ImageTextPropertyStruct; end

class StickerPropertyStruct; end

class ThemePropertyStruct; end

class SticonPropertyStruct; end

class PropertyStruct; end

class ProductSearchSummaryStruct; end

class ShowcaseRequestStruct; end

class ShowcaseV3Response; end

class TicketStruct; end

class SettingsStruct; end

class AuthException < ::Thrift::Exception; end

class ChannelException < ::Thrift::Exception; end

class TalkException < ::Thrift::Exception; end

class LiffException < ::Thrift::Exception; end

class ShopExecption < ::Thrift::Exception; end

class ChannelDomainStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HOST = 1
  REMOVED = 2

  FIELDS = {
    HOST => {:type => ::Thrift::Types::STRING, :name => 'host'},
    REMOVED => {:type => ::Thrift::Types::BOOL, :name => 'removed'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelProviderStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NAME = 1
  CERTIFIED = 2

  FIELDS = {
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    CERTIFIED => {:type => ::Thrift::Types::BOOL, :name => 'certified'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class WebAuthStuct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  BASEURL = 1
  TOKEN = 2

  FIELDS = {
    BASEURL => {:type => ::Thrift::Types::STRING, :name => 'baseUrl'},
    TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GeolocationAccuracyStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  RADIUSMETERS = 1
  RADIUSCONFIDENCE = 2

  FIELDS = {
    RADIUSMETERS => {:type => ::Thrift::Types::DOUBLE, :name => 'radiusMeters'},
    RADIUSCONFIDENCE => {:type => ::Thrift::Types::DOUBLE, :name => 'radiusConfidence'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class LocationStuct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TITLE = 1
  ADDRESS = 2
  LATITUDE = 3
  LONGITUDE = 4
  PHONE = 5
  CATEGORYID = 6
  PROVIDER = 7
  ACCURACY = 8

  FIELDS = {
    TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
    ADDRESS => {:type => ::Thrift::Types::STRING, :name => 'address'},
    LATITUDE => {:type => ::Thrift::Types::DOUBLE, :name => 'latitude'},
    LONGITUDE => {:type => ::Thrift::Types::DOUBLE, :name => 'longitude'},
    PHONE => {:type => ::Thrift::Types::STRING, :name => 'phone'},
    CATEGORYID => {:type => ::Thrift::Types::STRING, :name => 'categoryId'},
    PROVIDER => {:type => ::Thrift::Types::I32, :name => 'provider', :enum_class => ::ProviderEnum},
    ACCURACY => {:type => ::Thrift::Types::STRUCT, :name => 'accuracy', :class => ::GeolocationAccuracyStruct}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @provider.nil? || ::ProviderEnum::VALID_VALUES.include?(@provider)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field provider!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class MessageStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  _FROM = 1
  TO = 2
  TOTYPE = 3
  ID = 4
  CREATEDTIME = 5
  DELIVEREDTIME = 6
  TEXT = 10
  LOCATION = 11
  HASCONTENT = 14
  CONTENTTYPE = 15
  CONTENTPREVIEW = 17
  CONTENTMETADATA = 18
  SESSIONID = 19
  CHUNKS = 20
  RELATEDMESSAGEID = 21
  MESSAGERELATIONTYPE = 22
  READCOUNT = 23
  RELATEDMESSAGESERVICECODE = 24

  FIELDS = {
    _FROM => {:type => ::Thrift::Types::STRING, :name => '_from'},
    TO => {:type => ::Thrift::Types::STRING, :name => 'to'},
    TOTYPE => {:type => ::Thrift::Types::I32, :name => 'toType', :enum_class => ::ToTypeEnum},
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    DELIVEREDTIME => {:type => ::Thrift::Types::I64, :name => 'deliveredTime'},
    TEXT => {:type => ::Thrift::Types::STRING, :name => 'text'},
    LOCATION => {:type => ::Thrift::Types::STRUCT, :name => 'location', :class => ::LocationStuct},
    HASCONTENT => {:type => ::Thrift::Types::BOOL, :name => 'hasContent'},
    CONTENTTYPE => {:type => ::Thrift::Types::I32, :name => 'contentType', :enum_class => ::ContentTypeEnum},
    CONTENTPREVIEW => {:type => ::Thrift::Types::STRING, :name => 'contentPreview', :binary => true},
    CONTENTMETADATA => {:type => ::Thrift::Types::MAP, :name => 'contentMetadata', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
    SESSIONID => {:type => ::Thrift::Types::BYTE, :name => 'sessionId'},
    CHUNKS => {:type => ::Thrift::Types::LIST, :name => 'chunks', :element => {:type => ::Thrift::Types::STRING, :binary => true}},
    RELATEDMESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'relatedMessageId'},
    MESSAGERELATIONTYPE => {:type => ::Thrift::Types::I32, :name => 'messageRelationType', :enum_class => ::RelationTypeEnum},
    READCOUNT => {:type => ::Thrift::Types::I64, :name => 'readCount'},
    RELATEDMESSAGESERVICECODE => {:type => ::Thrift::Types::I32, :name => 'relatedMessageServiceCode', :enum_class => ::MessageServiceCodeEnum}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @toType.nil? || ::ToTypeEnum::VALID_VALUES.include?(@toType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field toType!')
    end
    unless @contentType.nil? || ::ContentTypeEnum::VALID_VALUES.include?(@contentType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field contentType!')
    end
    unless @messageRelationType.nil? || ::RelationTypeEnum::VALID_VALUES.include?(@messageRelationType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field messageRelationType!')
    end
    unless @relatedMessageServiceCode.nil? || ::MessageServiceCodeEnum::VALID_VALUES.include?(@relatedMessageServiceCode)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field relatedMessageServiceCode!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ContactStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  CREATEDTIME = 2
  TYPE = 10
  STATUS = 11
  RELATION = 21
  DISPLAYNAME = 22
  PHONETICNAME = 23
  PICTURESTATUS = 24
  THUMBNAILURL = 25
  STATUSMESSAGE = 26
  DISPLAYNAMEOVERRIDDEN = 27
  FAVORITETIME = 28
  CAPABLEVOICECALL = 31
  CAPABLEVIDEOCALL = 32
  CAPABLEMYHOME = 33
  CAPABLEBUDDY = 34
  ATTRIBUTES = 35
  SETTINGS = 36
  PICTUREPATH = 37
  RECOMMENDPARAMS = 38
  FRIENDREQUESTSTATUS = 39
  MUSICPROFILE = 40
  VIDEOPROFILE = 42
  STATUSMESSAGECONTENTMETADATA = 43

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::ContactTypeEnum},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::ContactStatusEnum},
    RELATION => {:type => ::Thrift::Types::I32, :name => 'relation', :enum_class => ::ContactRelationEnum},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    PHONETICNAME => {:type => ::Thrift::Types::STRING, :name => 'phoneticName'},
    PICTURESTATUS => {:type => ::Thrift::Types::STRING, :name => 'pictureStatus'},
    THUMBNAILURL => {:type => ::Thrift::Types::STRING, :name => 'thumbnailUrl'},
    STATUSMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'statusMessage'},
    DISPLAYNAMEOVERRIDDEN => {:type => ::Thrift::Types::STRING, :name => 'displayNameOverridden'},
    FAVORITETIME => {:type => ::Thrift::Types::I64, :name => 'favoriteTime'},
    CAPABLEVOICECALL => {:type => ::Thrift::Types::BOOL, :name => 'capableVoiceCall'},
    CAPABLEVIDEOCALL => {:type => ::Thrift::Types::BOOL, :name => 'capableVideoCall'},
    CAPABLEMYHOME => {:type => ::Thrift::Types::BOOL, :name => 'capableMyhome'},
    CAPABLEBUDDY => {:type => ::Thrift::Types::BOOL, :name => 'capableBuddy'},
    ATTRIBUTES => {:type => ::Thrift::Types::I32, :name => 'attributes'},
    SETTINGS => {:type => ::Thrift::Types::I64, :name => 'settings'},
    PICTUREPATH => {:type => ::Thrift::Types::STRING, :name => 'picturePath'},
    RECOMMENDPARAMS => {:type => ::Thrift::Types::STRING, :name => 'recommendParams'},
    FRIENDREQUESTSTATUS => {:type => ::Thrift::Types::I32, :name => 'friendRequestStatus', :enum_class => ::FriendRequestStatusEnum},
    MUSICPROFILE => {:type => ::Thrift::Types::STRING, :name => 'musicProfile'},
    VIDEOPROFILE => {:type => ::Thrift::Types::STRING, :name => 'videoProfile'},
    STATUSMESSAGECONTENTMETADATA => {:type => ::Thrift::Types::MAP, :name => 'statusMessageContentMetadata', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::ContactTypeEnum::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
    unless @status.nil? || ::ContactStatusEnum::VALID_VALUES.include?(@status)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
    end
    unless @relation.nil? || ::ContactRelationEnum::VALID_VALUES.include?(@relation)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field relation!')
    end
    unless @friendRequestStatus.nil? || ::FriendRequestStatusEnum::VALID_VALUES.include?(@friendRequestStatus)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field friendRequestStatus!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class GroupPreferenceStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  INVITATIONTICKET = 1
  FAVORITETIMESTAMP = 2

  FIELDS = {
    INVITATIONTICKET => {:type => ::Thrift::Types::STRING, :name => 'invitationTicket'},
    FAVORITETIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'favoriteTimestamp'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GroupStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  CREATEDTIME = 2
  NAME = 10
  PICTURESTATUS = 11
  PREVENTEDJOINBYTICKET = 12
  GROUPPREFERENCE = 13
  MEMBERS = 20
  CREATOR = 21
  INVITEE = 22
  NOTIFICATIONDISABLED = 31
  PICTUREPATH = 32
  MEMBERMIDS = 40
  INVITEEMIDS = 41

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    PICTURESTATUS => {:type => ::Thrift::Types::STRING, :name => 'pictureStatus'},
    PREVENTEDJOINBYTICKET => {:type => ::Thrift::Types::BOOL, :name => 'preventedJoinByTicket'},
    GROUPPREFERENCE => {:type => ::Thrift::Types::STRUCT, :name => 'groupPreference', :class => ::GroupPreferenceStruct},
    MEMBERS => {:type => ::Thrift::Types::LIST, :name => 'members', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ContactStruct}},
    CREATOR => {:type => ::Thrift::Types::STRUCT, :name => 'creator', :class => ::ContactStruct},
    INVITEE => {:type => ::Thrift::Types::LIST, :name => 'invitee', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ContactStruct}},
    NOTIFICATIONDISABLED => {:type => ::Thrift::Types::BOOL, :name => 'notificationDisabled'},
    PICTUREPATH => {:type => ::Thrift::Types::STRING, :name => 'picturePath'},
    MEMBERMIDS => {:type => ::Thrift::Types::LIST, :name => 'memberMids', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ContactStruct}},
    INVITEEMIDS => {:type => ::Thrift::Types::LIST, :name => 'inviteeMids', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ContactStruct}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class RoomStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  CREATEDTIME = 2
  CONTACTS = 10
  NOTIFICATIONDISABLED = 31
  MEMBERMIDS = 40

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    CONTACTS => {:type => ::Thrift::Types::LIST, :name => 'contacts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ContactStruct}},
    NOTIFICATIONDISABLED => {:type => ::Thrift::Types::BOOL, :name => 'notificationDisabled'},
    MEMBERMIDS => {:type => ::Thrift::Types::LIST, :name => 'memberMids', :element => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GroupCallStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ONLINE = 1
  CHATMID = 2
  HOSTMIDS = 3
  MEMBERMIDS = 4
  STARTED = 5
  MEDIATYPE = 6

  FIELDS = {
    ONLINE => {:type => ::Thrift::Types::BOOL, :name => 'online'},
    CHATMID => {:type => ::Thrift::Types::STRING, :name => 'chatMid'},
    HOSTMIDS => {:type => ::Thrift::Types::STRING, :name => 'hostMids'},
    MEMBERMIDS => {:type => ::Thrift::Types::LIST, :name => 'memberMids', :element => {:type => ::Thrift::Types::STRING}},
    STARTED => {:type => ::Thrift::Types::I64, :name => 'started'},
    MEDIATYPE => {:type => ::Thrift::Types::I32, :name => 'mediaType', :enum_class => ::GroupCallMediaTypeEnum}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @mediaType.nil? || ::GroupCallMediaTypeEnum::VALID_VALUES.include?(@mediaType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field mediaType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ProfileStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  MID = 1
  USERID = 3
  PHONE = 10
  EMAIL = 11
  REGIONCODE = 12
  DISPLAYNAME = 20
  PHONETICNAME = 21
  PICTURESTATUS = 22
  THUMBNAILURL = 23
  STATUSMESSAGE = 24
  ALLOWSEARCHBYUSERID = 31
  ALLOWSEARCHBYEMAIL = 32
  PICTUREPATH = 33
  MUSICPROFILE = 34
  VIDEOPROFILE = 35
  STATUSMESSAGECONTENTMETADATA = 36

  FIELDS = {
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    USERID => {:type => ::Thrift::Types::STRING, :name => 'userid'},
    PHONE => {:type => ::Thrift::Types::STRING, :name => 'phone'},
    EMAIL => {:type => ::Thrift::Types::STRING, :name => 'email'},
    REGIONCODE => {:type => ::Thrift::Types::STRING, :name => 'regionCode'},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    PHONETICNAME => {:type => ::Thrift::Types::STRING, :name => 'phoneticName'},
    PICTURESTATUS => {:type => ::Thrift::Types::STRING, :name => 'pictureStatus'},
    THUMBNAILURL => {:type => ::Thrift::Types::STRING, :name => 'thumbnailUrl'},
    STATUSMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'statusMessage'},
    ALLOWSEARCHBYUSERID => {:type => ::Thrift::Types::BOOL, :name => 'allowSearchByUserid'},
    ALLOWSEARCHBYEMAIL => {:type => ::Thrift::Types::BOOL, :name => 'allowSearchByEmail'},
    PICTUREPATH => {:type => ::Thrift::Types::STRING, :name => 'picturePath'},
    MUSICPROFILE => {:type => ::Thrift::Types::STRING, :name => 'musicProfile'},
    VIDEOPROFILE => {:type => ::Thrift::Types::STRING, :name => 'videoProfile'},
    STATUSMESSAGECONTENTMETADATA => {:type => ::Thrift::Types::MAP, :name => 'statusMessageContentMetadata', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class CallHostStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HOST = 1
  PORT = 2
  ZONE = 3

  FIELDS = {
    HOST => {:type => ::Thrift::Types::STRING, :name => 'host'},
    PORT => {:type => ::Thrift::Types::I32, :name => 'port'},
    ZONE => {:type => ::Thrift::Types::STRING, :name => 'zone'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GroupCallRouteStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TOKEN = 1
  CSCF = 2
  MIX = 3
  HOSTMID = 4
  CAPABILITIES = 5
  PROTO = 6
  VOIPADDRESS = 7
  VOIPUDPPORT = 8
  VOIPTCPPORT = 9
  FROMZONE = 10
  COMMPARAM = 11
  POLARISADDRESS = 12
  POLARISUDPPORT = 13
  POLARISZONE = 14
  ORIONADDRESS = 15

  FIELDS = {
    TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
    CSCF => {:type => ::Thrift::Types::STRUCT, :name => 'cscf', :class => ::CallHostStruct},
    MIX => {:type => ::Thrift::Types::STRUCT, :name => 'mix', :class => ::CallHostStruct},
    HOSTMID => {:type => ::Thrift::Types::STRING, :name => 'hostMid'},
    CAPABILITIES => {:type => ::Thrift::Types::LIST, :name => 'capabilities', :element => {:type => ::Thrift::Types::STRING}},
    PROTO => {:type => ::Thrift::Types::I32, :name => 'proto', :enum_class => ::ProtoEnum},
    VOIPADDRESS => {:type => ::Thrift::Types::STRING, :name => 'voipAddress'},
    VOIPUDPPORT => {:type => ::Thrift::Types::I32, :name => 'voipUdpPort'},
    VOIPTCPPORT => {:type => ::Thrift::Types::I32, :name => 'voipTcpPort'},
    FROMZONE => {:type => ::Thrift::Types::STRING, :name => 'fromZone'},
    COMMPARAM => {:type => ::Thrift::Types::STRING, :name => 'commParam'},
    POLARISADDRESS => {:type => ::Thrift::Types::STRING, :name => 'polarisAddress'},
    POLARISUDPPORT => {:type => ::Thrift::Types::I32, :name => 'polarisUdpPort'},
    POLARISZONE => {:type => ::Thrift::Types::STRING, :name => 'polarisZone'},
    ORIONADDRESS => {:type => ::Thrift::Types::STRING, :name => 'orionAddress'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @proto.nil? || ::ProtoEnum::VALID_VALUES.include?(@proto)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field proto!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class OperationStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  REVISION = 1
  CREATEDTIME = 2
  TYPE = 3
  REQSEQ = 4
  CHECKSUM = 5
  STATUS = 7
  PARAM1 = 10
  PARAM2 = 11
  PARAM3 = 12
  MESSAGE = 20

  FIELDS = {
    REVISION => {:type => ::Thrift::Types::I64, :name => 'revision'},
    CREATEDTIME => {:type => ::Thrift::Types::I64, :name => 'createdTime'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::OpTypeEnum},
    REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
    CHECKSUM => {:type => ::Thrift::Types::STRING, :name => 'checksum'},
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::OpStatusEnum},
    PARAM1 => {:type => ::Thrift::Types::STRING, :name => 'param1'},
    PARAM2 => {:type => ::Thrift::Types::STRING, :name => 'param2'},
    PARAM3 => {:type => ::Thrift::Types::STRING, :name => 'param3'},
    MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::MessageStruct}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::OpTypeEnum::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
    unless @status.nil? || ::OpStatusEnum::VALID_VALUES.include?(@status)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelTokenStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TOKEN = 1
  OBSTOKEN = 2
  EXPIRATION = 3
  REFRESHTOKEN = 4
  CHANNELACCESSTOKEN = 5

  FIELDS = {
    TOKEN => {:type => ::Thrift::Types::STRING, :name => 'token'},
    OBSTOKEN => {:type => ::Thrift::Types::STRING, :name => 'obsToken'},
    EXPIRATION => {:type => ::Thrift::Types::I64, :name => 'expiration'},
    REFRESHTOKEN => {:type => ::Thrift::Types::STRING, :name => 'refreshToken'},
    CHANNELACCESSTOKEN => {:type => ::Thrift::Types::STRING, :name => 'channelAccessToken'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChatContextStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHATMID = 1

  FIELDS = {
    CHATMID => {:type => ::Thrift::Types::STRING, :name => 'chatMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SquareChatContextStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SQUARECHATMID = 1

  FIELDS = {
    SQUARECHATMID => {:type => ::Thrift::Types::STRING, :name => 'squareChatMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class LiffContextStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NONE = 1
  CHAT = 2
  SQUARECHAT = 3

  FIELDS = {
    NONE => {:type => ::Thrift::Types::BOOL, :name => 'none'},
    CHAT => {:type => ::Thrift::Types::STRUCT, :name => 'chat', :class => ::ChatContextStruct},
    SQUARECHAT => {:type => ::Thrift::Types::STRUCT, :name => 'squareChat', :class => ::SquareChatContextStruct}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class LiffViewRequestStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  LIFFID = 1
  CONTEXT = 2
  LANG = 3

  FIELDS = {
    LIFFID => {:type => ::Thrift::Types::STRING, :name => 'liffId'},
    CONTEXT => {:type => ::Thrift::Types::STRUCT, :name => 'context', :class => ::LiffContextStruct},
    LANG => {:type => ::Thrift::Types::STRING, :name => 'lang'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelInfoStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CHANNELID = 1
  NAME = 3
  ENTRYPAGEURL = 4
  DESCRIPTIONTEXT = 5
  PROVIDER = 6
  PUBLICTYPE = 7
  ICONIMAGE = 8
  PERMISSIONS = 9
  ICONTHUMBNAILIMAGE = 11
  CHANNELCONFIGURATIONS = 12
  LCSALLAPIUSABLE = 13
  ALLOWEDPERMISSIONS = 14
  CHANNELDOMAINS = 15
  UPDATEDTIMESTAMP = 16
  FEATURELICENSES = 17

  FIELDS = {
    CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    ENTRYPAGEURL => {:type => ::Thrift::Types::STRING, :name => 'entryPageUrl'},
    DESCRIPTIONTEXT => {:type => ::Thrift::Types::STRING, :name => 'descriptionText'},
    PROVIDER => {:type => ::Thrift::Types::STRUCT, :name => 'provider', :class => ::ChannelProviderStruct},
    PUBLICTYPE => {:type => ::Thrift::Types::I32, :name => 'publicType', :enum_class => ::PublicTypeEnum},
    ICONIMAGE => {:type => ::Thrift::Types::STRING, :name => 'iconImage'},
    PERMISSIONS => {:type => ::Thrift::Types::LIST, :name => 'permissions', :element => {:type => ::Thrift::Types::STRING}},
    ICONTHUMBNAILIMAGE => {:type => ::Thrift::Types::STRING, :name => 'iconThumbnailImage'},
    CHANNELCONFIGURATIONS => {:type => ::Thrift::Types::LIST, :name => 'channelConfigurations', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ChannelConfigurationEnum}},
    LCSALLAPIUSABLE => {:type => ::Thrift::Types::BOOL, :name => 'lcsAllApiUsable'},
    ALLOWEDPERMISSIONS => {:type => ::Thrift::Types::SET, :name => 'allowedPermissions', :element => {:type => ::Thrift::Types::I32, :enum_class => ::ChannelPermissionEnum}},
    CHANNELDOMAINS => {:type => ::Thrift::Types::LIST, :name => 'channelDomains', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ChannelDomainStruct}},
    UPDATEDTIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'updatedTimestamp'},
    FEATURELICENSES => {:type => ::Thrift::Types::SET, :name => 'featureLicenses', :element => {:type => ::Thrift::Types::I32, :enum_class => ::FeatureLicensesEnum}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @publicType.nil? || ::PublicTypeEnum::VALID_VALUES.include?(@publicType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field publicType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class LiffViewStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CONTEXTTOKEN = 2
  ACCESSTOKEN = 3
  FEATURETOKEN = 4
  FEATURES = 5
  CHANNELID = 6

  FIELDS = {
    CONTEXTTOKEN => {:type => ::Thrift::Types::STRING, :name => 'contextToken'},
    ACCESSTOKEN => {:type => ::Thrift::Types::STRING, :name => 'accessToken'},
    FEATURETOKEN => {:type => ::Thrift::Types::STRING, :name => 'featureToken'},
    FEATURES => {:type => ::Thrift::Types::LIST, :name => 'features', :element => {:type => ::Thrift::Types::I32, :enum_class => ::LiffFeatureStuct}},
    CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class FriendRequestStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  EMID = 1
  MID = 2
  DIRECTION = 3
  METHOD = 4
  PARAM = 5
  TIMESTAMP = 6
  SEQID = 7
  DISPLAYNAME = 10
  PICTUREPATH = 11
  PICTURESTATUS = 12

  FIELDS = {
    EMID => {:type => ::Thrift::Types::STRING, :name => 'eMid'},
    MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
    DIRECTION => {:type => ::Thrift::Types::I32, :name => 'direction', :enum_class => ::FriendDirectionEnum},
    METHOD => {:type => ::Thrift::Types::I32, :name => 'method', :enum_class => ::FriendMethodEnum},
    PARAM => {:type => ::Thrift::Types::STRING, :name => 'param'},
    TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
    SEQID => {:type => ::Thrift::Types::I64, :name => 'seqId'},
    DISPLAYNAME => {:type => ::Thrift::Types::STRING, :name => 'displayName'},
    PICTUREPATH => {:type => ::Thrift::Types::STRING, :name => 'picturePath'},
    PICTURESTATUS => {:type => ::Thrift::Types::STRING, :name => 'pictureStatus'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @direction.nil? || ::FriendDirectionEnum::VALID_VALUES.include?(@direction)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field direction!')
    end
    unless @method.nil? || ::FriendMethodEnum::VALID_VALUES.include?(@method)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field method!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class PriceStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CURRENCY = 1
  AMOUNT = 2
  PRICESTRING = 3

  FIELDS = {
    CURRENCY => {:type => ::Thrift::Types::STRING, :name => 'currency'},
    AMOUNT => {:type => ::Thrift::Types::STRING, :name => 'amount'},
    PRICESTRING => {:type => ::Thrift::Types::STRING, :name => 'priceString'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class VersionRangeStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  LOWERBOUND = 1
  LOWERBOUNDINCLUSIVE = 2
  UPPERBOUND = 3
  UPPERBOUNDINCLUSIVE = 4

  FIELDS = {
    LOWERBOUND => {:type => ::Thrift::Types::STRING, :name => 'lowerBound'},
    LOWERBOUNDINCLUSIVE => {:type => ::Thrift::Types::BOOL, :name => 'lowerBoundInclusive'},
    UPPERBOUND => {:type => ::Thrift::Types::STRING, :name => 'upperBound'},
    UPPERBOUNDINCLUSIVE => {:type => ::Thrift::Types::BOOL, :name => 'upperBoundInclusive'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PromoBuddyInfoStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  BUDDYMID = 1

  FIELDS = {
    BUDDYMID => {:type => ::Thrift::Types::STRING, :name => 'buddyMid'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PromoInstallInfoStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  DOWNLOADURL = 1
  CUSTOMURLSCHEMA = 2

  FIELDS = {
    DOWNLOADURL => {:type => ::Thrift::Types::STRING, :name => 'downloadUrl'},
    CUSTOMURLSCHEMA => {:type => ::Thrift::Types::STRING, :name => 'customUrlSchema'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PromoMissionInfoStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PROMOTIONMISSIONTYPE = 1
  MISSIONCOMPLETED = 2
  DOWNLOADURL = 3
  CUSTOMURLSCHEMA = 4

  FIELDS = {
    PROMOTIONMISSIONTYPE => {:type => ::Thrift::Types::I32, :name => 'promotionMissionType', :enum_class => ::PromoMissionTypeEnum},
    MISSIONCOMPLETED => {:type => ::Thrift::Types::BOOL, :name => 'missionCompleted'},
    DOWNLOADURL => {:type => ::Thrift::Types::STRING, :name => 'downloadUrl'},
    CUSTOMURLSCHEMA => {:type => ::Thrift::Types::STRING, :name => 'customUrlSchema'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @promotionMissionType.nil? || ::PromoMissionTypeEnum::VALID_VALUES.include?(@promotionMissionType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field promotionMissionType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class PromoDetailStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PROMOTIONBUDDYINFO = 1
  PROMOTIONINSTALLINFO = 2
  PROMOTIONMISSIONINFO = 3

  FIELDS = {
    PROMOTIONBUDDYINFO => {:type => ::Thrift::Types::STRUCT, :name => 'promotionBuddyInfo', :class => ::PromoBuddyInfoStruct},
    PROMOTIONINSTALLINFO => {:type => ::Thrift::Types::STRUCT, :name => 'promotionInstallInfo', :class => ::PromoInstallInfoStruct},
    PROMOTIONMISSIONINFO => {:type => ::Thrift::Types::STRING, :name => 'promotionMissionInfo'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PromotionInfoStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PROMOTIONTYPE = 1
  PROMOTIONDETAIL = 2
  BUDDYINFO = 51

  FIELDS = {
    PROMOTIONTYPE => {:type => ::Thrift::Types::I32, :name => 'promotionType', :enum_class => ::PromoTypeEnum},
    PROMOTIONDETAIL => {:type => ::Thrift::Types::STRUCT, :name => 'promotionDetail', :class => ::PromoDetailStruct},
    BUDDYINFO => {:type => ::Thrift::Types::STRUCT, :name => 'buddyInfo', :class => ::PromoBuddyInfoStruct}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @promotionType.nil? || ::PromoTypeEnum::VALID_VALUES.include?(@promotionType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field promotionType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class WishPropertyStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TOTALCOUNT = 1

  FIELDS = {
    TOTALCOUNT => {:type => ::Thrift::Types::I64, :name => 'totalCount'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SubscriptionPropertyStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AVAILABLEFORSUBSCRIBE = 1
  SUBSCRIPTIONAVAILABILITY = 2

  FIELDS = {
    AVAILABLEFORSUBSCRIBE => {:type => ::Thrift::Types::BOOL, :name => 'availableForSubscribe'},
    SUBSCRIPTIONAVAILABILITY => {:type => ::Thrift::Types::I32, :name => 'subscriptionAvailability', :enum_class => ::AvailabilityEnum}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @subscriptionAvailability.nil? || ::AvailabilityEnum::VALID_VALUES.include?(@subscriptionAvailability)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field subscriptionAvailability!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class GetProductStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  BILLINGITEMID = 2
  TYPE = 3
  SUBTYPE = 4
  BILLINGCPID = 5
  NAME = 11
  AUTHOR = 12
  DETAILS = 13
  COPYRIGHT = 14
  NOTICE = 15
  PROMOTIONINFO = 16
  LATESTVERSION = 21
  LATESTVERSIONSTRING = 22
  VERSION = 23
  VERSIONSTRING = 24
  APPLICATIONVERSIONRANGE = 25
  OWNED = 31
  GRANTEDBYDEFAULT = 32
  VALIDFOR = 41
  VALIDUNTIL = 42
  ONSALE = 51
  SALESFLAGS = 52
  AVAILABLEFORPRESENT = 53
  AVAILABLEFORMYSELF = 54
  PRICETIER = 61
  PRICE = 62
  PRICEINLINECOIN = 63
  LOCALIZEDPRICE = 64
  IMAGES = 91
  ATTRIBUTES = 92
  AUTHORID = 93
  STICKERRESOURCETYPE = 94
  PRODUCTPROPERTY = 95
  PRODUCTSALESSTATE = 96
  INSTALLEDTIME = 97
  WISHPROPERTY = 101
  SUBSCRIPTIONPROPERTY = 102

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    BILLINGITEMID => {:type => ::Thrift::Types::STRING, :name => 'billingItemId'},
    TYPE => {:type => ::Thrift::Types::STRING, :name => 'type'},
    SUBTYPE => {:type => ::Thrift::Types::I32, :name => 'subtype', :enum_class => ::SubTypeEnum},
    BILLINGCPID => {:type => ::Thrift::Types::STRING, :name => 'billingCpId'},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    AUTHOR => {:type => ::Thrift::Types::STRING, :name => 'author'},
    DETAILS => {:type => ::Thrift::Types::STRING, :name => 'details'},
    COPYRIGHT => {:type => ::Thrift::Types::STRING, :name => 'copyright'},
    NOTICE => {:type => ::Thrift::Types::STRING, :name => 'notice'},
    PROMOTIONINFO => {:type => ::Thrift::Types::STRUCT, :name => 'promotionInfo', :class => ::PromotionInfoStruct},
    LATESTVERSION => {:type => ::Thrift::Types::I64, :name => 'latestVersion'},
    LATESTVERSIONSTRING => {:type => ::Thrift::Types::STRING, :name => 'latestVersionString'},
    VERSION => {:type => ::Thrift::Types::I64, :name => 'version'},
    VERSIONSTRING => {:type => ::Thrift::Types::STRING, :name => 'versionString'},
    APPLICATIONVERSIONRANGE => {:type => ::Thrift::Types::STRUCT, :name => 'applicationVersionRange', :class => ::VersionRangeStruct},
    OWNED => {:type => ::Thrift::Types::BOOL, :name => 'owned'},
    GRANTEDBYDEFAULT => {:type => ::Thrift::Types::BOOL, :name => 'grantedByDefault'},
    VALIDFOR => {:type => ::Thrift::Types::I32, :name => 'validFor'},
    VALIDUNTIL => {:type => ::Thrift::Types::I64, :name => 'validUntil'},
    ONSALE => {:type => ::Thrift::Types::BOOL, :name => 'onSale'},
    SALESFLAGS => {:type => ::Thrift::Types::SET, :name => 'salesFlags', :element => {:type => ::Thrift::Types::STRING}},
    AVAILABLEFORPRESENT => {:type => ::Thrift::Types::BOOL, :name => 'availableForPresent'},
    AVAILABLEFORMYSELF => {:type => ::Thrift::Types::BOOL, :name => 'availableForMyself'},
    PRICETIER => {:type => ::Thrift::Types::I32, :name => 'priceTier'},
    PRICE => {:type => ::Thrift::Types::STRUCT, :name => 'price', :class => ::PriceStruct},
    PRICEINLINECOIN => {:type => ::Thrift::Types::STRING, :name => 'priceInLineCoin'},
    LOCALIZEDPRICE => {:type => ::Thrift::Types::STRUCT, :name => 'localizedPrice', :class => ::PriceStruct},
    IMAGES => {:type => ::Thrift::Types::MAP, :name => 'images', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::LIST, :element => {:type => ::Thrift::Types::STRING}}},
    ATTRIBUTES => {:type => ::Thrift::Types::MAP, :name => 'attributes', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
    AUTHORID => {:type => ::Thrift::Types::STRING, :name => 'authorId'},
    STICKERRESOURCETYPE => {:type => ::Thrift::Types::I32, :name => 'stickerResourceType', :enum_class => ::StickerResourceEnum},
    PRODUCTPROPERTY => {:type => ::Thrift::Types::STRUCT, :name => 'productProperty', :class => ::PropertyStruct},
    PRODUCTSALESSTATE => {:type => ::Thrift::Types::I32, :name => 'productSalesState', :enum_class => ::SalesStateEnum},
    INSTALLEDTIME => {:type => ::Thrift::Types::I64, :name => 'installedTime'},
    WISHPROPERTY => {:type => ::Thrift::Types::STRUCT, :name => 'wishProperty', :class => ::WishPropertyStruct},
    SUBSCRIPTIONPROPERTY => {:type => ::Thrift::Types::STRUCT, :name => 'subscriptionProperty', :class => ::SubscriptionPropertyStruct}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @subtype.nil? || ::SubTypeEnum::VALID_VALUES.include?(@subtype)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field subtype!')
    end
    unless @stickerResourceType.nil? || ::StickerResourceEnum::VALID_VALUES.include?(@stickerResourceType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field stickerResourceType!')
    end
    unless @productSalesState.nil? || ::SalesStateEnum::VALID_VALUES.include?(@productSalesState)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field productSalesState!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class GetProductStructV2
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRODUCTDETAIL = 1

  FIELDS = {
    PRODUCTDETAIL => {:type => ::Thrift::Types::STRUCT, :name => 'productDetail', :class => ::GetProductStruct}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class GetProductRequestStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRODUCTTYPE = 1
  PRODUCTID = 2
  CARRIERCODE = 3
  SAVEBROWSINGHISTORY = 4

  FIELDS = {
    PRODUCTTYPE => {:type => ::Thrift::Types::I32, :name => 'productType', :enum_class => ::ProductTypeEnum},
    PRODUCTID => {:type => ::Thrift::Types::STRING, :name => 'productId'},
    CARRIERCODE => {:type => ::Thrift::Types::STRING, :name => 'carrierCode'},
    SAVEBROWSINGHISTORY => {:type => ::Thrift::Types::BOOL, :name => 'saveBrowsingHistory'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @productType.nil? || ::ProductTypeEnum::VALID_VALUES.include?(@productType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field productType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class LocaleStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  LANGUAGE = 1
  COUNTRY = 2

  FIELDS = {
    LANGUAGE => {:type => ::Thrift::Types::STRING, :name => 'language'},
    COUNTRY => {:type => ::Thrift::Types::STRING, :name => 'country'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PurchaseOrderStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SHOPID = 1
  PRODUCTID = 2
  RECIPIENTMID = 5
  PRICE = 11
  ENABLELINEPOINTAUTOEXCHANGE = 12
  LOCALE = 21
  PRESENTATTRIBUTES = 31

  FIELDS = {
    SHOPID => {:type => ::Thrift::Types::STRING, :name => 'shopId'},
    PRODUCTID => {:type => ::Thrift::Types::STRING, :name => 'productId'},
    RECIPIENTMID => {:type => ::Thrift::Types::STRING, :name => 'recipientMid'},
    PRICE => {:type => ::Thrift::Types::STRUCT, :name => 'price', :class => ::PriceStruct},
    ENABLELINEPOINTAUTOEXCHANGE => {:type => ::Thrift::Types::BOOL, :name => 'enableLinePointAutoExchange'},
    LOCALE => {:type => ::Thrift::Types::STRUCT, :name => 'locale', :class => ::LocaleStruct},
    PRESENTATTRIBUTES => {:type => ::Thrift::Types::MAP, :name => 'presentAttributes', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class AuthQrcodeStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  QRCODE = 1
  VERIFIER = 2
  CALLBACKURL = 3

  FIELDS = {
    QRCODE => {:type => ::Thrift::Types::STRING, :name => 'qrcode'},
    VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'},
    CALLBACKURL => {:type => ::Thrift::Types::STRING, :name => 'callbackUrl'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SessionDataStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  SESSIONID = 1
  METHOD = 2
  CALLBACK = 3
  NORMALIZEDPHONE = 4
  COUNTRYCODE = 5
  NATIONALSIGNIFICANTNUMBER = 6
  AVAILABLEVERIFICATIONMETHODS = 7

  FIELDS = {
    SESSIONID => {:type => ::Thrift::Types::STRING, :name => 'sessionId'},
    METHOD => {:type => ::Thrift::Types::I32, :name => 'method', :enum_class => ::MethodEnum},
    CALLBACK => {:type => ::Thrift::Types::STRING, :name => 'callback'},
    NORMALIZEDPHONE => {:type => ::Thrift::Types::STRING, :name => 'normalizedPhone'},
    COUNTRYCODE => {:type => ::Thrift::Types::STRING, :name => 'countryCode'},
    NATIONALSIGNIFICANTNUMBER => {:type => ::Thrift::Types::STRING, :name => 'nationalSignificantNumber'},
    AVAILABLEVERIFICATIONMETHODS => {:type => ::Thrift::Types::LIST, :name => 'availableVerificationMethods', :element => {:type => ::Thrift::Types::I32, :enum_class => ::MethodEnum}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @method.nil? || ::MethodEnum::VALID_VALUES.include?(@method)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field method!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class LoginRequestStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  TYPE = 1
  IDENTITYPROVIDER = 2
  IDENTIFIER = 3
  PASSWORD = 4
  KEEPLOGGEDIN = 5
  ACCESSLOCATION = 6
  SYSTEMNAME = 7
  CERTIFICATE = 8
  VERIFIER = 9
  SECRET = 10
  E2EEVERSION = 11

  FIELDS = {
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type'},
    IDENTITYPROVIDER => {:type => ::Thrift::Types::I32, :name => 'identityProvider'},
    IDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identifier'},
    PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'},
    KEEPLOGGEDIN => {:type => ::Thrift::Types::BOOL, :name => 'keepLoggedIn'},
    ACCESSLOCATION => {:type => ::Thrift::Types::STRING, :name => 'accessLocation'},
    SYSTEMNAME => {:type => ::Thrift::Types::STRING, :name => 'systemName'},
    CERTIFICATE => {:type => ::Thrift::Types::STRING, :name => 'certificate'},
    VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'},
    SECRET => {:type => ::Thrift::Types::STRING, :name => 'secret'},
    E2EEVERSION => {:type => ::Thrift::Types::I32, :name => 'e2eeVersion'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class LoginResultStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  AUTHTOKEN = 1
  CERTIFICATE = 2
  VERIFIER = 3
  PINCODE = 4
  TYPE = 5
  LASTPRIMARYBINDTIME = 6
  DISPLAYMESSAGE = 7
  SESSIONFORSMSCONFIRM = 8

  FIELDS = {
    AUTHTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authToken'},
    CERTIFICATE => {:type => ::Thrift::Types::STRING, :name => 'certificate'},
    VERIFIER => {:type => ::Thrift::Types::STRING, :name => 'verifier'},
    PINCODE => {:type => ::Thrift::Types::STRING, :name => 'pinCode'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::ResultTypeEnum},
    LASTPRIMARYBINDTIME => {:type => ::Thrift::Types::I64, :name => 'lastPrimaryBindTime'},
    DISPLAYMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'displayMessage'},
    SESSIONFORSMSCONFIRM => {:type => ::Thrift::Types::STRUCT, :name => 'sessionForSMSConfirm', :class => ::SessionDataStruct}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::ResultTypeEnum::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class PurchaseOrderResponseStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ORDERID = 1
  ATTRIBUTES = 11
  BILLINGCONFIRMURL = 12

  FIELDS = {
    ORDERID => {:type => ::Thrift::Types::STRING, :name => 'orderId'},
    ATTRIBUTES => {:type => ::Thrift::Types::MAP, :name => 'attributes', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
    BILLINGCONFIRMURL => {:type => ::Thrift::Types::STRING, :name => 'billingConfirmUrl'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ImageTextPropertyStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  STATUS = 1
  PLAINTEXT = 2
  NAMETEXTMAXCHARACTERCOUNT = 3
  ENCRYPTEDTEXT = 4

  FIELDS = {
    STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::StatusEnum},
    PLAINTEXT => {:type => ::Thrift::Types::STRING, :name => 'plainText'},
    NAMETEXTMAXCHARACTERCOUNT => {:type => ::Thrift::Types::I32, :name => 'nameTextMaxCharacterCount'},
    ENCRYPTEDTEXT => {:type => ::Thrift::Types::STRING, :name => 'encryptedText'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @status.nil? || ::StatusEnum::VALID_VALUES.include?(@status)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class StickerPropertyStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  HASANIMATION = 1
  HASSOUND = 2
  HASPOPUP = 3
  STICKERRESOURCETYPE = 4
  STICKEROPTIONS = 5
  COMPACTSTICKEROPTIONS = 6
  STICKERHASH = 7
  STICKERIDS = 9
  NAMETEXTPROPERTY = 10
  AVAILABLEFORPHOTOEDIT = 11

  FIELDS = {
    HASANIMATION => {:type => ::Thrift::Types::BOOL, :name => 'hasAnimation'},
    HASSOUND => {:type => ::Thrift::Types::BOOL, :name => 'hasSound'},
    HASPOPUP => {:type => ::Thrift::Types::BOOL, :name => 'hasPopup'},
    STICKERRESOURCETYPE => {:type => ::Thrift::Types::I32, :name => 'stickerResourceType', :enum_class => ::StickerResourceEnum},
    STICKEROPTIONS => {:type => ::Thrift::Types::STRING, :name => 'stickerOptions'},
    COMPACTSTICKEROPTIONS => {:type => ::Thrift::Types::I32, :name => 'compactStickerOptions'},
    STICKERHASH => {:type => ::Thrift::Types::STRING, :name => 'stickerHash'},
    STICKERIDS => {:type => ::Thrift::Types::LIST, :name => 'stickerIds', :element => {:type => ::Thrift::Types::STRING}},
    NAMETEXTPROPERTY => {:type => ::Thrift::Types::STRUCT, :name => 'nameTextProperty', :class => ::ImageTextPropertyStruct},
    AVAILABLEFORPHOTOEDIT => {:type => ::Thrift::Types::BOOL, :name => 'availableForPhotoEdit'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @stickerResourceType.nil? || ::StickerResourceEnum::VALID_VALUES.include?(@stickerResourceType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field stickerResourceType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ThemePropertyStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  THUMBNAILURL = 1
  THEMERESOURCETYPE = 2

  FIELDS = {
    THUMBNAILURL => {:type => ::Thrift::Types::STRING, :name => 'thumbnailUrl'},
    THEMERESOURCETYPE => {:type => ::Thrift::Types::I32, :name => 'themeResourceType', :enum_class => ::ThemeResourceTypeEnum}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @themeResourceType.nil? || ::ThemeResourceTypeEnum::VALID_VALUES.include?(@themeResourceType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field themeResourceType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class SticonPropertyStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  STICONIDS = 1
  AVAILABLEFORPHOTOEDIT = 2

  FIELDS = {
    STICONIDS => {:type => ::Thrift::Types::LIST, :name => 'sticonIds', :element => {:type => ::Thrift::Types::STRING}},
    AVAILABLEFORPHOTOEDIT => {:type => ::Thrift::Types::BOOL, :name => 'availableForPhotoEdit'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class PropertyStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  STICKERPROPERTY = 1
  THEMEPROPERTY = 2
  STICONPROPERTY = 3

  FIELDS = {
    STICKERPROPERTY => {:type => ::Thrift::Types::STRUCT, :name => 'stickerProperty', :class => ::StickerPropertyStruct},
    THEMEPROPERTY => {:type => ::Thrift::Types::STRUCT, :name => 'themeProperty', :class => ::ThemePropertyStruct},
    STICONPROPERTY => {:type => ::Thrift::Types::STRUCT, :name => 'sticonProperty', :class => ::SticonPropertyStruct}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class ProductSearchSummaryStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  TYPE = 2
  NAME = 3
  AUTHOR = 4
  PROMOTIONINFO = 5
  VERSION = 6
  NEWFLAG = 7
  PRICETIER = 8
  PRICEINLINECOIN = 9
  PROPERTY = 10
  SUBTYPE = 11
  ONSALE = 12
  AVAILABLEFORPRESENT = 13
  AVAILABLEFORPURCHASE = 14
  VALIDDAYS = 15
  AUTHORID = 16
  BARGAINFLAG = 17
  COPYRIGHT = 18
  AVAILABILITY = 19

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::ProductTypeEnum},
    NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
    AUTHOR => {:type => ::Thrift::Types::STRING, :name => 'author'},
    PROMOTIONINFO => {:type => ::Thrift::Types::STRUCT, :name => 'promotionInfo', :class => ::PromotionInfoStruct},
    VERSION => {:type => ::Thrift::Types::I64, :name => 'version'},
    NEWFLAG => {:type => ::Thrift::Types::BOOL, :name => 'newFlag'},
    PRICETIER => {:type => ::Thrift::Types::I32, :name => 'priceTier'},
    PRICEINLINECOIN => {:type => ::Thrift::Types::STRING, :name => 'priceInLineCoin'},
    PROPERTY => {:type => ::Thrift::Types::STRUCT, :name => 'property', :class => ::PropertyStruct},
    SUBTYPE => {:type => ::Thrift::Types::I32, :name => 'subType', :enum_class => ::SubTypeEnum},
    ONSALE => {:type => ::Thrift::Types::BOOL, :name => 'onSale'},
    AVAILABLEFORPRESENT => {:type => ::Thrift::Types::BOOL, :name => 'availableForPresent'},
    AVAILABLEFORPURCHASE => {:type => ::Thrift::Types::BOOL, :name => 'availableForPurchase'},
    VALIDDAYS => {:type => ::Thrift::Types::I32, :name => 'validDays'},
    AUTHORID => {:type => ::Thrift::Types::STRING, :name => 'authorId'},
    BARGAINFLAG => {:type => ::Thrift::Types::BOOL, :name => 'bargainFlag'},
    COPYRIGHT => {:type => ::Thrift::Types::STRING, :name => 'copyright'},
    AVAILABILITY => {:type => ::Thrift::Types::I32, :name => 'availability', :enum_class => ::AvailabilityEnum}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @type.nil? || ::ProductTypeEnum::VALID_VALUES.include?(@type)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
    end
    unless @subType.nil? || ::SubTypeEnum::VALID_VALUES.include?(@subType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field subType!')
    end
    unless @availability.nil? || ::AvailabilityEnum::VALID_VALUES.include?(@availability)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field availability!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ShowcaseRequestStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRODUCTTYPE = 1
  SHOWCASETYPE = 2
  SUBTYPE = 3
  CONTINUATIONTOKEN = 4
  LIMIT = 5

  FIELDS = {
    PRODUCTTYPE => {:type => ::Thrift::Types::I32, :name => 'productType', :enum_class => ::ProductTypeEnum},
    SHOWCASETYPE => {:type => ::Thrift::Types::I32, :name => 'showcaseType', :enum_class => ::ShowcaseTypeEnum},
    SUBTYPE => {:type => ::Thrift::Types::I32, :name => 'subType', :enum_class => ::SubTypeEnum},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'},
    LIMIT => {:type => ::Thrift::Types::I32, :name => 'limit'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @productType.nil? || ::ProductTypeEnum::VALID_VALUES.include?(@productType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field productType!')
    end
    unless @showcaseType.nil? || ::ShowcaseTypeEnum::VALID_VALUES.include?(@showcaseType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field showcaseType!')
    end
    unless @subType.nil? || ::SubTypeEnum::VALID_VALUES.include?(@subType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field subType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ShowcaseV3Response
  include ::Thrift::Struct, ::Thrift::Struct_Union
  PRODUCTLIST = 1
  CONTINUATIONTOKEN = 2
  TOTALSIZE = 3
  SHOWCASETYPE = 4
  PRODUCTTYPE = 5
  SUBTYPE = 6

  FIELDS = {
    PRODUCTLIST => {:type => ::Thrift::Types::LIST, :name => 'productList', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ProductSearchSummaryStruct}},
    CONTINUATIONTOKEN => {:type => ::Thrift::Types::STRING, :name => 'continuationToken'},
    TOTALSIZE => {:type => ::Thrift::Types::I64, :name => 'totalSize'},
    SHOWCASETYPE => {:type => ::Thrift::Types::I32, :name => 'showcaseType', :enum_class => ::ShowcaseTypeEnum},
    PRODUCTTYPE => {:type => ::Thrift::Types::I32, :name => 'productType', :enum_class => ::ProductTypeEnum},
    SUBTYPE => {:type => ::Thrift::Types::I32, :name => 'subType', :enum_class => ::SubTypeEnum}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @showcaseType.nil? || ::ShowcaseTypeEnum::VALID_VALUES.include?(@showcaseType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field showcaseType!')
    end
    unless @productType.nil? || ::ProductTypeEnum::VALID_VALUES.include?(@productType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field productType!')
    end
    unless @subType.nil? || ::SubTypeEnum::VALID_VALUES.include?(@subType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field subType!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class TicketStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  ID = 1
  EXPIRATIONTIME = 10
  MAXUSECOUNT = 21

  FIELDS = {
    ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
    EXPIRATIONTIME => {:type => ::Thrift::Types::I64, :name => 'expirationTime'},
    MAXUSECOUNT => {:type => ::Thrift::Types::I32, :name => 'maxUseCount'}
  }

  def struct_fields; FIELDS; end

  def validate
  end

  ::Thrift::Struct.generate_accessors self
end

class SettingsStruct
  include ::Thrift::Struct, ::Thrift::Struct_Union
  NOTIFICATIONENABLE = 10
  NOTIFICATIONMUTEEXPIRATION = 11
  NOTIFICATIONNEWMESSAGE = 12
  NOTIFICATIONGROUPINVITATION = 13
  NOTIFICATIONSHOWMESSAGE = 14
  NOTIFICATIONINCOMINGCALL = 15
  NOTIFICATIONSOUNDMESSAGE = 16
  NOTIFICATIONSOUNDGROUP = 17
  NOTIFICATIONDISABLEDWITHSUB = 18
  PRIVACYSYNCCONTACTS = 20
  PRIVACYSEARCHBYPHONENUMBER = 21
  PRIVACYSEARCHBYUSERID = 22
  PRIVACYSEARCHBYEMAIL = 23
  PRIVACYALLOWSECONDARYDEVICELOGIN = 24
  PRIVACYPROFILEIMAGEPOSTTOMYHOME = 25
  PRIVACYRECEIVEMESSAGESFROMNOTFRIEND = 26
  PRIVACYAGREEUSELINECOINTOPAIDCALL = 27
  PRIVACYAGREEUSEPAIDCALL = 28
  PRIVACYALLOWFRIENDREQUEST = 29
  CONTACTMYTICKET = 30
  IDENTITYPROVIDER = 40
  IDENTITYIDENTIFIER = 41
  SNSACCOUNTS = 42
  PHONEREGISTRATION = 43
  EMAILCONFIRMATIONSTATUS = 44
  ACCOUNTMIGRATIONPINCODETYPE = 45
  ENFORCEDINPUTACCOUNTMIGRATIONPINCODE = 46
  SECURITYCENTERSETTINGSTYPE = 47
  ALLOWUNREGISTRATIONSECONDARYDEVICE = 48
  PREFERENCELOCALE = 50
  CUSTOMMODES = 60
  E2EEENABLE = 61
  HITOKOTOBACKUPREQUESTED = 62
  PRIVACYPROFILEMUSICPOSTTOMYHOME = 63
  PRIVACYALLOWNEARBY = 65
  AGREEMENTNEARBYTIME = 66
  AGREEMENTSQUARETIME = 67
  NOTIFICATIONMENTION = 68
  BOTUSEAGREEMENTACCEPTEDAT = 69
  AGREEMENTSHAKEFUNCTION = 70
  AGREEMENTMOBILECONTACTNAME = 71
  NOTIFICATIONTHUMBNAIL = 72
  AGREEMENTSOUNDTOTEXT = 73
  PRIVACYPOLICYVERSION = 74
  AGREEMENTADBYWEBACCESS = 75
  AGREEMENTPHONENUMBERMATCHING = 76
  AGREEMENTCOMMUNICATIONINFO = 77
  PRIVACYSHAREPERSONALINFOTOFRIENDS = 78
  AGREEMENTTHINGSWIRELESSCOMMUNICATION = 79
  AGREEMENTGDPR = 80
  PRIVACYSTATUSMESSAGEHISTORY = 81
  AGREEMENTPROVIDELOCATION = 82
  AGREEMENTBEACON = 83
  PRIVACYALLOWPROFILEHISTORY = 85
  AGREEMENTCONTENTSSUGGEST = 86
  AGREEMENTCONTENTSSUGGESTDATACOLLECTION = 87
  PRIVACYAGERESULT = 88
  PRIVACYAGERESULTRECEIVED = 89

  FIELDS = {
    NOTIFICATIONENABLE => {:type => ::Thrift::Types::BOOL, :name => 'notificationEnable'},
    NOTIFICATIONMUTEEXPIRATION => {:type => ::Thrift::Types::I64, :name => 'notificationMuteExpiration'},
    NOTIFICATIONNEWMESSAGE => {:type => ::Thrift::Types::BOOL, :name => 'notificationNewMessage'},
    NOTIFICATIONGROUPINVITATION => {:type => ::Thrift::Types::BOOL, :name => 'notificationGroupInvitation'},
    NOTIFICATIONSHOWMESSAGE => {:type => ::Thrift::Types::BOOL, :name => 'notificationShowMessage'},
    NOTIFICATIONINCOMINGCALL => {:type => ::Thrift::Types::BOOL, :name => 'notificationIncomingCall'},
    NOTIFICATIONSOUNDMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'notificationSoundMessage'},
    NOTIFICATIONSOUNDGROUP => {:type => ::Thrift::Types::STRING, :name => 'notificationSoundGroup'},
    NOTIFICATIONDISABLEDWITHSUB => {:type => ::Thrift::Types::BOOL, :name => 'notificationDisabledWithSub'},
    PRIVACYSYNCCONTACTS => {:type => ::Thrift::Types::BOOL, :name => 'privacySyncContacts'},
    PRIVACYSEARCHBYPHONENUMBER => {:type => ::Thrift::Types::BOOL, :name => 'privacySearchByPhoneNumber'},
    PRIVACYSEARCHBYUSERID => {:type => ::Thrift::Types::BOOL, :name => 'privacySearchByUserid'},
    PRIVACYSEARCHBYEMAIL => {:type => ::Thrift::Types::BOOL, :name => 'privacySearchByEmail'},
    PRIVACYALLOWSECONDARYDEVICELOGIN => {:type => ::Thrift::Types::BOOL, :name => 'privacyAllowSecondaryDeviceLogin'},
    PRIVACYPROFILEIMAGEPOSTTOMYHOME => {:type => ::Thrift::Types::BOOL, :name => 'privacyProfileImagePostToMyhome'},
    PRIVACYRECEIVEMESSAGESFROMNOTFRIEND => {:type => ::Thrift::Types::BOOL, :name => 'privacyReceiveMessagesFromNotFriend'},
    PRIVACYAGREEUSELINECOINTOPAIDCALL => {:type => ::Thrift::Types::BOOL, :name => 'privacyAgreeUseLineCoinToPaidCall'},
    PRIVACYAGREEUSEPAIDCALL => {:type => ::Thrift::Types::BOOL, :name => 'privacyAgreeUsePaidCall'},
    PRIVACYALLOWFRIENDREQUEST => {:type => ::Thrift::Types::BOOL, :name => 'privacyAllowFriendRequest'},
    CONTACTMYTICKET => {:type => ::Thrift::Types::STRING, :name => 'contactMyTicket'},
    IDENTITYPROVIDER => {:type => ::Thrift::Types::I32, :name => 'identityProvider', :enum_class => ::IdentityProviderEnum},
    IDENTITYIDENTIFIER => {:type => ::Thrift::Types::STRING, :name => 'identityIdentifier'},
    SNSACCOUNTS => {:type => ::Thrift::Types::MAP, :name => 'snsAccounts', :key => {:type => ::Thrift::Types::I32, :enum_class => ::SnsIdTypeEnum}, :value => {:type => ::Thrift::Types::STRING}},
    PHONEREGISTRATION => {:type => ::Thrift::Types::BOOL, :name => 'phoneRegistration'},
    EMAILCONFIRMATIONSTATUS => {:type => ::Thrift::Types::I32, :name => 'emailConfirmationStatus', :enum_class => ::EmailConfirmationStatusEnum},
    ACCOUNTMIGRATIONPINCODETYPE => {:type => ::Thrift::Types::I32, :name => 'accountMigrationPincodeType', :enum_class => ::AccountMigrationPincodeTypeEnum},
    ENFORCEDINPUTACCOUNTMIGRATIONPINCODE => {:type => ::Thrift::Types::BOOL, :name => 'enforcedInputAccountMigrationPincode'},
    SECURITYCENTERSETTINGSTYPE => {:type => ::Thrift::Types::I32, :name => 'securityCenterSettingsType', :enum_class => ::SecurityCenterSettingsTypeEnum},
    ALLOWUNREGISTRATIONSECONDARYDEVICE => {:type => ::Thrift::Types::BOOL, :name => 'allowUnregistrationSecondaryDevice'},
    PREFERENCELOCALE => {:type => ::Thrift::Types::STRING, :name => 'preferenceLocale'},
    CUSTOMMODES => {:type => ::Thrift::Types::MAP, :name => 'customModes', :key => {:type => ::Thrift::Types::I32, :enum_class => ::CustomModesEnum}, :value => {:type => ::Thrift::Types::STRING}},
    E2EEENABLE => {:type => ::Thrift::Types::BOOL, :name => 'e2eeEnable'},
    HITOKOTOBACKUPREQUESTED => {:type => ::Thrift::Types::BOOL, :name => 'hitokotoBackupRequested'},
    PRIVACYPROFILEMUSICPOSTTOMYHOME => {:type => ::Thrift::Types::BOOL, :name => 'privacyProfileMusicPostToMyhome'},
    PRIVACYALLOWNEARBY => {:type => ::Thrift::Types::BOOL, :name => 'privacyAllowNearby'},
    AGREEMENTNEARBYTIME => {:type => ::Thrift::Types::I64, :name => 'agreementNearbyTime'},
    AGREEMENTSQUARETIME => {:type => ::Thrift::Types::I64, :name => 'agreementSquareTime'},
    NOTIFICATIONMENTION => {:type => ::Thrift::Types::BOOL, :name => 'notificationMention'},
    BOTUSEAGREEMENTACCEPTEDAT => {:type => ::Thrift::Types::I64, :name => 'botUseAgreementAcceptedAt'},
    AGREEMENTSHAKEFUNCTION => {:type => ::Thrift::Types::I64, :name => 'agreementShakeFunction'},
    AGREEMENTMOBILECONTACTNAME => {:type => ::Thrift::Types::I64, :name => 'agreementMobileContactName'},
    NOTIFICATIONTHUMBNAIL => {:type => ::Thrift::Types::BOOL, :name => 'notificationThumbnail'},
    AGREEMENTSOUNDTOTEXT => {:type => ::Thrift::Types::I64, :name => 'agreementSoundToText'},
    PRIVACYPOLICYVERSION => {:type => ::Thrift::Types::STRING, :name => 'privacyPolicyVersion'},
    AGREEMENTADBYWEBACCESS => {:type => ::Thrift::Types::I64, :name => 'agreementAdByWebAccess'},
    AGREEMENTPHONENUMBERMATCHING => {:type => ::Thrift::Types::I64, :name => 'agreementPhoneNumberMatching'},
    AGREEMENTCOMMUNICATIONINFO => {:type => ::Thrift::Types::I64, :name => 'agreementCommunicationInfo'},
    PRIVACYSHAREPERSONALINFOTOFRIENDS => {:type => ::Thrift::Types::I32, :name => 'privacySharePersonalInfoToFriends', :enum_class => ::SharePersonalInfoToFriendsEnum},
    AGREEMENTTHINGSWIRELESSCOMMUNICATION => {:type => ::Thrift::Types::I64, :name => 'agreementThingsWirelessCommunication'},
    AGREEMENTGDPR => {:type => ::Thrift::Types::I64, :name => 'agreementGdpr'},
    PRIVACYSTATUSMESSAGEHISTORY => {:type => ::Thrift::Types::I32, :name => 'privacyStatusMessageHistory', :enum_class => ::StatusMessageHistoryEnum},
    AGREEMENTPROVIDELOCATION => {:type => ::Thrift::Types::I64, :name => 'agreementProvideLocation'},
    AGREEMENTBEACON => {:type => ::Thrift::Types::I64, :name => 'agreementBeacon'},
    PRIVACYALLOWPROFILEHISTORY => {:type => ::Thrift::Types::I32, :name => 'privacyAllowProfileHistory', :enum_class => ::AllowProfileHistoryEnum},
    AGREEMENTCONTENTSSUGGEST => {:type => ::Thrift::Types::I64, :name => 'agreementContentsSuggest'},
    AGREEMENTCONTENTSSUGGESTDATACOLLECTION => {:type => ::Thrift::Types::I64, :name => 'agreementContentsSuggestDataCollection'},
    PRIVACYAGERESULT => {:type => ::Thrift::Types::I32, :name => 'privacyAgeResult', :enum_class => ::PrivacyAgeResultEnum},
    PRIVACYAGERESULTRECEIVED => {:type => ::Thrift::Types::BOOL, :name => 'privacyAgeResultReceived'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @identityProvider.nil? || ::IdentityProviderEnum::VALID_VALUES.include?(@identityProvider)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field identityProvider!')
    end
    unless @emailConfirmationStatus.nil? || ::EmailConfirmationStatusEnum::VALID_VALUES.include?(@emailConfirmationStatus)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field emailConfirmationStatus!')
    end
    unless @accountMigrationPincodeType.nil? || ::AccountMigrationPincodeTypeEnum::VALID_VALUES.include?(@accountMigrationPincodeType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field accountMigrationPincodeType!')
    end
    unless @securityCenterSettingsType.nil? || ::SecurityCenterSettingsTypeEnum::VALID_VALUES.include?(@securityCenterSettingsType)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field securityCenterSettingsType!')
    end
    unless @privacySharePersonalInfoToFriends.nil? || ::SharePersonalInfoToFriendsEnum::VALID_VALUES.include?(@privacySharePersonalInfoToFriends)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field privacySharePersonalInfoToFriends!')
    end
    unless @privacyStatusMessageHistory.nil? || ::StatusMessageHistoryEnum::VALID_VALUES.include?(@privacyStatusMessageHistory)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field privacyStatusMessageHistory!')
    end
    unless @privacyAllowProfileHistory.nil? || ::AllowProfileHistoryEnum::VALID_VALUES.include?(@privacyAllowProfileHistory)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field privacyAllowProfileHistory!')
    end
    unless @privacyAgeResult.nil? || ::PrivacyAgeResultEnum::VALID_VALUES.include?(@privacyAgeResult)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field privacyAgeResult!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class AuthException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CODE = 1
  ALERTMESSAGE = 2
  WEBAUTHDETAILS = 11

  FIELDS = {
    CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::AuthEnum},
    ALERTMESSAGE => {:type => ::Thrift::Types::STRING, :name => 'alertMessage'},
    WEBAUTHDETAILS => {:type => ::Thrift::Types::STRUCT, :name => 'webAuthDetails', :class => ::WebAuthStuct}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @code.nil? || ::AuthEnum::VALID_VALUES.include?(@code)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ChannelException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CODE = 1
  REASON = 2
  PARAMETERMAP = 3

  FIELDS = {
    CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::ChannelEnum},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason'},
    PARAMETERMAP => {:type => ::Thrift::Types::MAP, :name => 'parameterMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @code.nil? || ::ChannelEnum::VALID_VALUES.include?(@code)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class TalkException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CODE = 1
  REASON = 2
  PARAMETERMAP = 11

  FIELDS = {
    CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::TalkEnum},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason'},
    PARAMETERMAP => {:type => ::Thrift::Types::MAP, :name => 'parameterMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @code.nil? || ::TalkEnum::VALID_VALUES.include?(@code)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class LiffException < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CODE = 1
  MESSAGE = 2

  FIELDS = {
    CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::LiffEnum},
    MESSAGE => {:type => ::Thrift::Types::STRING, :name => 'message'}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @code.nil? || ::LiffEnum::VALID_VALUES.include?(@code)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

class ShopExecption < ::Thrift::Exception
  include ::Thrift::Struct, ::Thrift::Struct_Union
  CODE = 1
  REASON = 2
  PARAMETERMAP = 3

  FIELDS = {
    CODE => {:type => ::Thrift::Types::I32, :name => 'code', :enum_class => ::ShopEnum},
    REASON => {:type => ::Thrift::Types::STRING, :name => 'reason'},
    PARAMETERMAP => {:type => ::Thrift::Types::MAP, :name => 'parameterMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
  }

  def struct_fields; FIELDS; end

  def validate
    unless @code.nil? || ::ShopEnum::VALID_VALUES.include?(@code)
      raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field code!')
    end
  end

  ::Thrift::Struct.generate_accessors self
end

