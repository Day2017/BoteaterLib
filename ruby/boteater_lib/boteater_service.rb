#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'boteater_lib_types'

module BoteaterService
  class Client
    include ::Thrift::Client

    def sendMessage(seq, message)
      send_sendMessage(seq, message)
      return recv_sendMessage()
    end

    def send_sendMessage(seq, message)
      send_message('sendMessage', SendMessage_args, :seq => seq, :message => message)
    end

    def recv_sendMessage()
      result = receive_message(SendMessage_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sendMessage failed: unknown result')
    end

    def sendChatChecked(seq, chatMid, lastMessageId)
      send_sendChatChecked(seq, chatMid, lastMessageId)
      recv_sendChatChecked()
    end

    def send_sendChatChecked(seq, chatMid, lastMessageId)
      send_message('sendChatChecked', SendChatChecked_args, :seq => seq, :chatMid => chatMid, :lastMessageId => lastMessageId)
    end

    def recv_sendChatChecked()
      result = receive_message(SendChatChecked_result)
      raise result.e unless result.e.nil?
      return
    end

    def removeAllMessages(seq, lastMessageId)
      send_removeAllMessages(seq, lastMessageId)
      recv_removeAllMessages()
    end

    def send_removeAllMessages(seq, lastMessageId)
      send_message('removeAllMessages', RemoveAllMessages_args, :seq => seq, :lastMessageId => lastMessageId)
    end

    def recv_removeAllMessages()
      result = receive_message(RemoveAllMessages_result)
      raise result.e unless result.e.nil?
      return
    end

    def sendChatRemoved(seq, chatMid, lastMessageId, sessionId)
      send_sendChatRemoved(seq, chatMid, lastMessageId, sessionId)
      recv_sendChatRemoved()
    end

    def send_sendChatRemoved(seq, chatMid, lastMessageId, sessionId)
      send_message('sendChatRemoved', SendChatRemoved_args, :seq => seq, :chatMid => chatMid, :lastMessageId => lastMessageId, :sessionId => sessionId)
    end

    def recv_sendChatRemoved()
      result = receive_message(SendChatRemoved_result)
      raise result.e unless result.e.nil?
      return
    end

    def getGroupWithoutMembers(groupId)
      send_getGroupWithoutMembers(groupId)
      return recv_getGroupWithoutMembers()
    end

    def send_getGroupWithoutMembers(groupId)
      send_message('getGroupWithoutMembers', GetGroupWithoutMembers_args, :groupId => groupId)
    end

    def recv_getGroupWithoutMembers()
      result = receive_message(GetGroupWithoutMembers_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupWithoutMembers failed: unknown result')
    end

    def getGroupsV2(groupId)
      send_getGroupsV2(groupId)
      return recv_getGroupsV2()
    end

    def send_getGroupsV2(groupId)
      send_message('getGroupsV2', GetGroupsV2_args, :groupId => groupId)
    end

    def recv_getGroupsV2()
      result = receive_message(GetGroupsV2_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupsV2 failed: unknown result')
    end

    def getGroup(groupId)
      send_getGroup(groupId)
      return recv_getGroup()
    end

    def send_getGroup(groupId)
      send_message('getGroup', GetGroup_args, :groupId => groupId)
    end

    def recv_getGroup()
      result = receive_message(GetGroup_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroup failed: unknown result')
    end

    def createGroupV2(seq, name, contactIds)
      send_createGroupV2(seq, name, contactIds)
      return recv_createGroupV2()
    end

    def send_createGroupV2(seq, name, contactIds)
      send_message('createGroupV2', CreateGroupV2_args, :seq => seq, :name => name, :contactIds => contactIds)
    end

    def recv_createGroupV2()
      result = receive_message(CreateGroupV2_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createGroupV2 failed: unknown result')
    end

    def getCompactGroup(groupId)
      send_getCompactGroup(groupId)
      return recv_getCompactGroup()
    end

    def send_getCompactGroup(groupId)
      send_message('getCompactGroup', GetCompactGroup_args, :groupId => groupId)
    end

    def recv_getCompactGroup()
      result = receive_message(GetCompactGroup_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getCompactGroup failed: unknown result')
    end

    def getGroupIdsInvited()
      send_getGroupIdsInvited()
      return recv_getGroupIdsInvited()
    end

    def send_getGroupIdsInvited()
      send_message('getGroupIdsInvited', GetGroupIdsInvited_args)
    end

    def recv_getGroupIdsInvited()
      result = receive_message(GetGroupIdsInvited_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupIdsInvited failed: unknown result')
    end

    def getGroupIdsJoined()
      send_getGroupIdsJoined()
      return recv_getGroupIdsJoined()
    end

    def send_getGroupIdsJoined()
      send_message('getGroupIdsJoined', GetGroupIdsJoined_args)
    end

    def recv_getGroupIdsJoined()
      result = receive_message(GetGroupIdsJoined_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupIdsJoined failed: unknown result')
    end

    def getGroupCall(chatMid)
      send_getGroupCall(chatMid)
      return recv_getGroupCall()
    end

    def send_getGroupCall(chatMid)
      send_message('getGroupCall', GetGroupCall_args, :chatMid => chatMid)
    end

    def recv_getGroupCall()
      result = receive_message(GetGroupCall_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getGroupCall failed: unknown result')
    end

    def acquireGroupCallRoute(chatMid, mediaType, isInitialHost, capabilities)
      send_acquireGroupCallRoute(chatMid, mediaType, isInitialHost, capabilities)
      return recv_acquireGroupCallRoute()
    end

    def send_acquireGroupCallRoute(chatMid, mediaType, isInitialHost, capabilities)
      send_message('acquireGroupCallRoute', AcquireGroupCallRoute_args, :chatMid => chatMid, :mediaType => mediaType, :isInitialHost => isInitialHost, :capabilities => capabilities)
    end

    def recv_acquireGroupCallRoute()
      result = receive_message(AcquireGroupCallRoute_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'acquireGroupCallRoute failed: unknown result')
    end

    def inviteIntoGroup(reqSeq, groupId, contactIds)
      send_inviteIntoGroup(reqSeq, groupId, contactIds)
      recv_inviteIntoGroup()
    end

    def send_inviteIntoGroup(reqSeq, groupId, contactIds)
      send_message('inviteIntoGroup', InviteIntoGroup_args, :reqSeq => reqSeq, :groupId => groupId, :contactIds => contactIds)
    end

    def recv_inviteIntoGroup()
      result = receive_message(InviteIntoGroup_result)
      raise result.e unless result.e.nil?
      return
    end

    def acceptGroupInvitationByTicket(reqSeq, groupMid, ticketId)
      send_acceptGroupInvitationByTicket(reqSeq, groupMid, ticketId)
      recv_acceptGroupInvitationByTicket()
    end

    def send_acceptGroupInvitationByTicket(reqSeq, groupMid, ticketId)
      send_message('acceptGroupInvitationByTicket', AcceptGroupInvitationByTicket_args, :reqSeq => reqSeq, :groupMid => groupMid, :ticketId => ticketId)
    end

    def recv_acceptGroupInvitationByTicket()
      result = receive_message(AcceptGroupInvitationByTicket_result)
      raise result.e unless result.e.nil?
      return
    end

    def rejectGroupInvitation(reqSeq, groupId)
      send_rejectGroupInvitation(reqSeq, groupId)
      recv_rejectGroupInvitation()
    end

    def send_rejectGroupInvitation(reqSeq, groupId)
      send_message('rejectGroupInvitation', RejectGroupInvitation_args, :reqSeq => reqSeq, :groupId => groupId)
    end

    def recv_rejectGroupInvitation()
      result = receive_message(RejectGroupInvitation_result)
      raise result.e unless result.e.nil?
      return
    end

    def acceptGroupInvitation(reqSeq, groupId)
      send_acceptGroupInvitation(reqSeq, groupId)
      recv_acceptGroupInvitation()
    end

    def send_acceptGroupInvitation(reqSeq, groupId)
      send_message('acceptGroupInvitation', AcceptGroupInvitation_args, :reqSeq => reqSeq, :groupId => groupId)
    end

    def recv_acceptGroupInvitation()
      result = receive_message(AcceptGroupInvitation_result)
      raise result.e unless result.e.nil?
      return
    end

    def cancelGroupInvitation(reqSeq, groupId, contactIds)
      send_cancelGroupInvitation(reqSeq, groupId, contactIds)
      recv_cancelGroupInvitation()
    end

    def send_cancelGroupInvitation(reqSeq, groupId, contactIds)
      send_message('cancelGroupInvitation', CancelGroupInvitation_args, :reqSeq => reqSeq, :groupId => groupId, :contactIds => contactIds)
    end

    def recv_cancelGroupInvitation()
      result = receive_message(CancelGroupInvitation_result)
      raise result.e unless result.e.nil?
      return
    end

    def findGroupByTicket(ticketId)
      send_findGroupByTicket(ticketId)
      return recv_findGroupByTicket()
    end

    def send_findGroupByTicket(ticketId)
      send_message('findGroupByTicket', FindGroupByTicket_args, :ticketId => ticketId)
    end

    def recv_findGroupByTicket()
      result = receive_message(FindGroupByTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findGroupByTicket failed: unknown result')
    end

    def reissueGroupTicket(groupMid)
      send_reissueGroupTicket(groupMid)
      return recv_reissueGroupTicket()
    end

    def send_reissueGroupTicket(groupMid)
      send_message('reissueGroupTicket', ReissueGroupTicket_args, :groupMid => groupMid)
    end

    def recv_reissueGroupTicket()
      result = receive_message(ReissueGroupTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reissueGroupTicket failed: unknown result')
    end

    def kickoutFromGroup(reqSeq, groupId, contactIds)
      send_kickoutFromGroup(reqSeq, groupId, contactIds)
      recv_kickoutFromGroup()
    end

    def send_kickoutFromGroup(reqSeq, groupId, contactIds)
      send_message('kickoutFromGroup', KickoutFromGroup_args, :reqSeq => reqSeq, :groupId => groupId, :contactIds => contactIds)
    end

    def recv_kickoutFromGroup()
      result = receive_message(KickoutFromGroup_result)
      raise result.e unless result.e.nil?
      return
    end

    def inviteIntoGroupCall(chatMid, memberMids, mediaType)
      send_inviteIntoGroupCall(chatMid, memberMids, mediaType)
      recv_inviteIntoGroupCall()
    end

    def send_inviteIntoGroupCall(chatMid, memberMids, mediaType)
      send_message('inviteIntoGroupCall', InviteIntoGroupCall_args, :chatMid => chatMid, :memberMids => memberMids, :mediaType => mediaType)
    end

    def recv_inviteIntoGroupCall()
      result = receive_message(InviteIntoGroupCall_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateGroupPreferenceAttribute(reqSeq, groupMid, updatedAttrs)
      send_updateGroupPreferenceAttribute(reqSeq, groupMid, updatedAttrs)
      recv_updateGroupPreferenceAttribute()
    end

    def send_updateGroupPreferenceAttribute(reqSeq, groupMid, updatedAttrs)
      send_message('updateGroupPreferenceAttribute', UpdateGroupPreferenceAttribute_args, :reqSeq => reqSeq, :groupMid => groupMid, :updatedAttrs => updatedAttrs)
    end

    def recv_updateGroupPreferenceAttribute()
      result = receive_message(UpdateGroupPreferenceAttribute_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateGroup(reqSeq, group)
      send_updateGroup(reqSeq, group)
      recv_updateGroup()
    end

    def send_updateGroup(reqSeq, group)
      send_message('updateGroup', UpdateGroup_args, :reqSeq => reqSeq, :group => group)
    end

    def recv_updateGroup()
      result = receive_message(UpdateGroup_result)
      raise result.e unless result.e.nil?
      return
    end

    def leaveGroup(reqSeq, groupId)
      send_leaveGroup(reqSeq, groupId)
      recv_leaveGroup()
    end

    def send_leaveGroup(reqSeq, groupId)
      send_message('leaveGroup', LeaveGroup_args, :reqSeq => reqSeq, :groupId => groupId)
    end

    def recv_leaveGroup()
      result = receive_message(LeaveGroup_result)
      raise result.e unless result.e.nil?
      return
    end

    def findAndAddContactsByMid(reqSeq, mid, type, reference)
      send_findAndAddContactsByMid(reqSeq, mid, type, reference)
      return recv_findAndAddContactsByMid()
    end

    def send_findAndAddContactsByMid(reqSeq, mid, type, reference)
      send_message('findAndAddContactsByMid', FindAndAddContactsByMid_args, :reqSeq => reqSeq, :mid => mid, :type => type, :reference => reference)
    end

    def recv_findAndAddContactsByMid()
      result = receive_message(FindAndAddContactsByMid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findAndAddContactsByMid failed: unknown result')
    end

    def findAndAddContactsByUserid(reqSeq, searchId)
      send_findAndAddContactsByUserid(reqSeq, searchId)
      return recv_findAndAddContactsByUserid()
    end

    def send_findAndAddContactsByUserid(reqSeq, searchId)
      send_message('findAndAddContactsByUserid', FindAndAddContactsByUserid_args, :reqSeq => reqSeq, :searchId => searchId)
    end

    def recv_findAndAddContactsByUserid()
      result = receive_message(FindAndAddContactsByUserid_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findAndAddContactsByUserid failed: unknown result')
    end

    def findAndAddContactsByPhone(reqSeq, phones)
      send_findAndAddContactsByPhone(reqSeq, phones)
      return recv_findAndAddContactsByPhone()
    end

    def send_findAndAddContactsByPhone(reqSeq, phones)
      send_message('findAndAddContactsByPhone', FindAndAddContactsByPhone_args, :reqSeq => reqSeq, :phones => phones)
    end

    def recv_findAndAddContactsByPhone()
      result = receive_message(FindAndAddContactsByPhone_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findAndAddContactsByPhone failed: unknown result')
    end

    def getContact(id)
      send_getContact(id)
      return recv_getContact()
    end

    def send_getContact(id)
      send_message('getContact', GetContact_args, :id => id)
    end

    def recv_getContact()
      result = receive_message(GetContact_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getContact failed: unknown result')
    end

    def updateContactSetting(reqSeq, mid, flag, value)
      send_updateContactSetting(reqSeq, mid, flag, value)
      recv_updateContactSetting()
    end

    def send_updateContactSetting(reqSeq, mid, flag, value)
      send_message('updateContactSetting', UpdateContactSetting_args, :reqSeq => reqSeq, :mid => mid, :flag => flag, :value => value)
    end

    def recv_updateContactSetting()
      result = receive_message(UpdateContactSetting_result)
      raise result.e unless result.e.nil?
      return
    end

    def getAllContactIds()
      send_getAllContactIds()
      return recv_getAllContactIds()
    end

    def send_getAllContactIds()
      send_message('getAllContactIds', GetAllContactIds_args)
    end

    def recv_getAllContactIds()
      result = receive_message(GetAllContactIds_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllContactIds failed: unknown result')
    end

    def getProfile()
      send_getProfile()
      return recv_getProfile()
    end

    def send_getProfile()
      send_message('getProfile', GetProfile_args)
    end

    def recv_getProfile()
      result = receive_message(GetProfile_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProfile failed: unknown result')
    end

    def updateProfileAttribute(reqSeq, attr, value)
      send_updateProfileAttribute(reqSeq, attr, value)
      recv_updateProfileAttribute()
    end

    def send_updateProfileAttribute(reqSeq, attr, value)
      send_message('updateProfileAttribute', UpdateProfileAttribute_args, :reqSeq => reqSeq, :attr => attr, :value => value)
    end

    def recv_updateProfileAttribute()
      result = receive_message(UpdateProfileAttribute_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateProfile(reqSeq, profile)
      send_updateProfile(reqSeq, profile)
      recv_updateProfile()
    end

    def send_updateProfile(reqSeq, profile)
      send_message('updateProfile', UpdateProfile_args, :reqSeq => reqSeq, :profile => profile)
    end

    def recv_updateProfile()
      result = receive_message(UpdateProfile_result)
      raise result.e unless result.e.nil?
      return
    end

    def getBlockedContactIds()
      send_getBlockedContactIds()
      return recv_getBlockedContactIds()
    end

    def send_getBlockedContactIds()
      send_message('getBlockedContactIds', GetBlockedContactIds_args)
    end

    def recv_getBlockedContactIds()
      result = receive_message(GetBlockedContactIds_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBlockedContactIds failed: unknown result')
    end

    def unblockContact(reqSeq, id, reference)
      send_unblockContact(reqSeq, id, reference)
      recv_unblockContact()
    end

    def send_unblockContact(reqSeq, id, reference)
      send_message('unblockContact', UnblockContact_args, :reqSeq => reqSeq, :id => id, :reference => reference)
    end

    def recv_unblockContact()
      result = receive_message(UnblockContact_result)
      raise result.e unless result.e.nil?
      return
    end

    def blockContact(reqSeq, id)
      send_blockContact(reqSeq, id)
      recv_blockContact()
    end

    def send_blockContact(reqSeq, id)
      send_message('blockContact', BlockContact_args, :reqSeq => reqSeq, :id => id)
    end

    def recv_blockContact()
      result = receive_message(BlockContact_result)
      raise result.e unless result.e.nil?
      return
    end

    def getSettings()
      send_getSettings()
      return recv_getSettings()
    end

    def send_getSettings()
      send_message('getSettings', GetSettings_args)
    end

    def recv_getSettings()
      result = receive_message(GetSettings_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSettings failed: unknown result')
    end

    def fetchOps(localRev, count, globalRev, individualRev)
      send_fetchOps(localRev, count, globalRev, individualRev)
      return recv_fetchOps()
    end

    def send_fetchOps(localRev, count, globalRev, individualRev)
      send_message('fetchOps', FetchOps_args, :localRev => localRev, :count => count, :globalRev => globalRev, :individualRev => individualRev)
    end

    def recv_fetchOps()
      result = receive_message(FetchOps_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'fetchOps failed: unknown result')
    end

    def getLastOpRevision()
      send_getLastOpRevision()
      return recv_getLastOpRevision()
    end

    def send_getLastOpRevision()
      send_message('getLastOpRevision', GetLastOpRevision_args)
    end

    def recv_getLastOpRevision()
      result = receive_message(GetLastOpRevision_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getLastOpRevision failed: unknown result')
    end

    def issueChannelToken(channelId)
      send_issueChannelToken(channelId)
      return recv_issueChannelToken()
    end

    def send_issueChannelToken(channelId)
      send_message('issueChannelToken', IssueChannelToken_args, :channelId => channelId)
    end

    def recv_issueChannelToken()
      result = receive_message(IssueChannelToken_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'issueChannelToken failed: unknown result')
    end

    def getChannelInfo(channelId, locale)
      send_getChannelInfo(channelId, locale)
      return recv_getChannelInfo()
    end

    def send_getChannelInfo(channelId, locale)
      send_message('getChannelInfo', GetChannelInfo_args, :channelId => channelId, :locale => locale)
    end

    def recv_getChannelInfo()
      result = receive_message(GetChannelInfo_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getChannelInfo failed: unknown result')
    end

    def issueLiffView(request)
      send_issueLiffView(request)
      return recv_issueLiffView()
    end

    def send_issueLiffView(request)
      send_message('issueLiffView', IssueLiffView_args, :request => request)
    end

    def recv_issueLiffView()
      result = receive_message(IssueLiffView_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'issueLiffView failed: unknown result')
    end

    def getFriendRequests(direction, lastSeenSeqId)
      send_getFriendRequests(direction, lastSeenSeqId)
      return recv_getFriendRequests()
    end

    def send_getFriendRequests(direction, lastSeenSeqId)
      send_message('getFriendRequests', GetFriendRequests_args, :direction => direction, :lastSeenSeqId => lastSeenSeqId)
    end

    def recv_getFriendRequests()
      result = receive_message(GetFriendRequests_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getFriendRequests failed: unknown result')
    end

    def removeFriendRequest(direction, midOrEMid)
      send_removeFriendRequest(direction, midOrEMid)
      recv_removeFriendRequest()
    end

    def send_removeFriendRequest(direction, midOrEMid)
      send_message('removeFriendRequest', RemoveFriendRequest_args, :direction => direction, :midOrEMid => midOrEMid)
    end

    def recv_removeFriendRequest()
      result = receive_message(RemoveFriendRequest_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateSettingsAttribute(reqSeq, attr, value)
      send_updateSettingsAttribute(reqSeq, attr, value)
      recv_updateSettingsAttribute()
    end

    def send_updateSettingsAttribute(reqSeq, attr, value)
      send_message('updateSettingsAttribute', UpdateSettingsAttribute_args, :reqSeq => reqSeq, :attr => attr, :value => value)
    end

    def recv_updateSettingsAttribute()
      result = receive_message(UpdateSettingsAttribute_result)
      raise result.e unless result.e.nil?
      return
    end

    def updateSettingsAttributes2(reqSeq, attributesToUpdate, settings)
      send_updateSettingsAttributes2(reqSeq, attributesToUpdate, settings)
      return recv_updateSettingsAttributes2()
    end

    def send_updateSettingsAttributes2(reqSeq, attributesToUpdate, settings)
      send_message('updateSettingsAttributes2', UpdateSettingsAttributes2_args, :reqSeq => reqSeq, :attributesToUpdate => attributesToUpdate, :settings => settings)
    end

    def recv_updateSettingsAttributes2()
      result = receive_message(UpdateSettingsAttributes2_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateSettingsAttributes2 failed: unknown result')
    end

    def getSettingsAttributes2(attributesToRetrieve)
      send_getSettingsAttributes2(attributesToRetrieve)
      return recv_getSettingsAttributes2()
    end

    def send_getSettingsAttributes2(attributesToRetrieve)
      send_message('getSettingsAttributes2', GetSettingsAttributes2_args, :attributesToRetrieve => attributesToRetrieve)
    end

    def recv_getSettingsAttributes2()
      result = receive_message(GetSettingsAttributes2_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSettingsAttributes2 failed: unknown result')
    end

    def getSettingsAttributes(attrBitset)
      send_getSettingsAttributes(attrBitset)
      return recv_getSettingsAttributes()
    end

    def send_getSettingsAttributes(attrBitset)
      send_message('getSettingsAttributes', GetSettingsAttributes_args, :attrBitset => attrBitset)
    end

    def recv_getSettingsAttributes()
      result = receive_message(GetSettingsAttributes_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getSettingsAttributes failed: unknown result')
    end

    def getProductV2(request)
      send_getProductV2(request)
      return recv_getProductV2()
    end

    def send_getProductV2(request)
      send_message('getProductV2', GetProductV2_args, :request => request)
    end

    def recv_getProductV2()
      result = receive_message(GetProductV2_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProductV2 failed: unknown result')
    end

    def getProduct(shopId, productId, locale)
      send_getProduct(shopId, productId, locale)
      return recv_getProduct()
    end

    def send_getProduct(shopId, productId, locale)
      send_message('getProduct', GetProduct_args, :shopId => shopId, :productId => productId, :locale => locale)
    end

    def recv_getProduct()
      result = receive_message(GetProduct_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getProduct failed: unknown result')
    end

    def placePurchaseOrderForFreeProduct(purchaseOrder)
      send_placePurchaseOrderForFreeProduct(purchaseOrder)
      return recv_placePurchaseOrderForFreeProduct()
    end

    def send_placePurchaseOrderForFreeProduct(purchaseOrder)
      send_message('placePurchaseOrderForFreeProduct', PlacePurchaseOrderForFreeProduct_args, :purchaseOrder => purchaseOrder)
    end

    def recv_placePurchaseOrderForFreeProduct()
      result = receive_message(PlacePurchaseOrderForFreeProduct_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'placePurchaseOrderForFreeProduct failed: unknown result')
    end

    def placePurchaseOrderWithLineCoin(purchaseOrder)
      send_placePurchaseOrderWithLineCoin(purchaseOrder)
      return recv_placePurchaseOrderWithLineCoin()
    end

    def send_placePurchaseOrderWithLineCoin(purchaseOrder)
      send_message('placePurchaseOrderWithLineCoin', PlacePurchaseOrderWithLineCoin_args, :purchaseOrder => purchaseOrder)
    end

    def recv_placePurchaseOrderWithLineCoin()
      result = receive_message(PlacePurchaseOrderWithLineCoin_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'placePurchaseOrderWithLineCoin failed: unknown result')
    end

    def getShowcaseV3(showcaseRequest)
      send_getShowcaseV3(showcaseRequest)
      return recv_getShowcaseV3()
    end

    def send_getShowcaseV3(showcaseRequest)
      send_message('getShowcaseV3', GetShowcaseV3_args, :showcaseRequest => showcaseRequest)
    end

    def recv_getShowcaseV3()
      result = receive_message(GetShowcaseV3_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getShowcaseV3 failed: unknown result')
    end

    def getAuthQrcode(keepLoggedIn, systemName, returnCallbackUrl)
      send_getAuthQrcode(keepLoggedIn, systemName, returnCallbackUrl)
      return recv_getAuthQrcode()
    end

    def send_getAuthQrcode(keepLoggedIn, systemName, returnCallbackUrl)
      send_message('getAuthQrcode', GetAuthQrcode_args, :keepLoggedIn => keepLoggedIn, :systemName => systemName, :returnCallbackUrl => returnCallbackUrl)
    end

    def recv_getAuthQrcode()
      result = receive_message(GetAuthQrcode_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAuthQrcode failed: unknown result')
    end

    def loginZ(loginRequest)
      send_loginZ(loginRequest)
      return recv_loginZ()
    end

    def send_loginZ(loginRequest)
      send_message('loginZ', LoginZ_args, :loginRequest => loginRequest)
    end

    def recv_loginZ()
      result = receive_message(LoginZ_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'loginZ failed: unknown result')
    end

    def acquireEncryptedAccessToken(featureType)
      send_acquireEncryptedAccessToken(featureType)
      return recv_acquireEncryptedAccessToken()
    end

    def send_acquireEncryptedAccessToken(featureType)
      send_message('acquireEncryptedAccessToken', AcquireEncryptedAccessToken_args, :featureType => featureType)
    end

    def recv_acquireEncryptedAccessToken()
      result = receive_message(AcquireEncryptedAccessToken_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'acquireEncryptedAccessToken failed: unknown result')
    end

    def generateUserTicket(expirationTime, maxUseCount)
      send_generateUserTicket(expirationTime, maxUseCount)
      return recv_generateUserTicket()
    end

    def send_generateUserTicket(expirationTime, maxUseCount)
      send_message('generateUserTicket', GenerateUserTicket_args, :expirationTime => expirationTime, :maxUseCount => maxUseCount)
    end

    def recv_generateUserTicket()
      result = receive_message(GenerateUserTicket_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'generateUserTicket failed: unknown result')
    end

    def unsendMessage(seq, messageId)
      send_unsendMessage(seq, messageId)
      recv_unsendMessage()
    end

    def send_unsendMessage(seq, messageId)
      send_message('unsendMessage', UnsendMessage_args, :seq => seq, :messageId => messageId)
    end

    def recv_unsendMessage()
      result = receive_message(UnsendMessage_result)
      raise result.e unless result.e.nil?
      return
    end

    def report(syncOpRevision, category, report)
      send_report(syncOpRevision, category, report)
      recv_report()
    end

    def send_report(syncOpRevision, category, report)
      send_message('report', Report_args, :syncOpRevision => syncOpRevision, :category => category, :report => report)
    end

    def recv_report()
      result = receive_message(Report_result)
      raise result.e unless result.e.nil?
      return
    end

    def createRoomV2(reqSeq, contactIds)
      send_createRoomV2(reqSeq, contactIds)
      return recv_createRoomV2()
    end

    def send_createRoomV2(reqSeq, contactIds)
      send_message('createRoomV2', CreateRoomV2_args, :reqSeq => reqSeq, :contactIds => contactIds)
    end

    def recv_createRoomV2()
      result = receive_message(CreateRoomV2_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'createRoomV2 failed: unknown result')
    end

    def getRoomsV2(roomIds)
      send_getRoomsV2(roomIds)
      return recv_getRoomsV2()
    end

    def send_getRoomsV2(roomIds)
      send_message('getRoomsV2', GetRoomsV2_args, :roomIds => roomIds)
    end

    def recv_getRoomsV2()
      result = receive_message(GetRoomsV2_result)
      return result.success unless result.success.nil?
      raise result.e unless result.e.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getRoomsV2 failed: unknown result')
    end

    def inviteIntoRoom(reqSeq, roomId, contactIds)
      send_inviteIntoRoom(reqSeq, roomId, contactIds)
      recv_inviteIntoRoom()
    end

    def send_inviteIntoRoom(reqSeq, roomId, contactIds)
      send_message('inviteIntoRoom', InviteIntoRoom_args, :reqSeq => reqSeq, :roomId => roomId, :contactIds => contactIds)
    end

    def recv_inviteIntoRoom()
      result = receive_message(InviteIntoRoom_result)
      raise result.e unless result.e.nil?
      return
    end

    def leaveRoom(reqSeq, roomId)
      send_leaveRoom(reqSeq, roomId)
      recv_leaveRoom()
    end

    def send_leaveRoom(reqSeq, roomId)
      send_message('leaveRoom', LeaveRoom_args, :reqSeq => reqSeq, :roomId => roomId)
    end

    def recv_leaveRoom()
      result = receive_message(LeaveRoom_result)
      raise result.e unless result.e.nil?
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_sendMessage(seqid, iprot, oprot)
      args = read_args(iprot, SendMessage_args)
      result = SendMessage_result.new()
      begin
        result.success = @handler.sendMessage(args.seq, args.message)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendMessage', seqid)
    end

    def process_sendChatChecked(seqid, iprot, oprot)
      args = read_args(iprot, SendChatChecked_args)
      result = SendChatChecked_result.new()
      begin
        @handler.sendChatChecked(args.seq, args.chatMid, args.lastMessageId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendChatChecked', seqid)
    end

    def process_removeAllMessages(seqid, iprot, oprot)
      args = read_args(iprot, RemoveAllMessages_args)
      result = RemoveAllMessages_result.new()
      begin
        @handler.removeAllMessages(args.seq, args.lastMessageId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'removeAllMessages', seqid)
    end

    def process_sendChatRemoved(seqid, iprot, oprot)
      args = read_args(iprot, SendChatRemoved_args)
      result = SendChatRemoved_result.new()
      begin
        @handler.sendChatRemoved(args.seq, args.chatMid, args.lastMessageId, args.sessionId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'sendChatRemoved', seqid)
    end

    def process_getGroupWithoutMembers(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupWithoutMembers_args)
      result = GetGroupWithoutMembers_result.new()
      begin
        result.success = @handler.getGroupWithoutMembers(args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupWithoutMembers', seqid)
    end

    def process_getGroupsV2(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupsV2_args)
      result = GetGroupsV2_result.new()
      begin
        result.success = @handler.getGroupsV2(args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupsV2', seqid)
    end

    def process_getGroup(seqid, iprot, oprot)
      args = read_args(iprot, GetGroup_args)
      result = GetGroup_result.new()
      begin
        result.success = @handler.getGroup(args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroup', seqid)
    end

    def process_createGroupV2(seqid, iprot, oprot)
      args = read_args(iprot, CreateGroupV2_args)
      result = CreateGroupV2_result.new()
      begin
        result.success = @handler.createGroupV2(args.seq, args.name, args.contactIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'createGroupV2', seqid)
    end

    def process_getCompactGroup(seqid, iprot, oprot)
      args = read_args(iprot, GetCompactGroup_args)
      result = GetCompactGroup_result.new()
      begin
        result.success = @handler.getCompactGroup(args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getCompactGroup', seqid)
    end

    def process_getGroupIdsInvited(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupIdsInvited_args)
      result = GetGroupIdsInvited_result.new()
      begin
        result.success = @handler.getGroupIdsInvited()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupIdsInvited', seqid)
    end

    def process_getGroupIdsJoined(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupIdsJoined_args)
      result = GetGroupIdsJoined_result.new()
      begin
        result.success = @handler.getGroupIdsJoined()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupIdsJoined', seqid)
    end

    def process_getGroupCall(seqid, iprot, oprot)
      args = read_args(iprot, GetGroupCall_args)
      result = GetGroupCall_result.new()
      begin
        result.success = @handler.getGroupCall(args.chatMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getGroupCall', seqid)
    end

    def process_acquireGroupCallRoute(seqid, iprot, oprot)
      args = read_args(iprot, AcquireGroupCallRoute_args)
      result = AcquireGroupCallRoute_result.new()
      begin
        result.success = @handler.acquireGroupCallRoute(args.chatMid, args.mediaType, args.isInitialHost, args.capabilities)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'acquireGroupCallRoute', seqid)
    end

    def process_inviteIntoGroup(seqid, iprot, oprot)
      args = read_args(iprot, InviteIntoGroup_args)
      result = InviteIntoGroup_result.new()
      begin
        @handler.inviteIntoGroup(args.reqSeq, args.groupId, args.contactIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'inviteIntoGroup', seqid)
    end

    def process_acceptGroupInvitationByTicket(seqid, iprot, oprot)
      args = read_args(iprot, AcceptGroupInvitationByTicket_args)
      result = AcceptGroupInvitationByTicket_result.new()
      begin
        @handler.acceptGroupInvitationByTicket(args.reqSeq, args.groupMid, args.ticketId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'acceptGroupInvitationByTicket', seqid)
    end

    def process_rejectGroupInvitation(seqid, iprot, oprot)
      args = read_args(iprot, RejectGroupInvitation_args)
      result = RejectGroupInvitation_result.new()
      begin
        @handler.rejectGroupInvitation(args.reqSeq, args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'rejectGroupInvitation', seqid)
    end

    def process_acceptGroupInvitation(seqid, iprot, oprot)
      args = read_args(iprot, AcceptGroupInvitation_args)
      result = AcceptGroupInvitation_result.new()
      begin
        @handler.acceptGroupInvitation(args.reqSeq, args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'acceptGroupInvitation', seqid)
    end

    def process_cancelGroupInvitation(seqid, iprot, oprot)
      args = read_args(iprot, CancelGroupInvitation_args)
      result = CancelGroupInvitation_result.new()
      begin
        @handler.cancelGroupInvitation(args.reqSeq, args.groupId, args.contactIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'cancelGroupInvitation', seqid)
    end

    def process_findGroupByTicket(seqid, iprot, oprot)
      args = read_args(iprot, FindGroupByTicket_args)
      result = FindGroupByTicket_result.new()
      begin
        result.success = @handler.findGroupByTicket(args.ticketId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findGroupByTicket', seqid)
    end

    def process_reissueGroupTicket(seqid, iprot, oprot)
      args = read_args(iprot, ReissueGroupTicket_args)
      result = ReissueGroupTicket_result.new()
      begin
        result.success = @handler.reissueGroupTicket(args.groupMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'reissueGroupTicket', seqid)
    end

    def process_kickoutFromGroup(seqid, iprot, oprot)
      args = read_args(iprot, KickoutFromGroup_args)
      result = KickoutFromGroup_result.new()
      begin
        @handler.kickoutFromGroup(args.reqSeq, args.groupId, args.contactIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'kickoutFromGroup', seqid)
    end

    def process_inviteIntoGroupCall(seqid, iprot, oprot)
      args = read_args(iprot, InviteIntoGroupCall_args)
      result = InviteIntoGroupCall_result.new()
      begin
        @handler.inviteIntoGroupCall(args.chatMid, args.memberMids, args.mediaType)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'inviteIntoGroupCall', seqid)
    end

    def process_updateGroupPreferenceAttribute(seqid, iprot, oprot)
      args = read_args(iprot, UpdateGroupPreferenceAttribute_args)
      result = UpdateGroupPreferenceAttribute_result.new()
      begin
        @handler.updateGroupPreferenceAttribute(args.reqSeq, args.groupMid, args.updatedAttrs)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateGroupPreferenceAttribute', seqid)
    end

    def process_updateGroup(seqid, iprot, oprot)
      args = read_args(iprot, UpdateGroup_args)
      result = UpdateGroup_result.new()
      begin
        @handler.updateGroup(args.reqSeq, args.group)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateGroup', seqid)
    end

    def process_leaveGroup(seqid, iprot, oprot)
      args = read_args(iprot, LeaveGroup_args)
      result = LeaveGroup_result.new()
      begin
        @handler.leaveGroup(args.reqSeq, args.groupId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'leaveGroup', seqid)
    end

    def process_findAndAddContactsByMid(seqid, iprot, oprot)
      args = read_args(iprot, FindAndAddContactsByMid_args)
      result = FindAndAddContactsByMid_result.new()
      begin
        result.success = @handler.findAndAddContactsByMid(args.reqSeq, args.mid, args.type, args.reference)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findAndAddContactsByMid', seqid)
    end

    def process_findAndAddContactsByUserid(seqid, iprot, oprot)
      args = read_args(iprot, FindAndAddContactsByUserid_args)
      result = FindAndAddContactsByUserid_result.new()
      begin
        result.success = @handler.findAndAddContactsByUserid(args.reqSeq, args.searchId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findAndAddContactsByUserid', seqid)
    end

    def process_findAndAddContactsByPhone(seqid, iprot, oprot)
      args = read_args(iprot, FindAndAddContactsByPhone_args)
      result = FindAndAddContactsByPhone_result.new()
      begin
        result.success = @handler.findAndAddContactsByPhone(args.reqSeq, args.phones)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'findAndAddContactsByPhone', seqid)
    end

    def process_getContact(seqid, iprot, oprot)
      args = read_args(iprot, GetContact_args)
      result = GetContact_result.new()
      begin
        result.success = @handler.getContact(args.id)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getContact', seqid)
    end

    def process_updateContactSetting(seqid, iprot, oprot)
      args = read_args(iprot, UpdateContactSetting_args)
      result = UpdateContactSetting_result.new()
      begin
        @handler.updateContactSetting(args.reqSeq, args.mid, args.flag, args.value)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateContactSetting', seqid)
    end

    def process_getAllContactIds(seqid, iprot, oprot)
      args = read_args(iprot, GetAllContactIds_args)
      result = GetAllContactIds_result.new()
      begin
        result.success = @handler.getAllContactIds()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getAllContactIds', seqid)
    end

    def process_getProfile(seqid, iprot, oprot)
      args = read_args(iprot, GetProfile_args)
      result = GetProfile_result.new()
      begin
        result.success = @handler.getProfile()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getProfile', seqid)
    end

    def process_updateProfileAttribute(seqid, iprot, oprot)
      args = read_args(iprot, UpdateProfileAttribute_args)
      result = UpdateProfileAttribute_result.new()
      begin
        @handler.updateProfileAttribute(args.reqSeq, args.attr, args.value)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateProfileAttribute', seqid)
    end

    def process_updateProfile(seqid, iprot, oprot)
      args = read_args(iprot, UpdateProfile_args)
      result = UpdateProfile_result.new()
      begin
        @handler.updateProfile(args.reqSeq, args.profile)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateProfile', seqid)
    end

    def process_getBlockedContactIds(seqid, iprot, oprot)
      args = read_args(iprot, GetBlockedContactIds_args)
      result = GetBlockedContactIds_result.new()
      begin
        result.success = @handler.getBlockedContactIds()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getBlockedContactIds', seqid)
    end

    def process_unblockContact(seqid, iprot, oprot)
      args = read_args(iprot, UnblockContact_args)
      result = UnblockContact_result.new()
      begin
        @handler.unblockContact(args.reqSeq, args.id, args.reference)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'unblockContact', seqid)
    end

    def process_blockContact(seqid, iprot, oprot)
      args = read_args(iprot, BlockContact_args)
      result = BlockContact_result.new()
      begin
        @handler.blockContact(args.reqSeq, args.id)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'blockContact', seqid)
    end

    def process_getSettings(seqid, iprot, oprot)
      args = read_args(iprot, GetSettings_args)
      result = GetSettings_result.new()
      begin
        result.success = @handler.getSettings()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getSettings', seqid)
    end

    def process_fetchOps(seqid, iprot, oprot)
      args = read_args(iprot, FetchOps_args)
      result = FetchOps_result.new()
      begin
        result.success = @handler.fetchOps(args.localRev, args.count, args.globalRev, args.individualRev)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'fetchOps', seqid)
    end

    def process_getLastOpRevision(seqid, iprot, oprot)
      args = read_args(iprot, GetLastOpRevision_args)
      result = GetLastOpRevision_result.new()
      begin
        result.success = @handler.getLastOpRevision()
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getLastOpRevision', seqid)
    end

    def process_issueChannelToken(seqid, iprot, oprot)
      args = read_args(iprot, IssueChannelToken_args)
      result = IssueChannelToken_result.new()
      begin
        result.success = @handler.issueChannelToken(args.channelId)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'issueChannelToken', seqid)
    end

    def process_getChannelInfo(seqid, iprot, oprot)
      args = read_args(iprot, GetChannelInfo_args)
      result = GetChannelInfo_result.new()
      begin
        result.success = @handler.getChannelInfo(args.channelId, args.locale)
      rescue ::ChannelException => e
        result.e = e
      end
      write_result(result, oprot, 'getChannelInfo', seqid)
    end

    def process_issueLiffView(seqid, iprot, oprot)
      args = read_args(iprot, IssueLiffView_args)
      result = IssueLiffView_result.new()
      begin
        result.success = @handler.issueLiffView(args.request)
      rescue ::LiffException => e
        result.e = e
      end
      write_result(result, oprot, 'issueLiffView', seqid)
    end

    def process_getFriendRequests(seqid, iprot, oprot)
      args = read_args(iprot, GetFriendRequests_args)
      result = GetFriendRequests_result.new()
      begin
        result.success = @handler.getFriendRequests(args.direction, args.lastSeenSeqId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getFriendRequests', seqid)
    end

    def process_removeFriendRequest(seqid, iprot, oprot)
      args = read_args(iprot, RemoveFriendRequest_args)
      result = RemoveFriendRequest_result.new()
      begin
        @handler.removeFriendRequest(args.direction, args.midOrEMid)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'removeFriendRequest', seqid)
    end

    def process_updateSettingsAttribute(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSettingsAttribute_args)
      result = UpdateSettingsAttribute_result.new()
      begin
        @handler.updateSettingsAttribute(args.reqSeq, args.attr, args.value)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateSettingsAttribute', seqid)
    end

    def process_updateSettingsAttributes2(seqid, iprot, oprot)
      args = read_args(iprot, UpdateSettingsAttributes2_args)
      result = UpdateSettingsAttributes2_result.new()
      begin
        result.success = @handler.updateSettingsAttributes2(args.reqSeq, args.attributesToUpdate, args.settings)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'updateSettingsAttributes2', seqid)
    end

    def process_getSettingsAttributes2(seqid, iprot, oprot)
      args = read_args(iprot, GetSettingsAttributes2_args)
      result = GetSettingsAttributes2_result.new()
      begin
        result.success = @handler.getSettingsAttributes2(args.attributesToRetrieve)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getSettingsAttributes2', seqid)
    end

    def process_getSettingsAttributes(seqid, iprot, oprot)
      args = read_args(iprot, GetSettingsAttributes_args)
      result = GetSettingsAttributes_result.new()
      begin
        result.success = @handler.getSettingsAttributes(args.attrBitset)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getSettingsAttributes', seqid)
    end

    def process_getProductV2(seqid, iprot, oprot)
      args = read_args(iprot, GetProductV2_args)
      result = GetProductV2_result.new()
      begin
        result.success = @handler.getProductV2(args.request)
      rescue ::ShopExecption => e
        result.e = e
      end
      write_result(result, oprot, 'getProductV2', seqid)
    end

    def process_getProduct(seqid, iprot, oprot)
      args = read_args(iprot, GetProduct_args)
      result = GetProduct_result.new()
      begin
        result.success = @handler.getProduct(args.shopId, args.productId, args.locale)
      rescue ::ShopExecption => e
        result.e = e
      end
      write_result(result, oprot, 'getProduct', seqid)
    end

    def process_placePurchaseOrderForFreeProduct(seqid, iprot, oprot)
      args = read_args(iprot, PlacePurchaseOrderForFreeProduct_args)
      result = PlacePurchaseOrderForFreeProduct_result.new()
      begin
        result.success = @handler.placePurchaseOrderForFreeProduct(args.purchaseOrder)
      rescue ::ShopExecption => e
        result.e = e
      end
      write_result(result, oprot, 'placePurchaseOrderForFreeProduct', seqid)
    end

    def process_placePurchaseOrderWithLineCoin(seqid, iprot, oprot)
      args = read_args(iprot, PlacePurchaseOrderWithLineCoin_args)
      result = PlacePurchaseOrderWithLineCoin_result.new()
      begin
        result.success = @handler.placePurchaseOrderWithLineCoin(args.purchaseOrder)
      rescue ::ShopExecption => e
        result.e = e
      end
      write_result(result, oprot, 'placePurchaseOrderWithLineCoin', seqid)
    end

    def process_getShowcaseV3(seqid, iprot, oprot)
      args = read_args(iprot, GetShowcaseV3_args)
      result = GetShowcaseV3_result.new()
      begin
        result.success = @handler.getShowcaseV3(args.showcaseRequest)
      rescue ::ShopExecption => e
        result.e = e
      end
      write_result(result, oprot, 'getShowcaseV3', seqid)
    end

    def process_getAuthQrcode(seqid, iprot, oprot)
      args = read_args(iprot, GetAuthQrcode_args)
      result = GetAuthQrcode_result.new()
      begin
        result.success = @handler.getAuthQrcode(args.keepLoggedIn, args.systemName, args.returnCallbackUrl)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getAuthQrcode', seqid)
    end

    def process_loginZ(seqid, iprot, oprot)
      args = read_args(iprot, LoginZ_args)
      result = LoginZ_result.new()
      begin
        result.success = @handler.loginZ(args.loginRequest)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'loginZ', seqid)
    end

    def process_acquireEncryptedAccessToken(seqid, iprot, oprot)
      args = read_args(iprot, AcquireEncryptedAccessToken_args)
      result = AcquireEncryptedAccessToken_result.new()
      begin
        result.success = @handler.acquireEncryptedAccessToken(args.featureType)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'acquireEncryptedAccessToken', seqid)
    end

    def process_generateUserTicket(seqid, iprot, oprot)
      args = read_args(iprot, GenerateUserTicket_args)
      result = GenerateUserTicket_result.new()
      begin
        result.success = @handler.generateUserTicket(args.expirationTime, args.maxUseCount)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'generateUserTicket', seqid)
    end

    def process_unsendMessage(seqid, iprot, oprot)
      args = read_args(iprot, UnsendMessage_args)
      result = UnsendMessage_result.new()
      begin
        @handler.unsendMessage(args.seq, args.messageId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'unsendMessage', seqid)
    end

    def process_report(seqid, iprot, oprot)
      args = read_args(iprot, Report_args)
      result = Report_result.new()
      begin
        @handler.report(args.syncOpRevision, args.category, args.report)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'report', seqid)
    end

    def process_createRoomV2(seqid, iprot, oprot)
      args = read_args(iprot, CreateRoomV2_args)
      result = CreateRoomV2_result.new()
      begin
        result.success = @handler.createRoomV2(args.reqSeq, args.contactIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'createRoomV2', seqid)
    end

    def process_getRoomsV2(seqid, iprot, oprot)
      args = read_args(iprot, GetRoomsV2_args)
      result = GetRoomsV2_result.new()
      begin
        result.success = @handler.getRoomsV2(args.roomIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'getRoomsV2', seqid)
    end

    def process_inviteIntoRoom(seqid, iprot, oprot)
      args = read_args(iprot, InviteIntoRoom_args)
      result = InviteIntoRoom_result.new()
      begin
        @handler.inviteIntoRoom(args.reqSeq, args.roomId, args.contactIds)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'inviteIntoRoom', seqid)
    end

    def process_leaveRoom(seqid, iprot, oprot)
      args = read_args(iprot, LeaveRoom_args)
      result = LeaveRoom_result.new()
      begin
        @handler.leaveRoom(args.reqSeq, args.roomId)
      rescue ::TalkException => e
        result.e = e
      end
      write_result(result, oprot, 'leaveRoom', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class SendMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    MESSAGE = 2

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      MESSAGE => {:type => ::Thrift::Types::STRUCT, :name => 'message', :class => ::MessageStruct}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::MessageStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendChatChecked_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    CHATMID = 2
    LASTMESSAGEID = 3

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      CHATMID => {:type => ::Thrift::Types::STRING, :name => 'chatMid'},
      LASTMESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'lastMessageId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendChatChecked_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveAllMessages_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    LASTMESSAGEID = 2

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      LASTMESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'lastMessageId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveAllMessages_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendChatRemoved_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    CHATMID = 2
    LASTMESSAGEID = 3
    SESSIONID = 4

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      CHATMID => {:type => ::Thrift::Types::STRING, :name => 'chatMid'},
      LASTMESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'lastMessageId'},
      SESSIONID => {:type => ::Thrift::Types::I64, :name => 'sessionId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SendChatRemoved_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupWithoutMembers_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPID = 2

    FIELDS = {
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupWithoutMembers_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GroupStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupsV2_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPID = 2

    FIELDS = {
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupsV2_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GroupStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroup_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPID = 2

    FIELDS = {
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroup_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GroupStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateGroupV2_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    NAME = 2
    CONTACTIDS = 3

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
      CONTACTIDS => {:type => ::Thrift::Types::LIST, :name => 'contactIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateGroupV2_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GroupStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCompactGroup_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPID = 2

    FIELDS = {
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetCompactGroup_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GroupStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupIdsInvited_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupIdsInvited_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupIdsJoined_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupIdsJoined_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupCall_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHATMID = 2

    FIELDS = {
      CHATMID => {:type => ::Thrift::Types::STRING, :name => 'chatMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetGroupCall_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GroupCallStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquireGroupCallRoute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHATMID = 2
    MEDIATYPE = 3
    ISINITIALHOST = 4
    CAPABILITIES = 5

    FIELDS = {
      CHATMID => {:type => ::Thrift::Types::STRING, :name => 'chatMid'},
      MEDIATYPE => {:type => ::Thrift::Types::I32, :name => 'mediaType', :enum_class => ::GroupCallMediaTypeEnum},
      ISINITIALHOST => {:type => ::Thrift::Types::BOOL, :name => 'isInitialHost'},
      CAPABILITIES => {:type => ::Thrift::Types::LIST, :name => 'capabilities', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @mediaType.nil? || ::GroupCallMediaTypeEnum::VALID_VALUES.include?(@mediaType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field mediaType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquireGroupCallRoute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GroupCallRouteStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteIntoGroup_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPID = 2
    CONTACTIDS = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'},
      CONTACTIDS => {:type => ::Thrift::Types::LIST, :name => 'contactIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteIntoGroup_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcceptGroupInvitationByTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPMID = 2
    TICKETID = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPMID => {:type => ::Thrift::Types::STRING, :name => 'groupMid'},
      TICKETID => {:type => ::Thrift::Types::STRING, :name => 'ticketId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcceptGroupInvitationByTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RejectGroupInvitation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RejectGroupInvitation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcceptGroupInvitation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcceptGroupInvitation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CancelGroupInvitation_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPID = 2
    CONTACTIDS = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'},
      CONTACTIDS => {:type => ::Thrift::Types::LIST, :name => 'contactIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CancelGroupInvitation_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindGroupByTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TICKETID = 1

    FIELDS = {
      TICKETID => {:type => ::Thrift::Types::STRING, :name => 'ticketId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindGroupByTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GroupStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReissueGroupTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    GROUPMID = 1

    FIELDS = {
      GROUPMID => {:type => ::Thrift::Types::STRING, :name => 'groupMid'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ReissueGroupTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class KickoutFromGroup_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPID = 2
    CONTACTIDS = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'},
      CONTACTIDS => {:type => ::Thrift::Types::LIST, :name => 'contactIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class KickoutFromGroup_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteIntoGroupCall_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHATMID = 2
    MEMBERMIDS = 3
    MEDIATYPE = 4

    FIELDS = {
      CHATMID => {:type => ::Thrift::Types::STRING, :name => 'chatMid'},
      MEMBERMIDS => {:type => ::Thrift::Types::LIST, :name => 'memberMids', :element => {:type => ::Thrift::Types::STRING}},
      MEDIATYPE => {:type => ::Thrift::Types::I32, :name => 'mediaType', :enum_class => ::GroupCallMediaTypeEnum}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @mediaType.nil? || ::GroupCallMediaTypeEnum::VALID_VALUES.include?(@mediaType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field mediaType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteIntoGroupCall_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGroupPreferenceAttribute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPMID = 2
    UPDATEDATTRS = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPMID => {:type => ::Thrift::Types::STRING, :name => 'groupMid'},
      UPDATEDATTRS => {:type => ::Thrift::Types::MAP, :name => 'updatedAttrs', :key => {:type => ::Thrift::Types::I32, :enum_class => ::GroupPreferenceAttributeEnum}, :value => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGroupPreferenceAttribute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGroup_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUP = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUP => {:type => ::Thrift::Types::STRUCT, :name => 'group', :class => ::GroupStruct}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateGroup_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LeaveGroup_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    GROUPID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      GROUPID => {:type => ::Thrift::Types::STRING, :name => 'groupId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LeaveGroup_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByMid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    MID = 2
    TYPE = 3
    REFERENCE = 4

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
      TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::ContactTypeEnum},
      REFERENCE => {:type => ::Thrift::Types::STRING, :name => 'reference'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @type.nil? || ::ContactTypeEnum::VALID_VALUES.include?(@type)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByMid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::ContactStruct}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByUserid_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    SEARCHID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      SEARCHID => {:type => ::Thrift::Types::STRING, :name => 'searchId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByUserid_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::ContactStruct}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByPhone_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    PHONES = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      PHONES => {:type => ::Thrift::Types::SET, :name => 'phones', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FindAndAddContactsByPhone_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::ContactStruct}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContact_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 2

    FIELDS = {
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetContact_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ContactStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateContactSetting_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    MID = 2
    FLAG = 3
    VALUE = 4

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      MID => {:type => ::Thrift::Types::STRING, :name => 'mid'},
      FLAG => {:type => ::Thrift::Types::I32, :name => 'flag', :enum_class => ::ContactSettingEnum},
      VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @flag.nil? || ::ContactSettingEnum::VALID_VALUES.include?(@flag)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field flag!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateContactSetting_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllContactIds_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllContactIds_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ProfileStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProfileAttribute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ATTR = 2
    VALUE = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ATTR => {:type => ::Thrift::Types::I32, :name => 'attr', :enum_class => ::ProfileAttributeEnum},
      VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @attr.nil? || ::ProfileAttributeEnum::VALID_VALUES.include?(@attr)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field attr!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProfileAttribute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProfile_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    PROFILE = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      PROFILE => {:type => ::Thrift::Types::STRUCT, :name => 'profile', :class => ::ProfileStruct}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateProfile_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBlockedContactIds_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetBlockedContactIds_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnblockContact_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ID = 2
    REFERENCE = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
      REFERENCE => {:type => ::Thrift::Types::STRING, :name => 'reference'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnblockContact_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BlockContact_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BlockContact_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSettings_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSettings_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SettingsStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchOps_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LOCALREV = 2
    COUNT = 3
    GLOBALREV = 4
    INDIVIDUALREV = 5

    FIELDS = {
      LOCALREV => {:type => ::Thrift::Types::I64, :name => 'localRev'},
      COUNT => {:type => ::Thrift::Types::I32, :name => 'count'},
      GLOBALREV => {:type => ::Thrift::Types::I64, :name => 'globalRev'},
      INDIVIDUALREV => {:type => ::Thrift::Types::I64, :name => 'individualRev'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FetchOps_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::OperationStruct}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLastOpRevision_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLastOpRevision_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueChannelToken_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 1

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueChannelToken_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ChannelTokenStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChannelInfo_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CHANNELID = 2
    LOCALE = 3

    FIELDS = {
      CHANNELID => {:type => ::Thrift::Types::STRING, :name => 'channelId'},
      LOCALE => {:type => ::Thrift::Types::STRING, :name => 'locale'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetChannelInfo_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ChannelInfoStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ChannelException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueLiffView_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 1

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::LiffViewRequestStruct}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class IssueLiffView_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::LiffViewStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::LiffException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFriendRequests_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DIRECTION = 1
    LASTSEENSEQID = 2

    FIELDS = {
      DIRECTION => {:type => ::Thrift::Types::I32, :name => 'direction', :enum_class => ::FriendDirectionEnum},
      LASTSEENSEQID => {:type => ::Thrift::Types::I64, :name => 'lastSeenSeqId'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @direction.nil? || ::FriendDirectionEnum::VALID_VALUES.include?(@direction)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field direction!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetFriendRequests_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::FriendRequestStruct}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveFriendRequest_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DIRECTION = 1
    MIDOREMID = 2

    FIELDS = {
      DIRECTION => {:type => ::Thrift::Types::I32, :name => 'direction', :enum_class => ::FriendDirectionEnum},
      MIDOREMID => {:type => ::Thrift::Types::STRING, :name => 'midOrEMid'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @direction.nil? || ::FriendDirectionEnum::VALID_VALUES.include?(@direction)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field direction!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RemoveFriendRequest_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSettingsAttribute_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ATTR = 2
    VALUE = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ATTR => {:type => ::Thrift::Types::I32, :name => 'attr', :enum_class => ::SettingsAttributeEnum},
      VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @attr.nil? || ::SettingsAttributeEnum::VALID_VALUES.include?(@attr)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field attr!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSettingsAttribute_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSettingsAttributes2_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ATTRIBUTESTOUPDATE = 2
    SETTINGS = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ATTRIBUTESTOUPDATE => {:type => ::Thrift::Types::SET, :name => 'attributesToUpdate', :element => {:type => ::Thrift::Types::STRING}},
      SETTINGS => {:type => ::Thrift::Types::STRUCT, :name => 'settings', :class => ::SettingsStruct}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateSettingsAttributes2_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::SET, :name => 'success', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SettingsAttributes2Enum}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSettingsAttributes2_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ATTRIBUTESTORETRIEVE = 2

    FIELDS = {
      ATTRIBUTESTORETRIEVE => {:type => ::Thrift::Types::SET, :name => 'attributesToRetrieve', :element => {:type => ::Thrift::Types::I32, :enum_class => ::SettingsAttributes2Enum}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSettingsAttributes2_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SettingsStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSettingsAttributes_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ATTRBITSET = 2

    FIELDS = {
      ATTRBITSET => {:type => ::Thrift::Types::I32, :name => 'attrBitset'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetSettingsAttributes_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::SettingsStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProductV2_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQUEST = 2

    FIELDS = {
      REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::GetProductRequestStruct}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProductV2_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetProductStructV2},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ShopExecption}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProduct_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SHOPID = 2
    PRODUCTID = 3
    LOCALE = 4

    FIELDS = {
      SHOPID => {:type => ::Thrift::Types::STRING, :name => 'shopId'},
      PRODUCTID => {:type => ::Thrift::Types::STRING, :name => 'productId'},
      LOCALE => {:type => ::Thrift::Types::STRUCT, :name => 'locale', :class => ::LocaleStruct}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetProduct_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::GetProductStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ShopExecption}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class PlacePurchaseOrderForFreeProduct_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PURCHASEORDER = 2

    FIELDS = {
      PURCHASEORDER => {:type => ::Thrift::Types::STRUCT, :name => 'purchaseOrder', :class => ::PurchaseOrderStruct}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class PlacePurchaseOrderForFreeProduct_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PurchaseOrderResponseStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ShopExecption}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class PlacePurchaseOrderWithLineCoin_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PURCHASEORDER = 2

    FIELDS = {
      PURCHASEORDER => {:type => ::Thrift::Types::STRUCT, :name => 'purchaseOrder', :class => ::PurchaseOrderStruct}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class PlacePurchaseOrderWithLineCoin_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::PurchaseOrderResponseStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ShopExecption}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetShowcaseV3_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SHOWCASEREQUEST = 1

    FIELDS = {
      SHOWCASEREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'showcaseRequest', :class => ::ShowcaseRequestStruct}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetShowcaseV3_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::ShowcaseV3Response},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::ShopExecption}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAuthQrcode_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    KEEPLOGGEDIN = 2
    SYSTEMNAME = 3
    RETURNCALLBACKURL = 4

    FIELDS = {
      KEEPLOGGEDIN => {:type => ::Thrift::Types::BOOL, :name => 'keepLoggedIn'},
      SYSTEMNAME => {:type => ::Thrift::Types::STRING, :name => 'systemName'},
      RETURNCALLBACKURL => {:type => ::Thrift::Types::BOOL, :name => 'returnCallbackUrl'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAuthQrcode_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::AuthQrcodeStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LoginZ_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    LOGINREQUEST = 2

    FIELDS = {
      LOGINREQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'loginRequest', :class => ::LoginRequestStruct}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LoginZ_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::LoginResultStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquireEncryptedAccessToken_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FEATURETYPE = 2

    FIELDS = {
      FEATURETYPE => {:type => ::Thrift::Types::I32, :name => 'featureType', :enum_class => ::FeatureTypeEnum}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @featureType.nil? || ::FeatureTypeEnum::VALID_VALUES.include?(@featureType)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field featureType!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class AcquireEncryptedAccessToken_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GenerateUserTicket_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    EXPIRATIONTIME = 3
    MAXUSECOUNT = 4

    FIELDS = {
      EXPIRATIONTIME => {:type => ::Thrift::Types::I64, :name => 'expirationTime'},
      MAXUSECOUNT => {:type => ::Thrift::Types::I32, :name => 'maxUseCount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GenerateUserTicket_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::TicketStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnsendMessage_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEQ = 1
    MESSAGEID = 2

    FIELDS = {
      SEQ => {:type => ::Thrift::Types::I32, :name => 'seq'},
      MESSAGEID => {:type => ::Thrift::Types::STRING, :name => 'messageId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UnsendMessage_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Report_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SYNCOPREVISION = 2
    CATEGORY = 3
    REPORT = 4

    FIELDS = {
      SYNCOPREVISION => {:type => ::Thrift::Types::I64, :name => 'syncOpRevision'},
      CATEGORY => {:type => ::Thrift::Types::I32, :name => 'category', :enum_class => ::CategoryEnum},
      REPORT => {:type => ::Thrift::Types::STRING, :name => 'report'}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @category.nil? || ::CategoryEnum::VALID_VALUES.include?(@category)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field category!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Report_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateRoomV2_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    CONTACTIDS = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      CONTACTIDS => {:type => ::Thrift::Types::LIST, :name => 'contactIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CreateRoomV2_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::RoomStruct},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRoomsV2_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ROOMIDS = 2

    FIELDS = {
      ROOMIDS => {:type => ::Thrift::Types::LIST, :name => 'roomIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetRoomsV2_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    E = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::RoomStruct}},
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteIntoRoom_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ROOMID = 2
    CONTACTIDS = 3

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ROOMID => {:type => ::Thrift::Types::STRING, :name => 'roomId'},
      CONTACTIDS => {:type => ::Thrift::Types::LIST, :name => 'contactIds', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InviteIntoRoom_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LeaveRoom_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    REQSEQ = 1
    ROOMID = 2

    FIELDS = {
      REQSEQ => {:type => ::Thrift::Types::I32, :name => 'reqSeq'},
      ROOMID => {:type => ::Thrift::Types::STRING, :name => 'roomId'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class LeaveRoom_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    E = 1

    FIELDS = {
      E => {:type => ::Thrift::Types::STRUCT, :name => 'e', :class => ::TalkException}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

