// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package boteater_lib

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type AuthEnum int64
const (
  AuthEnum_INTERNAL_ERROR AuthEnum = 0
  AuthEnum_ILLEGAL_ARGUMENT AuthEnum = 1
  AuthEnum_VERIFICATION_FAILED AuthEnum = 2
  AuthEnum_NOT_FOUND AuthEnum = 3
  AuthEnum_RETRY_LATER AuthEnum = 4
  AuthEnum_HUMAN_VERIFICATION_REQUIRED AuthEnum = 5
  AuthEnum_INVALID_CONTEXT AuthEnum = 100
  AuthEnum_APP_UPGRADE_REQUIRED AuthEnum = 101
)

func (p AuthEnum) String() string {
  switch p {
  case AuthEnum_INTERNAL_ERROR: return "INTERNAL_ERROR"
  case AuthEnum_ILLEGAL_ARGUMENT: return "ILLEGAL_ARGUMENT"
  case AuthEnum_VERIFICATION_FAILED: return "VERIFICATION_FAILED"
  case AuthEnum_NOT_FOUND: return "NOT_FOUND"
  case AuthEnum_RETRY_LATER: return "RETRY_LATER"
  case AuthEnum_HUMAN_VERIFICATION_REQUIRED: return "HUMAN_VERIFICATION_REQUIRED"
  case AuthEnum_INVALID_CONTEXT: return "INVALID_CONTEXT"
  case AuthEnum_APP_UPGRADE_REQUIRED: return "APP_UPGRADE_REQUIRED"
  }
  return "<UNSET>"
}

func AuthEnumFromString(s string) (AuthEnum, error) {
  switch s {
  case "INTERNAL_ERROR": return AuthEnum_INTERNAL_ERROR, nil 
  case "ILLEGAL_ARGUMENT": return AuthEnum_ILLEGAL_ARGUMENT, nil 
  case "VERIFICATION_FAILED": return AuthEnum_VERIFICATION_FAILED, nil 
  case "NOT_FOUND": return AuthEnum_NOT_FOUND, nil 
  case "RETRY_LATER": return AuthEnum_RETRY_LATER, nil 
  case "HUMAN_VERIFICATION_REQUIRED": return AuthEnum_HUMAN_VERIFICATION_REQUIRED, nil 
  case "INVALID_CONTEXT": return AuthEnum_INVALID_CONTEXT, nil 
  case "APP_UPGRADE_REQUIRED": return AuthEnum_APP_UPGRADE_REQUIRED, nil 
  }
  return AuthEnum(0), fmt.Errorf("not a valid AuthEnum string")
}


func AuthEnumPtr(v AuthEnum) *AuthEnum { return &v }

func (p AuthEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AuthEnum) UnmarshalText(text []byte) error {
q, err := AuthEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AuthEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AuthEnum(v)
return nil
}

func (p * AuthEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ShopEnum int64
const (
  ShopEnum_NONE ShopEnum = 1
  ShopEnum_ILLEGAL_ARGUMENT ShopEnum = 16641
  ShopEnum_NOT_FOUND ShopEnum = 16642
  ShopEnum_NOT_AVAILABLE ShopEnum = 16643
  ShopEnum_NOT_PAID_PRODUCT ShopEnum = 16644
  ShopEnum_NOT_FREE_PRODUCT ShopEnum = 16645
  ShopEnum_ALREADY_OWNED ShopEnum = 16646
  ShopEnum_ERROR_WITH_CUSTOM_MESSAGE ShopEnum = 16647
  ShopEnum_NOT_AVAILABLE_TO_RECIPIENT ShopEnum = 16648
  ShopEnum_NOT_AVAILABLE_FOR_CHANNEL_ID ShopEnum = 16649
  ShopEnum_NOT_SALE_FOR_COUNTRY ShopEnum = 16650
  ShopEnum_NOT_SALES_PERIOD ShopEnum = 16651
  ShopEnum_NOT_SALE_FOR_DEVICE ShopEnum = 16652
  ShopEnum_NOT_SALE_FOR_VERSION ShopEnum = 16653
  ShopEnum_ALREADY_EXPIRED ShopEnum = 16654
  ShopEnum_AUTHENTICATION_FAILED ShopEnum = 16897
  ShopEnum_BALANCE_SHORTAGE ShopEnum = 17153
  ShopEnum_INTERNAL_SERVER_ERROR ShopEnum = 20737
  ShopEnum_SERVICE_IN_MAINTENANCE_MODE ShopEnum = 20738
  ShopEnum_SERVICE_UNAVAILABLE ShopEnum = 20739
)

func (p ShopEnum) String() string {
  switch p {
  case ShopEnum_NONE: return "NONE"
  case ShopEnum_ILLEGAL_ARGUMENT: return "ILLEGAL_ARGUMENT"
  case ShopEnum_NOT_FOUND: return "NOT_FOUND"
  case ShopEnum_NOT_AVAILABLE: return "NOT_AVAILABLE"
  case ShopEnum_NOT_PAID_PRODUCT: return "NOT_PAID_PRODUCT"
  case ShopEnum_NOT_FREE_PRODUCT: return "NOT_FREE_PRODUCT"
  case ShopEnum_ALREADY_OWNED: return "ALREADY_OWNED"
  case ShopEnum_ERROR_WITH_CUSTOM_MESSAGE: return "ERROR_WITH_CUSTOM_MESSAGE"
  case ShopEnum_NOT_AVAILABLE_TO_RECIPIENT: return "NOT_AVAILABLE_TO_RECIPIENT"
  case ShopEnum_NOT_AVAILABLE_FOR_CHANNEL_ID: return "NOT_AVAILABLE_FOR_CHANNEL_ID"
  case ShopEnum_NOT_SALE_FOR_COUNTRY: return "NOT_SALE_FOR_COUNTRY"
  case ShopEnum_NOT_SALES_PERIOD: return "NOT_SALES_PERIOD"
  case ShopEnum_NOT_SALE_FOR_DEVICE: return "NOT_SALE_FOR_DEVICE"
  case ShopEnum_NOT_SALE_FOR_VERSION: return "NOT_SALE_FOR_VERSION"
  case ShopEnum_ALREADY_EXPIRED: return "ALREADY_EXPIRED"
  case ShopEnum_AUTHENTICATION_FAILED: return "AUTHENTICATION_FAILED"
  case ShopEnum_BALANCE_SHORTAGE: return "BALANCE_SHORTAGE"
  case ShopEnum_INTERNAL_SERVER_ERROR: return "INTERNAL_SERVER_ERROR"
  case ShopEnum_SERVICE_IN_MAINTENANCE_MODE: return "SERVICE_IN_MAINTENANCE_MODE"
  case ShopEnum_SERVICE_UNAVAILABLE: return "SERVICE_UNAVAILABLE"
  }
  return "<UNSET>"
}

func ShopEnumFromString(s string) (ShopEnum, error) {
  switch s {
  case "NONE": return ShopEnum_NONE, nil 
  case "ILLEGAL_ARGUMENT": return ShopEnum_ILLEGAL_ARGUMENT, nil 
  case "NOT_FOUND": return ShopEnum_NOT_FOUND, nil 
  case "NOT_AVAILABLE": return ShopEnum_NOT_AVAILABLE, nil 
  case "NOT_PAID_PRODUCT": return ShopEnum_NOT_PAID_PRODUCT, nil 
  case "NOT_FREE_PRODUCT": return ShopEnum_NOT_FREE_PRODUCT, nil 
  case "ALREADY_OWNED": return ShopEnum_ALREADY_OWNED, nil 
  case "ERROR_WITH_CUSTOM_MESSAGE": return ShopEnum_ERROR_WITH_CUSTOM_MESSAGE, nil 
  case "NOT_AVAILABLE_TO_RECIPIENT": return ShopEnum_NOT_AVAILABLE_TO_RECIPIENT, nil 
  case "NOT_AVAILABLE_FOR_CHANNEL_ID": return ShopEnum_NOT_AVAILABLE_FOR_CHANNEL_ID, nil 
  case "NOT_SALE_FOR_COUNTRY": return ShopEnum_NOT_SALE_FOR_COUNTRY, nil 
  case "NOT_SALES_PERIOD": return ShopEnum_NOT_SALES_PERIOD, nil 
  case "NOT_SALE_FOR_DEVICE": return ShopEnum_NOT_SALE_FOR_DEVICE, nil 
  case "NOT_SALE_FOR_VERSION": return ShopEnum_NOT_SALE_FOR_VERSION, nil 
  case "ALREADY_EXPIRED": return ShopEnum_ALREADY_EXPIRED, nil 
  case "AUTHENTICATION_FAILED": return ShopEnum_AUTHENTICATION_FAILED, nil 
  case "BALANCE_SHORTAGE": return ShopEnum_BALANCE_SHORTAGE, nil 
  case "INTERNAL_SERVER_ERROR": return ShopEnum_INTERNAL_SERVER_ERROR, nil 
  case "SERVICE_IN_MAINTENANCE_MODE": return ShopEnum_SERVICE_IN_MAINTENANCE_MODE, nil 
  case "SERVICE_UNAVAILABLE": return ShopEnum_SERVICE_UNAVAILABLE, nil 
  }
  return ShopEnum(0), fmt.Errorf("not a valid ShopEnum string")
}


func ShopEnumPtr(v ShopEnum) *ShopEnum { return &v }

func (p ShopEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ShopEnum) UnmarshalText(text []byte) error {
q, err := ShopEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ShopEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ShopEnum(v)
return nil
}

func (p * ShopEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type LiffEnum int64
const (
  LiffEnum_INVALID_REQUEST LiffEnum = 1
  LiffEnum_UNAUTHORIZED LiffEnum = 2
  LiffEnum_CONSENT_REQUIRED LiffEnum = 3
  LiffEnum_VERSION_UPDATE_REQUIRED LiffEnum = 4
  LiffEnum_SERVER_ERROR LiffEnum = 100
)

func (p LiffEnum) String() string {
  switch p {
  case LiffEnum_INVALID_REQUEST: return "INVALID_REQUEST"
  case LiffEnum_UNAUTHORIZED: return "UNAUTHORIZED"
  case LiffEnum_CONSENT_REQUIRED: return "CONSENT_REQUIRED"
  case LiffEnum_VERSION_UPDATE_REQUIRED: return "VERSION_UPDATE_REQUIRED"
  case LiffEnum_SERVER_ERROR: return "SERVER_ERROR"
  }
  return "<UNSET>"
}

func LiffEnumFromString(s string) (LiffEnum, error) {
  switch s {
  case "INVALID_REQUEST": return LiffEnum_INVALID_REQUEST, nil 
  case "UNAUTHORIZED": return LiffEnum_UNAUTHORIZED, nil 
  case "CONSENT_REQUIRED": return LiffEnum_CONSENT_REQUIRED, nil 
  case "VERSION_UPDATE_REQUIRED": return LiffEnum_VERSION_UPDATE_REQUIRED, nil 
  case "SERVER_ERROR": return LiffEnum_SERVER_ERROR, nil 
  }
  return LiffEnum(0), fmt.Errorf("not a valid LiffEnum string")
}


func LiffEnumPtr(v LiffEnum) *LiffEnum { return &v }

func (p LiffEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *LiffEnum) UnmarshalText(text []byte) error {
q, err := LiffEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *LiffEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = LiffEnum(v)
return nil
}

func (p * LiffEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type CategoryEnum int64
const (
  CategoryEnum_PROFILE CategoryEnum = 0
  CategoryEnum_SETTINGS CategoryEnum = 1
  CategoryEnum_OPS CategoryEnum = 2
  CategoryEnum_CONTACT CategoryEnum = 3
  CategoryEnum_RECOMMEND CategoryEnum = 4
  CategoryEnum_BLOCK CategoryEnum = 5
  CategoryEnum_GROUP CategoryEnum = 6
  CategoryEnum_ROOM CategoryEnum = 7
  CategoryEnum_NOTIFICATION CategoryEnum = 8
  CategoryEnum_ADDRESS_BOOK CategoryEnum = 9
)

func (p CategoryEnum) String() string {
  switch p {
  case CategoryEnum_PROFILE: return "PROFILE"
  case CategoryEnum_SETTINGS: return "SETTINGS"
  case CategoryEnum_OPS: return "OPS"
  case CategoryEnum_CONTACT: return "CONTACT"
  case CategoryEnum_RECOMMEND: return "RECOMMEND"
  case CategoryEnum_BLOCK: return "BLOCK"
  case CategoryEnum_GROUP: return "GROUP"
  case CategoryEnum_ROOM: return "ROOM"
  case CategoryEnum_NOTIFICATION: return "NOTIFICATION"
  case CategoryEnum_ADDRESS_BOOK: return "ADDRESS_BOOK"
  }
  return "<UNSET>"
}

func CategoryEnumFromString(s string) (CategoryEnum, error) {
  switch s {
  case "PROFILE": return CategoryEnum_PROFILE, nil 
  case "SETTINGS": return CategoryEnum_SETTINGS, nil 
  case "OPS": return CategoryEnum_OPS, nil 
  case "CONTACT": return CategoryEnum_CONTACT, nil 
  case "RECOMMEND": return CategoryEnum_RECOMMEND, nil 
  case "BLOCK": return CategoryEnum_BLOCK, nil 
  case "GROUP": return CategoryEnum_GROUP, nil 
  case "ROOM": return CategoryEnum_ROOM, nil 
  case "NOTIFICATION": return CategoryEnum_NOTIFICATION, nil 
  case "ADDRESS_BOOK": return CategoryEnum_ADDRESS_BOOK, nil 
  }
  return CategoryEnum(0), fmt.Errorf("not a valid CategoryEnum string")
}


func CategoryEnumPtr(v CategoryEnum) *CategoryEnum { return &v }

func (p CategoryEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CategoryEnum) UnmarshalText(text []byte) error {
q, err := CategoryEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CategoryEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CategoryEnum(v)
return nil
}

func (p * CategoryEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChannelEnum int64
const (
  ChannelEnum_ILLEGAL_ARGUMENT ChannelEnum = 0
  ChannelEnum_INTERNAL_ERROR ChannelEnum = 1
  ChannelEnum_CONNECTION_ERROR ChannelEnum = 2
  ChannelEnum_AUTHENTICATIONI_FAILED ChannelEnum = 3
  ChannelEnum_NEED_PERMISSION_APPROVAL ChannelEnum = 4
  ChannelEnum_COIN_NOT_USABLE ChannelEnum = 5
  ChannelEnum_WEBVIEW_NOT_ALLOWED ChannelEnum = 6
)

func (p ChannelEnum) String() string {
  switch p {
  case ChannelEnum_ILLEGAL_ARGUMENT: return "ILLEGAL_ARGUMENT"
  case ChannelEnum_INTERNAL_ERROR: return "INTERNAL_ERROR"
  case ChannelEnum_CONNECTION_ERROR: return "CONNECTION_ERROR"
  case ChannelEnum_AUTHENTICATIONI_FAILED: return "AUTHENTICATIONI_FAILED"
  case ChannelEnum_NEED_PERMISSION_APPROVAL: return "NEED_PERMISSION_APPROVAL"
  case ChannelEnum_COIN_NOT_USABLE: return "COIN_NOT_USABLE"
  case ChannelEnum_WEBVIEW_NOT_ALLOWED: return "WEBVIEW_NOT_ALLOWED"
  }
  return "<UNSET>"
}

func ChannelEnumFromString(s string) (ChannelEnum, error) {
  switch s {
  case "ILLEGAL_ARGUMENT": return ChannelEnum_ILLEGAL_ARGUMENT, nil 
  case "INTERNAL_ERROR": return ChannelEnum_INTERNAL_ERROR, nil 
  case "CONNECTION_ERROR": return ChannelEnum_CONNECTION_ERROR, nil 
  case "AUTHENTICATIONI_FAILED": return ChannelEnum_AUTHENTICATIONI_FAILED, nil 
  case "NEED_PERMISSION_APPROVAL": return ChannelEnum_NEED_PERMISSION_APPROVAL, nil 
  case "COIN_NOT_USABLE": return ChannelEnum_COIN_NOT_USABLE, nil 
  case "WEBVIEW_NOT_ALLOWED": return ChannelEnum_WEBVIEW_NOT_ALLOWED, nil 
  }
  return ChannelEnum(0), fmt.Errorf("not a valid ChannelEnum string")
}


func ChannelEnumPtr(v ChannelEnum) *ChannelEnum { return &v }

func (p ChannelEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChannelEnum) UnmarshalText(text []byte) error {
q, err := ChannelEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChannelEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChannelEnum(v)
return nil
}

func (p * ChannelEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TalkEnum int64
const (
  TalkEnum_ILLEGAL_ARGUMENT TalkEnum = 0
  TalkEnum_AUTHENTICATION_FAILED TalkEnum = 1
  TalkEnum_DB_FAILED TalkEnum = 2
  TalkEnum_INVALID_STATE TalkEnum = 3
  TalkEnum_EXCESSIVE_ACCESS TalkEnum = 4
  TalkEnum_NOT_FOUND TalkEnum = 5
  TalkEnum_INVALID_MID TalkEnum = 9
  TalkEnum_NOT_A_MEMBER TalkEnum = 10
  TalkEnum_INVALID_LENGTH TalkEnum = 6
  TalkEnum_NOT_AVAILABLE_USER TalkEnum = 7
  TalkEnum_NOT_AUTHORIZED_DEVICE TalkEnum = 8
  TalkEnum_NOT_AUTHORIZED_SESSION TalkEnum = 14
  TalkEnum_INCOMPATIBLE_APP_VERSION TalkEnum = 11
  TalkEnum_NOT_READY TalkEnum = 12
  TalkEnum_NOT_AVAILABLE_SESSION TalkEnum = 13
  TalkEnum_SYSTEM_ERROR TalkEnum = 15
  TalkEnum_NO_AVAILABLE_VERIFICATION_METHOD TalkEnum = 16
  TalkEnum_NOT_AUTHENTICATED TalkEnum = 17
  TalkEnum_INVALID_IDENTITY_CREDENTIAL TalkEnum = 18
  TalkEnum_NOT_AVAILABLE_IDENTITY_IDENTIFIER TalkEnum = 19
  TalkEnum_INTERNAL_ERROR TalkEnum = 20
  TalkEnum_NO_SUCH_IDENTITY_IDENFIER TalkEnum = 21
  TalkEnum_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY TalkEnum = 22
  TalkEnum_ILLEGAL_IDENTITY_CREDENTIAL TalkEnum = 23
  TalkEnum_UNKNOWN_CHANNEL TalkEnum = 24
  TalkEnum_NO_SUCH_MESSAGE_BOX TalkEnum = 25
  TalkEnum_NOT_AVAILABLE_MESSAGE_BOX TalkEnum = 26
  TalkEnum_CHANNEL_DOES_NOT_MATCH TalkEnum = 27
  TalkEnum_NOT_YOUR_MESSAGE TalkEnum = 28
  TalkEnum_MESSAGE_DEFINED_ERROR TalkEnum = 29
  TalkEnum_USER_CANNOT_ACCEPT_PRESENTS TalkEnum = 30
  TalkEnum_USER_NOT_STICKER_OWNER TalkEnum = 32
  TalkEnum_MAINTENANCE_ERROR TalkEnum = 33
  TalkEnum_ACCOUNT_NOT_MATCHED TalkEnum = 34
  TalkEnum_ABUSE_BLOCK TalkEnum = 35
  TalkEnum_NOT_FRIEND TalkEnum = 36
  TalkEnum_NOT_ALLOWED_CALL TalkEnum = 37
  TalkEnum_BLOCK_FRIEND TalkEnum = 38
  TalkEnum_INCOMPATIBLE_VOIP_VERSION TalkEnum = 39
  TalkEnum_INVALID_SNS_ACCESS_TOKEN TalkEnum = 40
  TalkEnum_EXTERNAL_SERVICE_NOT_AVAILABLE TalkEnum = 41
  TalkEnum_NOT_ALLOWED_ADD_CONTACT TalkEnum = 42
  TalkEnum_NOT_CERTIFICATED TalkEnum = 43
  TalkEnum_NOT_ALLOWED_SECONDARY_DEVICE TalkEnum = 44
  TalkEnum_INVALID_PIN_CODE TalkEnum = 45
  TalkEnum_NOT_FOUND_IDENTITY_CREDENTIAL TalkEnum = 46
  TalkEnum_EXCEED_FILE_MAX_SIZE TalkEnum = 47
  TalkEnum_EXCEED_DAILY_QUOTA TalkEnum = 48
  TalkEnum_NOT_SUPPORT_SEND_FILE TalkEnum = 49
  TalkEnum_MUST_UPGRADE TalkEnum = 50
  TalkEnum_NOT_AVAILABLE_PIN_CODE_SESSION TalkEnum = 51
  TalkEnum_EXPIRED_REVISION TalkEnum = 52
  TalkEnum_NOT_YET_PHONE_NUMBER TalkEnum = 54
  TalkEnum_BAD_CALL_NUMBER TalkEnum = 55
  TalkEnum_UNAVAILABLE_CALL_NUMBER TalkEnum = 56
  TalkEnum_NOT_SUPPORT_CALL_SERVICE TalkEnum = 57
  TalkEnum_CONGESTION_CONTROL TalkEnum = 58
  TalkEnum_NO_BALANCE TalkEnum = 59
  TalkEnum_NOT_PERMITTED_CALLER_ID TalkEnum = 60
  TalkEnum_NO_CALLER_ID_LIMIT_EXCEEDED TalkEnum = 61
  TalkEnum_CALLER_ID_VERIFICATION_REQUIRED TalkEnum = 62
  TalkEnum_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED TalkEnum = 63
  TalkEnum_MESSAGE_NOT_FOUND TalkEnum = 64
  TalkEnum_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT TalkEnum = 65
  TalkEnum_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED TalkEnum = 66
  TalkEnum_ACCOUNT_MIGRATION_PINCODE_BLOCKED TalkEnum = 67
  TalkEnum_INVALID_PASSWORD_FORMAT TalkEnum = 69
  TalkEnum_FEATURE_RESTRICTED TalkEnum = 70
  TalkEnum_MESSAGE_NOT_DESTRUCTIBLE TalkEnum = 71
  TalkEnum_PAID_CALL_REDEEM_FAILED TalkEnum = 72
  TalkEnum_PREVENTED_JOIN_BY_TICKET TalkEnum = 73
  TalkEnum_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT TalkEnum = 75
  TalkEnum_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY TalkEnum = 76
  TalkEnum_SECURITY_CENTER_NOT_VERIFIED TalkEnum = 77
  TalkEnum_SECURITY_CENTER_BLOCKED_BY_SETTING TalkEnum = 78
  TalkEnum_SECURITY_CENTER_BLOCKED TalkEnum = 79
  TalkEnum_TALK_PROXY_EXCEPTION TalkEnum = 80
  TalkEnum_E2EE_INVALID_PROTOCOL TalkEnum = 81
  TalkEnum_E2EE_RETRY_ENCRYPT TalkEnum = 82
  TalkEnum_E2EE_UPDATE_SENDER_KEY TalkEnum = 83
  TalkEnum_E2EE_UPDATE_RECEIVER_KEY TalkEnum = 84
  TalkEnum_E2EE_INVALID_ARGUMENT TalkEnum = 85
  TalkEnum_E2EE_INVALID_VERSION TalkEnum = 86
  TalkEnum_E2EE_SENDER_DISABLED TalkEnum = 87
  TalkEnum_E2EE_RECEIVER_DISABLED TalkEnum = 88
  TalkEnum_E2EE_SENDER_NOT_ALLOWED TalkEnum = 89
  TalkEnum_E2EE_RECEIVER_NOT_ALLOWED TalkEnum = 90
  TalkEnum_E2EE_RESEND_FAIL TalkEnum = 91
  TalkEnum_E2EE_RESEND_OK TalkEnum = 92
  TalkEnum_HITOKOTO_BACKUP_NO_AVAILABLE_DATA TalkEnum = 93
  TalkEnum_E2EE_UPDATE_PRIMARY_DEVICE TalkEnum = 94
  TalkEnum_SUCCESS TalkEnum = 95
  TalkEnum_CANCEL TalkEnum = 96
  TalkEnum_E2EE_PRIMARY_NOT_SUPPORT TalkEnum = 97
  TalkEnum_E2EE_RETRY_PLAIN TalkEnum = 98
  TalkEnum_E2EE_RECREATE_GROUP_KEY TalkEnum = 99
  TalkEnum_E2EE_GROUP_TOO_MANY_MEMBERS TalkEnum = 100
  TalkEnum_SERVER_BUSY TalkEnum = 101
  TalkEnum_NOT_ALLOWED_ADD_FOLLOW TalkEnum = 102
  TalkEnum_INCOMING_FRIEND_REQUEST_LIMIT TalkEnum = 103
  TalkEnum_OUTGOING_FRIEND_REQUEST_LIMIT TalkEnum = 104
  TalkEnum_OUTGOING_FRIEND_REQUEST_QUOTA TalkEnum = 105
  TalkEnum_DUPLICATED TalkEnum = 106
  TalkEnum_BANNED TalkEnum = 107
  TalkEnum_NOT_AN_INVITEE TalkEnum = 108
  TalkEnum_NOT_AN_OUTSIDER TalkEnum = 109
  TalkEnum_AGE_CHECK_REQUIRED TalkEnum = 110
  TalkEnum_EMPTY_GROUP TalkEnum = 111
  TalkEnum_EXCEED_FOLLOW_LIMIT TalkEnum = 112
)

func (p TalkEnum) String() string {
  switch p {
  case TalkEnum_ILLEGAL_ARGUMENT: return "ILLEGAL_ARGUMENT"
  case TalkEnum_AUTHENTICATION_FAILED: return "AUTHENTICATION_FAILED"
  case TalkEnum_DB_FAILED: return "DB_FAILED"
  case TalkEnum_INVALID_STATE: return "INVALID_STATE"
  case TalkEnum_EXCESSIVE_ACCESS: return "EXCESSIVE_ACCESS"
  case TalkEnum_NOT_FOUND: return "NOT_FOUND"
  case TalkEnum_INVALID_MID: return "INVALID_MID"
  case TalkEnum_NOT_A_MEMBER: return "NOT_A_MEMBER"
  case TalkEnum_INVALID_LENGTH: return "INVALID_LENGTH"
  case TalkEnum_NOT_AVAILABLE_USER: return "NOT_AVAILABLE_USER"
  case TalkEnum_NOT_AUTHORIZED_DEVICE: return "NOT_AUTHORIZED_DEVICE"
  case TalkEnum_NOT_AUTHORIZED_SESSION: return "NOT_AUTHORIZED_SESSION"
  case TalkEnum_INCOMPATIBLE_APP_VERSION: return "INCOMPATIBLE_APP_VERSION"
  case TalkEnum_NOT_READY: return "NOT_READY"
  case TalkEnum_NOT_AVAILABLE_SESSION: return "NOT_AVAILABLE_SESSION"
  case TalkEnum_SYSTEM_ERROR: return "SYSTEM_ERROR"
  case TalkEnum_NO_AVAILABLE_VERIFICATION_METHOD: return "NO_AVAILABLE_VERIFICATION_METHOD"
  case TalkEnum_NOT_AUTHENTICATED: return "NOT_AUTHENTICATED"
  case TalkEnum_INVALID_IDENTITY_CREDENTIAL: return "INVALID_IDENTITY_CREDENTIAL"
  case TalkEnum_NOT_AVAILABLE_IDENTITY_IDENTIFIER: return "NOT_AVAILABLE_IDENTITY_IDENTIFIER"
  case TalkEnum_INTERNAL_ERROR: return "INTERNAL_ERROR"
  case TalkEnum_NO_SUCH_IDENTITY_IDENFIER: return "NO_SUCH_IDENTITY_IDENFIER"
  case TalkEnum_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY: return "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY"
  case TalkEnum_ILLEGAL_IDENTITY_CREDENTIAL: return "ILLEGAL_IDENTITY_CREDENTIAL"
  case TalkEnum_UNKNOWN_CHANNEL: return "UNKNOWN_CHANNEL"
  case TalkEnum_NO_SUCH_MESSAGE_BOX: return "NO_SUCH_MESSAGE_BOX"
  case TalkEnum_NOT_AVAILABLE_MESSAGE_BOX: return "NOT_AVAILABLE_MESSAGE_BOX"
  case TalkEnum_CHANNEL_DOES_NOT_MATCH: return "CHANNEL_DOES_NOT_MATCH"
  case TalkEnum_NOT_YOUR_MESSAGE: return "NOT_YOUR_MESSAGE"
  case TalkEnum_MESSAGE_DEFINED_ERROR: return "MESSAGE_DEFINED_ERROR"
  case TalkEnum_USER_CANNOT_ACCEPT_PRESENTS: return "USER_CANNOT_ACCEPT_PRESENTS"
  case TalkEnum_USER_NOT_STICKER_OWNER: return "USER_NOT_STICKER_OWNER"
  case TalkEnum_MAINTENANCE_ERROR: return "MAINTENANCE_ERROR"
  case TalkEnum_ACCOUNT_NOT_MATCHED: return "ACCOUNT_NOT_MATCHED"
  case TalkEnum_ABUSE_BLOCK: return "ABUSE_BLOCK"
  case TalkEnum_NOT_FRIEND: return "NOT_FRIEND"
  case TalkEnum_NOT_ALLOWED_CALL: return "NOT_ALLOWED_CALL"
  case TalkEnum_BLOCK_FRIEND: return "BLOCK_FRIEND"
  case TalkEnum_INCOMPATIBLE_VOIP_VERSION: return "INCOMPATIBLE_VOIP_VERSION"
  case TalkEnum_INVALID_SNS_ACCESS_TOKEN: return "INVALID_SNS_ACCESS_TOKEN"
  case TalkEnum_EXTERNAL_SERVICE_NOT_AVAILABLE: return "EXTERNAL_SERVICE_NOT_AVAILABLE"
  case TalkEnum_NOT_ALLOWED_ADD_CONTACT: return "NOT_ALLOWED_ADD_CONTACT"
  case TalkEnum_NOT_CERTIFICATED: return "NOT_CERTIFICATED"
  case TalkEnum_NOT_ALLOWED_SECONDARY_DEVICE: return "NOT_ALLOWED_SECONDARY_DEVICE"
  case TalkEnum_INVALID_PIN_CODE: return "INVALID_PIN_CODE"
  case TalkEnum_NOT_FOUND_IDENTITY_CREDENTIAL: return "NOT_FOUND_IDENTITY_CREDENTIAL"
  case TalkEnum_EXCEED_FILE_MAX_SIZE: return "EXCEED_FILE_MAX_SIZE"
  case TalkEnum_EXCEED_DAILY_QUOTA: return "EXCEED_DAILY_QUOTA"
  case TalkEnum_NOT_SUPPORT_SEND_FILE: return "NOT_SUPPORT_SEND_FILE"
  case TalkEnum_MUST_UPGRADE: return "MUST_UPGRADE"
  case TalkEnum_NOT_AVAILABLE_PIN_CODE_SESSION: return "NOT_AVAILABLE_PIN_CODE_SESSION"
  case TalkEnum_EXPIRED_REVISION: return "EXPIRED_REVISION"
  case TalkEnum_NOT_YET_PHONE_NUMBER: return "NOT_YET_PHONE_NUMBER"
  case TalkEnum_BAD_CALL_NUMBER: return "BAD_CALL_NUMBER"
  case TalkEnum_UNAVAILABLE_CALL_NUMBER: return "UNAVAILABLE_CALL_NUMBER"
  case TalkEnum_NOT_SUPPORT_CALL_SERVICE: return "NOT_SUPPORT_CALL_SERVICE"
  case TalkEnum_CONGESTION_CONTROL: return "CONGESTION_CONTROL"
  case TalkEnum_NO_BALANCE: return "NO_BALANCE"
  case TalkEnum_NOT_PERMITTED_CALLER_ID: return "NOT_PERMITTED_CALLER_ID"
  case TalkEnum_NO_CALLER_ID_LIMIT_EXCEEDED: return "NO_CALLER_ID_LIMIT_EXCEEDED"
  case TalkEnum_CALLER_ID_VERIFICATION_REQUIRED: return "CALLER_ID_VERIFICATION_REQUIRED"
  case TalkEnum_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED: return "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED"
  case TalkEnum_MESSAGE_NOT_FOUND: return "MESSAGE_NOT_FOUND"
  case TalkEnum_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT: return "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT"
  case TalkEnum_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED: return "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED"
  case TalkEnum_ACCOUNT_MIGRATION_PINCODE_BLOCKED: return "ACCOUNT_MIGRATION_PINCODE_BLOCKED"
  case TalkEnum_INVALID_PASSWORD_FORMAT: return "INVALID_PASSWORD_FORMAT"
  case TalkEnum_FEATURE_RESTRICTED: return "FEATURE_RESTRICTED"
  case TalkEnum_MESSAGE_NOT_DESTRUCTIBLE: return "MESSAGE_NOT_DESTRUCTIBLE"
  case TalkEnum_PAID_CALL_REDEEM_FAILED: return "PAID_CALL_REDEEM_FAILED"
  case TalkEnum_PREVENTED_JOIN_BY_TICKET: return "PREVENTED_JOIN_BY_TICKET"
  case TalkEnum_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT: return "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT"
  case TalkEnum_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY: return "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY"
  case TalkEnum_SECURITY_CENTER_NOT_VERIFIED: return "SECURITY_CENTER_NOT_VERIFIED"
  case TalkEnum_SECURITY_CENTER_BLOCKED_BY_SETTING: return "SECURITY_CENTER_BLOCKED_BY_SETTING"
  case TalkEnum_SECURITY_CENTER_BLOCKED: return "SECURITY_CENTER_BLOCKED"
  case TalkEnum_TALK_PROXY_EXCEPTION: return "TALK_PROXY_EXCEPTION"
  case TalkEnum_E2EE_INVALID_PROTOCOL: return "E2EE_INVALID_PROTOCOL"
  case TalkEnum_E2EE_RETRY_ENCRYPT: return "E2EE_RETRY_ENCRYPT"
  case TalkEnum_E2EE_UPDATE_SENDER_KEY: return "E2EE_UPDATE_SENDER_KEY"
  case TalkEnum_E2EE_UPDATE_RECEIVER_KEY: return "E2EE_UPDATE_RECEIVER_KEY"
  case TalkEnum_E2EE_INVALID_ARGUMENT: return "E2EE_INVALID_ARGUMENT"
  case TalkEnum_E2EE_INVALID_VERSION: return "E2EE_INVALID_VERSION"
  case TalkEnum_E2EE_SENDER_DISABLED: return "E2EE_SENDER_DISABLED"
  case TalkEnum_E2EE_RECEIVER_DISABLED: return "E2EE_RECEIVER_DISABLED"
  case TalkEnum_E2EE_SENDER_NOT_ALLOWED: return "E2EE_SENDER_NOT_ALLOWED"
  case TalkEnum_E2EE_RECEIVER_NOT_ALLOWED: return "E2EE_RECEIVER_NOT_ALLOWED"
  case TalkEnum_E2EE_RESEND_FAIL: return "E2EE_RESEND_FAIL"
  case TalkEnum_E2EE_RESEND_OK: return "E2EE_RESEND_OK"
  case TalkEnum_HITOKOTO_BACKUP_NO_AVAILABLE_DATA: return "HITOKOTO_BACKUP_NO_AVAILABLE_DATA"
  case TalkEnum_E2EE_UPDATE_PRIMARY_DEVICE: return "E2EE_UPDATE_PRIMARY_DEVICE"
  case TalkEnum_SUCCESS: return "SUCCESS"
  case TalkEnum_CANCEL: return "CANCEL"
  case TalkEnum_E2EE_PRIMARY_NOT_SUPPORT: return "E2EE_PRIMARY_NOT_SUPPORT"
  case TalkEnum_E2EE_RETRY_PLAIN: return "E2EE_RETRY_PLAIN"
  case TalkEnum_E2EE_RECREATE_GROUP_KEY: return "E2EE_RECREATE_GROUP_KEY"
  case TalkEnum_E2EE_GROUP_TOO_MANY_MEMBERS: return "E2EE_GROUP_TOO_MANY_MEMBERS"
  case TalkEnum_SERVER_BUSY: return "SERVER_BUSY"
  case TalkEnum_NOT_ALLOWED_ADD_FOLLOW: return "NOT_ALLOWED_ADD_FOLLOW"
  case TalkEnum_INCOMING_FRIEND_REQUEST_LIMIT: return "INCOMING_FRIEND_REQUEST_LIMIT"
  case TalkEnum_OUTGOING_FRIEND_REQUEST_LIMIT: return "OUTGOING_FRIEND_REQUEST_LIMIT"
  case TalkEnum_OUTGOING_FRIEND_REQUEST_QUOTA: return "OUTGOING_FRIEND_REQUEST_QUOTA"
  case TalkEnum_DUPLICATED: return "DUPLICATED"
  case TalkEnum_BANNED: return "BANNED"
  case TalkEnum_NOT_AN_INVITEE: return "NOT_AN_INVITEE"
  case TalkEnum_NOT_AN_OUTSIDER: return "NOT_AN_OUTSIDER"
  case TalkEnum_AGE_CHECK_REQUIRED: return "AGE_CHECK_REQUIRED"
  case TalkEnum_EMPTY_GROUP: return "EMPTY_GROUP"
  case TalkEnum_EXCEED_FOLLOW_LIMIT: return "EXCEED_FOLLOW_LIMIT"
  }
  return "<UNSET>"
}

func TalkEnumFromString(s string) (TalkEnum, error) {
  switch s {
  case "ILLEGAL_ARGUMENT": return TalkEnum_ILLEGAL_ARGUMENT, nil 
  case "AUTHENTICATION_FAILED": return TalkEnum_AUTHENTICATION_FAILED, nil 
  case "DB_FAILED": return TalkEnum_DB_FAILED, nil 
  case "INVALID_STATE": return TalkEnum_INVALID_STATE, nil 
  case "EXCESSIVE_ACCESS": return TalkEnum_EXCESSIVE_ACCESS, nil 
  case "NOT_FOUND": return TalkEnum_NOT_FOUND, nil 
  case "INVALID_MID": return TalkEnum_INVALID_MID, nil 
  case "NOT_A_MEMBER": return TalkEnum_NOT_A_MEMBER, nil 
  case "INVALID_LENGTH": return TalkEnum_INVALID_LENGTH, nil 
  case "NOT_AVAILABLE_USER": return TalkEnum_NOT_AVAILABLE_USER, nil 
  case "NOT_AUTHORIZED_DEVICE": return TalkEnum_NOT_AUTHORIZED_DEVICE, nil 
  case "NOT_AUTHORIZED_SESSION": return TalkEnum_NOT_AUTHORIZED_SESSION, nil 
  case "INCOMPATIBLE_APP_VERSION": return TalkEnum_INCOMPATIBLE_APP_VERSION, nil 
  case "NOT_READY": return TalkEnum_NOT_READY, nil 
  case "NOT_AVAILABLE_SESSION": return TalkEnum_NOT_AVAILABLE_SESSION, nil 
  case "SYSTEM_ERROR": return TalkEnum_SYSTEM_ERROR, nil 
  case "NO_AVAILABLE_VERIFICATION_METHOD": return TalkEnum_NO_AVAILABLE_VERIFICATION_METHOD, nil 
  case "NOT_AUTHENTICATED": return TalkEnum_NOT_AUTHENTICATED, nil 
  case "INVALID_IDENTITY_CREDENTIAL": return TalkEnum_INVALID_IDENTITY_CREDENTIAL, nil 
  case "NOT_AVAILABLE_IDENTITY_IDENTIFIER": return TalkEnum_NOT_AVAILABLE_IDENTITY_IDENTIFIER, nil 
  case "INTERNAL_ERROR": return TalkEnum_INTERNAL_ERROR, nil 
  case "NO_SUCH_IDENTITY_IDENFIER": return TalkEnum_NO_SUCH_IDENTITY_IDENFIER, nil 
  case "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY": return TalkEnum_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY, nil 
  case "ILLEGAL_IDENTITY_CREDENTIAL": return TalkEnum_ILLEGAL_IDENTITY_CREDENTIAL, nil 
  case "UNKNOWN_CHANNEL": return TalkEnum_UNKNOWN_CHANNEL, nil 
  case "NO_SUCH_MESSAGE_BOX": return TalkEnum_NO_SUCH_MESSAGE_BOX, nil 
  case "NOT_AVAILABLE_MESSAGE_BOX": return TalkEnum_NOT_AVAILABLE_MESSAGE_BOX, nil 
  case "CHANNEL_DOES_NOT_MATCH": return TalkEnum_CHANNEL_DOES_NOT_MATCH, nil 
  case "NOT_YOUR_MESSAGE": return TalkEnum_NOT_YOUR_MESSAGE, nil 
  case "MESSAGE_DEFINED_ERROR": return TalkEnum_MESSAGE_DEFINED_ERROR, nil 
  case "USER_CANNOT_ACCEPT_PRESENTS": return TalkEnum_USER_CANNOT_ACCEPT_PRESENTS, nil 
  case "USER_NOT_STICKER_OWNER": return TalkEnum_USER_NOT_STICKER_OWNER, nil 
  case "MAINTENANCE_ERROR": return TalkEnum_MAINTENANCE_ERROR, nil 
  case "ACCOUNT_NOT_MATCHED": return TalkEnum_ACCOUNT_NOT_MATCHED, nil 
  case "ABUSE_BLOCK": return TalkEnum_ABUSE_BLOCK, nil 
  case "NOT_FRIEND": return TalkEnum_NOT_FRIEND, nil 
  case "NOT_ALLOWED_CALL": return TalkEnum_NOT_ALLOWED_CALL, nil 
  case "BLOCK_FRIEND": return TalkEnum_BLOCK_FRIEND, nil 
  case "INCOMPATIBLE_VOIP_VERSION": return TalkEnum_INCOMPATIBLE_VOIP_VERSION, nil 
  case "INVALID_SNS_ACCESS_TOKEN": return TalkEnum_INVALID_SNS_ACCESS_TOKEN, nil 
  case "EXTERNAL_SERVICE_NOT_AVAILABLE": return TalkEnum_EXTERNAL_SERVICE_NOT_AVAILABLE, nil 
  case "NOT_ALLOWED_ADD_CONTACT": return TalkEnum_NOT_ALLOWED_ADD_CONTACT, nil 
  case "NOT_CERTIFICATED": return TalkEnum_NOT_CERTIFICATED, nil 
  case "NOT_ALLOWED_SECONDARY_DEVICE": return TalkEnum_NOT_ALLOWED_SECONDARY_DEVICE, nil 
  case "INVALID_PIN_CODE": return TalkEnum_INVALID_PIN_CODE, nil 
  case "NOT_FOUND_IDENTITY_CREDENTIAL": return TalkEnum_NOT_FOUND_IDENTITY_CREDENTIAL, nil 
  case "EXCEED_FILE_MAX_SIZE": return TalkEnum_EXCEED_FILE_MAX_SIZE, nil 
  case "EXCEED_DAILY_QUOTA": return TalkEnum_EXCEED_DAILY_QUOTA, nil 
  case "NOT_SUPPORT_SEND_FILE": return TalkEnum_NOT_SUPPORT_SEND_FILE, nil 
  case "MUST_UPGRADE": return TalkEnum_MUST_UPGRADE, nil 
  case "NOT_AVAILABLE_PIN_CODE_SESSION": return TalkEnum_NOT_AVAILABLE_PIN_CODE_SESSION, nil 
  case "EXPIRED_REVISION": return TalkEnum_EXPIRED_REVISION, nil 
  case "NOT_YET_PHONE_NUMBER": return TalkEnum_NOT_YET_PHONE_NUMBER, nil 
  case "BAD_CALL_NUMBER": return TalkEnum_BAD_CALL_NUMBER, nil 
  case "UNAVAILABLE_CALL_NUMBER": return TalkEnum_UNAVAILABLE_CALL_NUMBER, nil 
  case "NOT_SUPPORT_CALL_SERVICE": return TalkEnum_NOT_SUPPORT_CALL_SERVICE, nil 
  case "CONGESTION_CONTROL": return TalkEnum_CONGESTION_CONTROL, nil 
  case "NO_BALANCE": return TalkEnum_NO_BALANCE, nil 
  case "NOT_PERMITTED_CALLER_ID": return TalkEnum_NOT_PERMITTED_CALLER_ID, nil 
  case "NO_CALLER_ID_LIMIT_EXCEEDED": return TalkEnum_NO_CALLER_ID_LIMIT_EXCEEDED, nil 
  case "CALLER_ID_VERIFICATION_REQUIRED": return TalkEnum_CALLER_ID_VERIFICATION_REQUIRED, nil 
  case "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": return TalkEnum_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED, nil 
  case "MESSAGE_NOT_FOUND": return TalkEnum_MESSAGE_NOT_FOUND, nil 
  case "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT": return TalkEnum_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT, nil 
  case "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED": return TalkEnum_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED, nil 
  case "ACCOUNT_MIGRATION_PINCODE_BLOCKED": return TalkEnum_ACCOUNT_MIGRATION_PINCODE_BLOCKED, nil 
  case "INVALID_PASSWORD_FORMAT": return TalkEnum_INVALID_PASSWORD_FORMAT, nil 
  case "FEATURE_RESTRICTED": return TalkEnum_FEATURE_RESTRICTED, nil 
  case "MESSAGE_NOT_DESTRUCTIBLE": return TalkEnum_MESSAGE_NOT_DESTRUCTIBLE, nil 
  case "PAID_CALL_REDEEM_FAILED": return TalkEnum_PAID_CALL_REDEEM_FAILED, nil 
  case "PREVENTED_JOIN_BY_TICKET": return TalkEnum_PREVENTED_JOIN_BY_TICKET, nil 
  case "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT": return TalkEnum_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT, nil 
  case "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY": return TalkEnum_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY, nil 
  case "SECURITY_CENTER_NOT_VERIFIED": return TalkEnum_SECURITY_CENTER_NOT_VERIFIED, nil 
  case "SECURITY_CENTER_BLOCKED_BY_SETTING": return TalkEnum_SECURITY_CENTER_BLOCKED_BY_SETTING, nil 
  case "SECURITY_CENTER_BLOCKED": return TalkEnum_SECURITY_CENTER_BLOCKED, nil 
  case "TALK_PROXY_EXCEPTION": return TalkEnum_TALK_PROXY_EXCEPTION, nil 
  case "E2EE_INVALID_PROTOCOL": return TalkEnum_E2EE_INVALID_PROTOCOL, nil 
  case "E2EE_RETRY_ENCRYPT": return TalkEnum_E2EE_RETRY_ENCRYPT, nil 
  case "E2EE_UPDATE_SENDER_KEY": return TalkEnum_E2EE_UPDATE_SENDER_KEY, nil 
  case "E2EE_UPDATE_RECEIVER_KEY": return TalkEnum_E2EE_UPDATE_RECEIVER_KEY, nil 
  case "E2EE_INVALID_ARGUMENT": return TalkEnum_E2EE_INVALID_ARGUMENT, nil 
  case "E2EE_INVALID_VERSION": return TalkEnum_E2EE_INVALID_VERSION, nil 
  case "E2EE_SENDER_DISABLED": return TalkEnum_E2EE_SENDER_DISABLED, nil 
  case "E2EE_RECEIVER_DISABLED": return TalkEnum_E2EE_RECEIVER_DISABLED, nil 
  case "E2EE_SENDER_NOT_ALLOWED": return TalkEnum_E2EE_SENDER_NOT_ALLOWED, nil 
  case "E2EE_RECEIVER_NOT_ALLOWED": return TalkEnum_E2EE_RECEIVER_NOT_ALLOWED, nil 
  case "E2EE_RESEND_FAIL": return TalkEnum_E2EE_RESEND_FAIL, nil 
  case "E2EE_RESEND_OK": return TalkEnum_E2EE_RESEND_OK, nil 
  case "HITOKOTO_BACKUP_NO_AVAILABLE_DATA": return TalkEnum_HITOKOTO_BACKUP_NO_AVAILABLE_DATA, nil 
  case "E2EE_UPDATE_PRIMARY_DEVICE": return TalkEnum_E2EE_UPDATE_PRIMARY_DEVICE, nil 
  case "SUCCESS": return TalkEnum_SUCCESS, nil 
  case "CANCEL": return TalkEnum_CANCEL, nil 
  case "E2EE_PRIMARY_NOT_SUPPORT": return TalkEnum_E2EE_PRIMARY_NOT_SUPPORT, nil 
  case "E2EE_RETRY_PLAIN": return TalkEnum_E2EE_RETRY_PLAIN, nil 
  case "E2EE_RECREATE_GROUP_KEY": return TalkEnum_E2EE_RECREATE_GROUP_KEY, nil 
  case "E2EE_GROUP_TOO_MANY_MEMBERS": return TalkEnum_E2EE_GROUP_TOO_MANY_MEMBERS, nil 
  case "SERVER_BUSY": return TalkEnum_SERVER_BUSY, nil 
  case "NOT_ALLOWED_ADD_FOLLOW": return TalkEnum_NOT_ALLOWED_ADD_FOLLOW, nil 
  case "INCOMING_FRIEND_REQUEST_LIMIT": return TalkEnum_INCOMING_FRIEND_REQUEST_LIMIT, nil 
  case "OUTGOING_FRIEND_REQUEST_LIMIT": return TalkEnum_OUTGOING_FRIEND_REQUEST_LIMIT, nil 
  case "OUTGOING_FRIEND_REQUEST_QUOTA": return TalkEnum_OUTGOING_FRIEND_REQUEST_QUOTA, nil 
  case "DUPLICATED": return TalkEnum_DUPLICATED, nil 
  case "BANNED": return TalkEnum_BANNED, nil 
  case "NOT_AN_INVITEE": return TalkEnum_NOT_AN_INVITEE, nil 
  case "NOT_AN_OUTSIDER": return TalkEnum_NOT_AN_OUTSIDER, nil 
  case "AGE_CHECK_REQUIRED": return TalkEnum_AGE_CHECK_REQUIRED, nil 
  case "EMPTY_GROUP": return TalkEnum_EMPTY_GROUP, nil 
  case "EXCEED_FOLLOW_LIMIT": return TalkEnum_EXCEED_FOLLOW_LIMIT, nil 
  }
  return TalkEnum(0), fmt.Errorf("not a valid TalkEnum string")
}


func TalkEnumPtr(v TalkEnum) *TalkEnum { return &v }

func (p TalkEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TalkEnum) UnmarshalText(text []byte) error {
q, err := TalkEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TalkEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TalkEnum(v)
return nil
}

func (p * TalkEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ProviderEnum int64
const (
  ProviderEnum_GOOGLE ProviderEnum = 0
  ProviderEnum_BAIDU ProviderEnum = 1
  ProviderEnum_FOURSQUARE ProviderEnum = 2
)

func (p ProviderEnum) String() string {
  switch p {
  case ProviderEnum_GOOGLE: return "GOOGLE"
  case ProviderEnum_BAIDU: return "BAIDU"
  case ProviderEnum_FOURSQUARE: return "FOURSQUARE"
  }
  return "<UNSET>"
}

func ProviderEnumFromString(s string) (ProviderEnum, error) {
  switch s {
  case "GOOGLE": return ProviderEnum_GOOGLE, nil 
  case "BAIDU": return ProviderEnum_BAIDU, nil 
  case "FOURSQUARE": return ProviderEnum_FOURSQUARE, nil 
  }
  return ProviderEnum(0), fmt.Errorf("not a valid ProviderEnum string")
}


func ProviderEnumPtr(v ProviderEnum) *ProviderEnum { return &v }

func (p ProviderEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ProviderEnum) UnmarshalText(text []byte) error {
q, err := ProviderEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ProviderEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ProviderEnum(v)
return nil
}

func (p * ProviderEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FeatureTypeEnum int64
const (
  FeatureTypeEnum_OBS_VIDEO FeatureTypeEnum = 0
  FeatureTypeEnum_OBS_GENERAL FeatureTypeEnum = 1
  FeatureTypeEnum_OBS_RINGBACK_TONE FeatureTypeEnum = 2
)

func (p FeatureTypeEnum) String() string {
  switch p {
  case FeatureTypeEnum_OBS_VIDEO: return "OBS_VIDEO"
  case FeatureTypeEnum_OBS_GENERAL: return "OBS_GENERAL"
  case FeatureTypeEnum_OBS_RINGBACK_TONE: return "OBS_RINGBACK_TONE"
  }
  return "<UNSET>"
}

func FeatureTypeEnumFromString(s string) (FeatureTypeEnum, error) {
  switch s {
  case "OBS_VIDEO": return FeatureTypeEnum_OBS_VIDEO, nil 
  case "OBS_GENERAL": return FeatureTypeEnum_OBS_GENERAL, nil 
  case "OBS_RINGBACK_TONE": return FeatureTypeEnum_OBS_RINGBACK_TONE, nil 
  }
  return FeatureTypeEnum(0), fmt.Errorf("not a valid FeatureTypeEnum string")
}


func FeatureTypeEnumPtr(v FeatureTypeEnum) *FeatureTypeEnum { return &v }

func (p FeatureTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FeatureTypeEnum) UnmarshalText(text []byte) error {
q, err := FeatureTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FeatureTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FeatureTypeEnum(v)
return nil
}

func (p * FeatureTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ProductTypeEnum int64
const (
  ProductTypeEnum_STICKER ProductTypeEnum = 1
  ProductTypeEnum_THEME ProductTypeEnum = 2
  ProductTypeEnum_STICON ProductTypeEnum = 3
)

func (p ProductTypeEnum) String() string {
  switch p {
  case ProductTypeEnum_STICKER: return "STICKER"
  case ProductTypeEnum_THEME: return "THEME"
  case ProductTypeEnum_STICON: return "STICON"
  }
  return "<UNSET>"
}

func ProductTypeEnumFromString(s string) (ProductTypeEnum, error) {
  switch s {
  case "STICKER": return ProductTypeEnum_STICKER, nil 
  case "THEME": return ProductTypeEnum_THEME, nil 
  case "STICON": return ProductTypeEnum_STICON, nil 
  }
  return ProductTypeEnum(0), fmt.Errorf("not a valid ProductTypeEnum string")
}


func ProductTypeEnumPtr(v ProductTypeEnum) *ProductTypeEnum { return &v }

func (p ProductTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ProductTypeEnum) UnmarshalText(text []byte) error {
q, err := ProductTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ProductTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ProductTypeEnum(v)
return nil
}

func (p * ProductTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PromoMissionTypeEnum int64
const (
  PromoMissionTypeEnum_DEFAULT PromoMissionTypeEnum = 1
  PromoMissionTypeEnum_VIEW_VIDEO PromoMissionTypeEnum = 2
)

func (p PromoMissionTypeEnum) String() string {
  switch p {
  case PromoMissionTypeEnum_DEFAULT: return "DEFAULT"
  case PromoMissionTypeEnum_VIEW_VIDEO: return "VIEW_VIDEO"
  }
  return "<UNSET>"
}

func PromoMissionTypeEnumFromString(s string) (PromoMissionTypeEnum, error) {
  switch s {
  case "DEFAULT": return PromoMissionTypeEnum_DEFAULT, nil 
  case "VIEW_VIDEO": return PromoMissionTypeEnum_VIEW_VIDEO, nil 
  }
  return PromoMissionTypeEnum(0), fmt.Errorf("not a valid PromoMissionTypeEnum string")
}


func PromoMissionTypeEnumPtr(v PromoMissionTypeEnum) *PromoMissionTypeEnum { return &v }

func (p PromoMissionTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PromoMissionTypeEnum) UnmarshalText(text []byte) error {
q, err := PromoMissionTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PromoMissionTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PromoMissionTypeEnum(v)
return nil
}

func (p * PromoMissionTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ProtoEnum int64
const (
  ProtoEnum_STANDARD ProtoEnum = 1
  ProtoEnum_CONSTELLA ProtoEnum = 2
)

func (p ProtoEnum) String() string {
  switch p {
  case ProtoEnum_STANDARD: return "STANDARD"
  case ProtoEnum_CONSTELLA: return "CONSTELLA"
  }
  return "<UNSET>"
}

func ProtoEnumFromString(s string) (ProtoEnum, error) {
  switch s {
  case "STANDARD": return ProtoEnum_STANDARD, nil 
  case "CONSTELLA": return ProtoEnum_CONSTELLA, nil 
  }
  return ProtoEnum(0), fmt.Errorf("not a valid ProtoEnum string")
}


func ProtoEnumPtr(v ProtoEnum) *ProtoEnum { return &v }

func (p ProtoEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ProtoEnum) UnmarshalText(text []byte) error {
q, err := ProtoEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ProtoEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ProtoEnum(v)
return nil
}

func (p * ProtoEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ThemeResourceTypeEnum int64
const (
  ThemeResourceTypeEnum_STATIC ThemeResourceTypeEnum = 1
  ThemeResourceTypeEnum_ANIMATION ThemeResourceTypeEnum = 2
)

func (p ThemeResourceTypeEnum) String() string {
  switch p {
  case ThemeResourceTypeEnum_STATIC: return "STATIC"
  case ThemeResourceTypeEnum_ANIMATION: return "ANIMATION"
  }
  return "<UNSET>"
}

func ThemeResourceTypeEnumFromString(s string) (ThemeResourceTypeEnum, error) {
  switch s {
  case "STATIC": return ThemeResourceTypeEnum_STATIC, nil 
  case "ANIMATION": return ThemeResourceTypeEnum_ANIMATION, nil 
  }
  return ThemeResourceTypeEnum(0), fmt.Errorf("not a valid ThemeResourceTypeEnum string")
}


func ThemeResourceTypeEnumPtr(v ThemeResourceTypeEnum) *ThemeResourceTypeEnum { return &v }

func (p ThemeResourceTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ThemeResourceTypeEnum) UnmarshalText(text []byte) error {
q, err := ThemeResourceTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ThemeResourceTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ThemeResourceTypeEnum(v)
return nil
}

func (p * ThemeResourceTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PromoTypeEnum int64
const (
  PromoTypeEnum_CARRIER PromoTypeEnum = 1
  PromoTypeEnum_BUDDY PromoTypeEnum = 2
  PromoTypeEnum_INSTALL PromoTypeEnum = 3
  PromoTypeEnum_MISSION PromoTypeEnum = 4
  PromoTypeEnum_MUSTBUY PromoTypeEnum = 5
)

func (p PromoTypeEnum) String() string {
  switch p {
  case PromoTypeEnum_CARRIER: return "CARRIER"
  case PromoTypeEnum_BUDDY: return "BUDDY"
  case PromoTypeEnum_INSTALL: return "INSTALL"
  case PromoTypeEnum_MISSION: return "MISSION"
  case PromoTypeEnum_MUSTBUY: return "MUSTBUY"
  }
  return "<UNSET>"
}

func PromoTypeEnumFromString(s string) (PromoTypeEnum, error) {
  switch s {
  case "CARRIER": return PromoTypeEnum_CARRIER, nil 
  case "BUDDY": return PromoTypeEnum_BUDDY, nil 
  case "INSTALL": return PromoTypeEnum_INSTALL, nil 
  case "MISSION": return PromoTypeEnum_MISSION, nil 
  case "MUSTBUY": return PromoTypeEnum_MUSTBUY, nil 
  }
  return PromoTypeEnum(0), fmt.Errorf("not a valid PromoTypeEnum string")
}


func PromoTypeEnumPtr(v PromoTypeEnum) *PromoTypeEnum { return &v }

func (p PromoTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PromoTypeEnum) UnmarshalText(text []byte) error {
q, err := PromoTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PromoTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PromoTypeEnum(v)
return nil
}

func (p * PromoTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type StatusEnum int64
const (
  StatusEnum_OK StatusEnum = 0
  StatusEnum_PRODUCT_UNSUPPORTED StatusEnum = 1
  StatusEnum_TEXT_NOT_SPECIFIED StatusEnum = 2
  StatusEnum_TEXT_STYLE_UNAVAILABLE StatusEnum = 3
  StatusEnum_CHARACTER_COUNT_LIMIT_EXCEEDED StatusEnum = 4
  StatusEnum_CONTAINS_INVALID_WORD StatusEnum = 5
)

func (p StatusEnum) String() string {
  switch p {
  case StatusEnum_OK: return "OK"
  case StatusEnum_PRODUCT_UNSUPPORTED: return "PRODUCT_UNSUPPORTED"
  case StatusEnum_TEXT_NOT_SPECIFIED: return "TEXT_NOT_SPECIFIED"
  case StatusEnum_TEXT_STYLE_UNAVAILABLE: return "TEXT_STYLE_UNAVAILABLE"
  case StatusEnum_CHARACTER_COUNT_LIMIT_EXCEEDED: return "CHARACTER_COUNT_LIMIT_EXCEEDED"
  case StatusEnum_CONTAINS_INVALID_WORD: return "CONTAINS_INVALID_WORD"
  }
  return "<UNSET>"
}

func StatusEnumFromString(s string) (StatusEnum, error) {
  switch s {
  case "OK": return StatusEnum_OK, nil 
  case "PRODUCT_UNSUPPORTED": return StatusEnum_PRODUCT_UNSUPPORTED, nil 
  case "TEXT_NOT_SPECIFIED": return StatusEnum_TEXT_NOT_SPECIFIED, nil 
  case "TEXT_STYLE_UNAVAILABLE": return StatusEnum_TEXT_STYLE_UNAVAILABLE, nil 
  case "CHARACTER_COUNT_LIMIT_EXCEEDED": return StatusEnum_CHARACTER_COUNT_LIMIT_EXCEEDED, nil 
  case "CONTAINS_INVALID_WORD": return StatusEnum_CONTAINS_INVALID_WORD, nil 
  }
  return StatusEnum(0), fmt.Errorf("not a valid StatusEnum string")
}


func StatusEnumPtr(v StatusEnum) *StatusEnum { return &v }

func (p StatusEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *StatusEnum) UnmarshalText(text []byte) error {
q, err := StatusEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *StatusEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = StatusEnum(v)
return nil
}

func (p * StatusEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ToTypeEnum int64
const (
  ToTypeEnum_USER ToTypeEnum = 0
  ToTypeEnum_ROOM ToTypeEnum = 1
  ToTypeEnum_GROUP ToTypeEnum = 2
  ToTypeEnum_SQUARE ToTypeEnum = 3
  ToTypeEnum_SQUARE_CHAT ToTypeEnum = 4
  ToTypeEnum_SQUARE_MEMBER ToTypeEnum = 5
  ToTypeEnum_BOT ToTypeEnum = 6
)

func (p ToTypeEnum) String() string {
  switch p {
  case ToTypeEnum_USER: return "USER"
  case ToTypeEnum_ROOM: return "ROOM"
  case ToTypeEnum_GROUP: return "GROUP"
  case ToTypeEnum_SQUARE: return "SQUARE"
  case ToTypeEnum_SQUARE_CHAT: return "SQUARE_CHAT"
  case ToTypeEnum_SQUARE_MEMBER: return "SQUARE_MEMBER"
  case ToTypeEnum_BOT: return "BOT"
  }
  return "<UNSET>"
}

func ToTypeEnumFromString(s string) (ToTypeEnum, error) {
  switch s {
  case "USER": return ToTypeEnum_USER, nil 
  case "ROOM": return ToTypeEnum_ROOM, nil 
  case "GROUP": return ToTypeEnum_GROUP, nil 
  case "SQUARE": return ToTypeEnum_SQUARE, nil 
  case "SQUARE_CHAT": return ToTypeEnum_SQUARE_CHAT, nil 
  case "SQUARE_MEMBER": return ToTypeEnum_SQUARE_MEMBER, nil 
  case "BOT": return ToTypeEnum_BOT, nil 
  }
  return ToTypeEnum(0), fmt.Errorf("not a valid ToTypeEnum string")
}


func ToTypeEnumPtr(v ToTypeEnum) *ToTypeEnum { return &v }

func (p ToTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ToTypeEnum) UnmarshalText(text []byte) error {
q, err := ToTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ToTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ToTypeEnum(v)
return nil
}

func (p * ToTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ShowcaseTypeEnum int64
const (
  ShowcaseTypeEnum_POPULAR ShowcaseTypeEnum = 0
  ShowcaseTypeEnum_NEW_RELEASE ShowcaseTypeEnum = 1
  ShowcaseTypeEnum_EVENT ShowcaseTypeEnum = 2
  ShowcaseTypeEnum_RECOMMENDED ShowcaseTypeEnum = 3
  ShowcaseTypeEnum_POPULAR_WEEKLY ShowcaseTypeEnum = 4
  ShowcaseTypeEnum_POPULAR_MONTHLY ShowcaseTypeEnum = 5
  ShowcaseTypeEnum_POPULAR_RECENTLY_PUBLISHED ShowcaseTypeEnum = 6
  ShowcaseTypeEnum_BUDDY ShowcaseTypeEnum = 7
  ShowcaseTypeEnum_EXTRA_EVENT ShowcaseTypeEnum = 8
  ShowcaseTypeEnum_BROWSING_HISTORY ShowcaseTypeEnum = 9
  ShowcaseTypeEnum_POPULAR_TOTAL_SALES ShowcaseTypeEnum = 10
  ShowcaseTypeEnum_NEW_SUBSCRIPTION ShowcaseTypeEnum = 11
  ShowcaseTypeEnum_POPULAR_SUBSCRIPTION_30D ShowcaseTypeEnum = 12
)

func (p ShowcaseTypeEnum) String() string {
  switch p {
  case ShowcaseTypeEnum_POPULAR: return "POPULAR"
  case ShowcaseTypeEnum_NEW_RELEASE: return "NEW_RELEASE"
  case ShowcaseTypeEnum_EVENT: return "EVENT"
  case ShowcaseTypeEnum_RECOMMENDED: return "RECOMMENDED"
  case ShowcaseTypeEnum_POPULAR_WEEKLY: return "POPULAR_WEEKLY"
  case ShowcaseTypeEnum_POPULAR_MONTHLY: return "POPULAR_MONTHLY"
  case ShowcaseTypeEnum_POPULAR_RECENTLY_PUBLISHED: return "POPULAR_RECENTLY_PUBLISHED"
  case ShowcaseTypeEnum_BUDDY: return "BUDDY"
  case ShowcaseTypeEnum_EXTRA_EVENT: return "EXTRA_EVENT"
  case ShowcaseTypeEnum_BROWSING_HISTORY: return "BROWSING_HISTORY"
  case ShowcaseTypeEnum_POPULAR_TOTAL_SALES: return "POPULAR_TOTAL_SALES"
  case ShowcaseTypeEnum_NEW_SUBSCRIPTION: return "NEW_SUBSCRIPTION"
  case ShowcaseTypeEnum_POPULAR_SUBSCRIPTION_30D: return "POPULAR_SUBSCRIPTION_30D"
  }
  return "<UNSET>"
}

func ShowcaseTypeEnumFromString(s string) (ShowcaseTypeEnum, error) {
  switch s {
  case "POPULAR": return ShowcaseTypeEnum_POPULAR, nil 
  case "NEW_RELEASE": return ShowcaseTypeEnum_NEW_RELEASE, nil 
  case "EVENT": return ShowcaseTypeEnum_EVENT, nil 
  case "RECOMMENDED": return ShowcaseTypeEnum_RECOMMENDED, nil 
  case "POPULAR_WEEKLY": return ShowcaseTypeEnum_POPULAR_WEEKLY, nil 
  case "POPULAR_MONTHLY": return ShowcaseTypeEnum_POPULAR_MONTHLY, nil 
  case "POPULAR_RECENTLY_PUBLISHED": return ShowcaseTypeEnum_POPULAR_RECENTLY_PUBLISHED, nil 
  case "BUDDY": return ShowcaseTypeEnum_BUDDY, nil 
  case "EXTRA_EVENT": return ShowcaseTypeEnum_EXTRA_EVENT, nil 
  case "BROWSING_HISTORY": return ShowcaseTypeEnum_BROWSING_HISTORY, nil 
  case "POPULAR_TOTAL_SALES": return ShowcaseTypeEnum_POPULAR_TOTAL_SALES, nil 
  case "NEW_SUBSCRIPTION": return ShowcaseTypeEnum_NEW_SUBSCRIPTION, nil 
  case "POPULAR_SUBSCRIPTION_30D": return ShowcaseTypeEnum_POPULAR_SUBSCRIPTION_30D, nil 
  }
  return ShowcaseTypeEnum(0), fmt.Errorf("not a valid ShowcaseTypeEnum string")
}


func ShowcaseTypeEnumPtr(v ShowcaseTypeEnum) *ShowcaseTypeEnum { return &v }

func (p ShowcaseTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ShowcaseTypeEnum) UnmarshalText(text []byte) error {
q, err := ShowcaseTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ShowcaseTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ShowcaseTypeEnum(v)
return nil
}

func (p * ShowcaseTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContentTypeEnum int64
const (
  ContentTypeEnum_NONE ContentTypeEnum = 0
  ContentTypeEnum_IMAGE ContentTypeEnum = 1
  ContentTypeEnum_VIDEO ContentTypeEnum = 2
  ContentTypeEnum_AUDIO ContentTypeEnum = 3
  ContentTypeEnum_HTML ContentTypeEnum = 4
  ContentTypeEnum_PDF ContentTypeEnum = 5
  ContentTypeEnum_CALL ContentTypeEnum = 6
  ContentTypeEnum_STICKER ContentTypeEnum = 7
  ContentTypeEnum_PRESENCE ContentTypeEnum = 8
  ContentTypeEnum_GIFT ContentTypeEnum = 9
  ContentTypeEnum_GROUPBOARD ContentTypeEnum = 10
  ContentTypeEnum_APPLINK ContentTypeEnum = 11
  ContentTypeEnum_LINK ContentTypeEnum = 12
  ContentTypeEnum_CONTACT ContentTypeEnum = 13
  ContentTypeEnum_FILE ContentTypeEnum = 14
  ContentTypeEnum_LOCATION ContentTypeEnum = 15
  ContentTypeEnum_POSTNOTIFICATION ContentTypeEnum = 16
  ContentTypeEnum_RICH ContentTypeEnum = 17
  ContentTypeEnum_CHATEVENT ContentTypeEnum = 18
  ContentTypeEnum_MUSIC ContentTypeEnum = 19
  ContentTypeEnum_PAYMENT ContentTypeEnum = 20
  ContentTypeEnum_EXTIMAGE ContentTypeEnum = 21
  ContentTypeEnum_FLEX ContentTypeEnum = 22
)

func (p ContentTypeEnum) String() string {
  switch p {
  case ContentTypeEnum_NONE: return "NONE"
  case ContentTypeEnum_IMAGE: return "IMAGE"
  case ContentTypeEnum_VIDEO: return "VIDEO"
  case ContentTypeEnum_AUDIO: return "AUDIO"
  case ContentTypeEnum_HTML: return "HTML"
  case ContentTypeEnum_PDF: return "PDF"
  case ContentTypeEnum_CALL: return "CALL"
  case ContentTypeEnum_STICKER: return "STICKER"
  case ContentTypeEnum_PRESENCE: return "PRESENCE"
  case ContentTypeEnum_GIFT: return "GIFT"
  case ContentTypeEnum_GROUPBOARD: return "GROUPBOARD"
  case ContentTypeEnum_APPLINK: return "APPLINK"
  case ContentTypeEnum_LINK: return "LINK"
  case ContentTypeEnum_CONTACT: return "CONTACT"
  case ContentTypeEnum_FILE: return "FILE"
  case ContentTypeEnum_LOCATION: return "LOCATION"
  case ContentTypeEnum_POSTNOTIFICATION: return "POSTNOTIFICATION"
  case ContentTypeEnum_RICH: return "RICH"
  case ContentTypeEnum_CHATEVENT: return "CHATEVENT"
  case ContentTypeEnum_MUSIC: return "MUSIC"
  case ContentTypeEnum_PAYMENT: return "PAYMENT"
  case ContentTypeEnum_EXTIMAGE: return "EXTIMAGE"
  case ContentTypeEnum_FLEX: return "FLEX"
  }
  return "<UNSET>"
}

func ContentTypeEnumFromString(s string) (ContentTypeEnum, error) {
  switch s {
  case "NONE": return ContentTypeEnum_NONE, nil 
  case "IMAGE": return ContentTypeEnum_IMAGE, nil 
  case "VIDEO": return ContentTypeEnum_VIDEO, nil 
  case "AUDIO": return ContentTypeEnum_AUDIO, nil 
  case "HTML": return ContentTypeEnum_HTML, nil 
  case "PDF": return ContentTypeEnum_PDF, nil 
  case "CALL": return ContentTypeEnum_CALL, nil 
  case "STICKER": return ContentTypeEnum_STICKER, nil 
  case "PRESENCE": return ContentTypeEnum_PRESENCE, nil 
  case "GIFT": return ContentTypeEnum_GIFT, nil 
  case "GROUPBOARD": return ContentTypeEnum_GROUPBOARD, nil 
  case "APPLINK": return ContentTypeEnum_APPLINK, nil 
  case "LINK": return ContentTypeEnum_LINK, nil 
  case "CONTACT": return ContentTypeEnum_CONTACT, nil 
  case "FILE": return ContentTypeEnum_FILE, nil 
  case "LOCATION": return ContentTypeEnum_LOCATION, nil 
  case "POSTNOTIFICATION": return ContentTypeEnum_POSTNOTIFICATION, nil 
  case "RICH": return ContentTypeEnum_RICH, nil 
  case "CHATEVENT": return ContentTypeEnum_CHATEVENT, nil 
  case "MUSIC": return ContentTypeEnum_MUSIC, nil 
  case "PAYMENT": return ContentTypeEnum_PAYMENT, nil 
  case "EXTIMAGE": return ContentTypeEnum_EXTIMAGE, nil 
  case "FLEX": return ContentTypeEnum_FLEX, nil 
  }
  return ContentTypeEnum(0), fmt.Errorf("not a valid ContentTypeEnum string")
}


func ContentTypeEnumPtr(v ContentTypeEnum) *ContentTypeEnum { return &v }

func (p ContentTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContentTypeEnum) UnmarshalText(text []byte) error {
q, err := ContentTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContentTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContentTypeEnum(v)
return nil
}

func (p * ContentTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type RelationTypeEnum int64
const (
  RelationTypeEnum_FORWARD RelationTypeEnum = 0
  RelationTypeEnum_AUTO_REPLY RelationTypeEnum = 1
  RelationTypeEnum_SUBORDINATE RelationTypeEnum = 2
  RelationTypeEnum_REPLY RelationTypeEnum = 3
)

func (p RelationTypeEnum) String() string {
  switch p {
  case RelationTypeEnum_FORWARD: return "FORWARD"
  case RelationTypeEnum_AUTO_REPLY: return "AUTO_REPLY"
  case RelationTypeEnum_SUBORDINATE: return "SUBORDINATE"
  case RelationTypeEnum_REPLY: return "REPLY"
  }
  return "<UNSET>"
}

func RelationTypeEnumFromString(s string) (RelationTypeEnum, error) {
  switch s {
  case "FORWARD": return RelationTypeEnum_FORWARD, nil 
  case "AUTO_REPLY": return RelationTypeEnum_AUTO_REPLY, nil 
  case "SUBORDINATE": return RelationTypeEnum_SUBORDINATE, nil 
  case "REPLY": return RelationTypeEnum_REPLY, nil 
  }
  return RelationTypeEnum(0), fmt.Errorf("not a valid RelationTypeEnum string")
}


func RelationTypeEnumPtr(v RelationTypeEnum) *RelationTypeEnum { return &v }

func (p RelationTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *RelationTypeEnum) UnmarshalText(text []byte) error {
q, err := RelationTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *RelationTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = RelationTypeEnum(v)
return nil
}

func (p * RelationTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type GroupPreferenceAttributeEnum int64
const (
  GroupPreferenceAttributeEnum_INVITATION_TICKET GroupPreferenceAttributeEnum = 1
  GroupPreferenceAttributeEnum_FAVORITE_TIMESTAMP GroupPreferenceAttributeEnum = 2
)

func (p GroupPreferenceAttributeEnum) String() string {
  switch p {
  case GroupPreferenceAttributeEnum_INVITATION_TICKET: return "INVITATION_TICKET"
  case GroupPreferenceAttributeEnum_FAVORITE_TIMESTAMP: return "FAVORITE_TIMESTAMP"
  }
  return "<UNSET>"
}

func GroupPreferenceAttributeEnumFromString(s string) (GroupPreferenceAttributeEnum, error) {
  switch s {
  case "INVITATION_TICKET": return GroupPreferenceAttributeEnum_INVITATION_TICKET, nil 
  case "FAVORITE_TIMESTAMP": return GroupPreferenceAttributeEnum_FAVORITE_TIMESTAMP, nil 
  }
  return GroupPreferenceAttributeEnum(0), fmt.Errorf("not a valid GroupPreferenceAttributeEnum string")
}


func GroupPreferenceAttributeEnumPtr(v GroupPreferenceAttributeEnum) *GroupPreferenceAttributeEnum { return &v }

func (p GroupPreferenceAttributeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *GroupPreferenceAttributeEnum) UnmarshalText(text []byte) error {
q, err := GroupPreferenceAttributeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *GroupPreferenceAttributeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = GroupPreferenceAttributeEnum(v)
return nil
}

func (p * GroupPreferenceAttributeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MessageServiceCodeEnum int64
const (
  MessageServiceCodeEnum_UNKNOWN MessageServiceCodeEnum = 0
  MessageServiceCodeEnum_TALK MessageServiceCodeEnum = 1
  MessageServiceCodeEnum_SQUARE MessageServiceCodeEnum = 2
)

func (p MessageServiceCodeEnum) String() string {
  switch p {
  case MessageServiceCodeEnum_UNKNOWN: return "UNKNOWN"
  case MessageServiceCodeEnum_TALK: return "TALK"
  case MessageServiceCodeEnum_SQUARE: return "SQUARE"
  }
  return "<UNSET>"
}

func MessageServiceCodeEnumFromString(s string) (MessageServiceCodeEnum, error) {
  switch s {
  case "UNKNOWN": return MessageServiceCodeEnum_UNKNOWN, nil 
  case "TALK": return MessageServiceCodeEnum_TALK, nil 
  case "SQUARE": return MessageServiceCodeEnum_SQUARE, nil 
  }
  return MessageServiceCodeEnum(0), fmt.Errorf("not a valid MessageServiceCodeEnum string")
}


func MessageServiceCodeEnumPtr(v MessageServiceCodeEnum) *MessageServiceCodeEnum { return &v }

func (p MessageServiceCodeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MessageServiceCodeEnum) UnmarshalText(text []byte) error {
q, err := MessageServiceCodeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MessageServiceCodeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MessageServiceCodeEnum(v)
return nil
}

func (p * MessageServiceCodeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactTypeEnum int64
const (
  ContactTypeEnum_MID ContactTypeEnum = 0
  ContactTypeEnum_PHONE ContactTypeEnum = 1
  ContactTypeEnum_EMAIL ContactTypeEnum = 2
  ContactTypeEnum_USERID ContactTypeEnum = 3
  ContactTypeEnum_PROXIMITY ContactTypeEnum = 4
  ContactTypeEnum_GROUP ContactTypeEnum = 5
  ContactTypeEnum_USER ContactTypeEnum = 6
  ContactTypeEnum_QRCODE ContactTypeEnum = 7
  ContactTypeEnum_PROMOTION_BOT ContactTypeEnum = 8
  ContactTypeEnum_CONTACT_MESSAGE ContactTypeEnum = 9
  ContactTypeEnum_FRIEND_REQUEST ContactTypeEnum = 10
  ContactTypeEnum_REPAIR ContactTypeEnum = 128
  ContactTypeEnum_FACEBOOK ContactTypeEnum = 2305
  ContactTypeEnum_SINA ContactTypeEnum = 2306
  ContactTypeEnum_RENREN ContactTypeEnum = 2307
  ContactTypeEnum_FEIXIN ContactTypeEnum = 2308
  ContactTypeEnum_BBM ContactTypeEnum = 2309
  ContactTypeEnum_BEACON ContactTypeEnum = 11
)

func (p ContactTypeEnum) String() string {
  switch p {
  case ContactTypeEnum_MID: return "MID"
  case ContactTypeEnum_PHONE: return "PHONE"
  case ContactTypeEnum_EMAIL: return "EMAIL"
  case ContactTypeEnum_USERID: return "USERID"
  case ContactTypeEnum_PROXIMITY: return "PROXIMITY"
  case ContactTypeEnum_GROUP: return "GROUP"
  case ContactTypeEnum_USER: return "USER"
  case ContactTypeEnum_QRCODE: return "QRCODE"
  case ContactTypeEnum_PROMOTION_BOT: return "PROMOTION_BOT"
  case ContactTypeEnum_CONTACT_MESSAGE: return "CONTACT_MESSAGE"
  case ContactTypeEnum_FRIEND_REQUEST: return "FRIEND_REQUEST"
  case ContactTypeEnum_REPAIR: return "REPAIR"
  case ContactTypeEnum_FACEBOOK: return "FACEBOOK"
  case ContactTypeEnum_SINA: return "SINA"
  case ContactTypeEnum_RENREN: return "RENREN"
  case ContactTypeEnum_FEIXIN: return "FEIXIN"
  case ContactTypeEnum_BBM: return "BBM"
  case ContactTypeEnum_BEACON: return "BEACON"
  }
  return "<UNSET>"
}

func ContactTypeEnumFromString(s string) (ContactTypeEnum, error) {
  switch s {
  case "MID": return ContactTypeEnum_MID, nil 
  case "PHONE": return ContactTypeEnum_PHONE, nil 
  case "EMAIL": return ContactTypeEnum_EMAIL, nil 
  case "USERID": return ContactTypeEnum_USERID, nil 
  case "PROXIMITY": return ContactTypeEnum_PROXIMITY, nil 
  case "GROUP": return ContactTypeEnum_GROUP, nil 
  case "USER": return ContactTypeEnum_USER, nil 
  case "QRCODE": return ContactTypeEnum_QRCODE, nil 
  case "PROMOTION_BOT": return ContactTypeEnum_PROMOTION_BOT, nil 
  case "CONTACT_MESSAGE": return ContactTypeEnum_CONTACT_MESSAGE, nil 
  case "FRIEND_REQUEST": return ContactTypeEnum_FRIEND_REQUEST, nil 
  case "REPAIR": return ContactTypeEnum_REPAIR, nil 
  case "FACEBOOK": return ContactTypeEnum_FACEBOOK, nil 
  case "SINA": return ContactTypeEnum_SINA, nil 
  case "RENREN": return ContactTypeEnum_RENREN, nil 
  case "FEIXIN": return ContactTypeEnum_FEIXIN, nil 
  case "BBM": return ContactTypeEnum_BBM, nil 
  case "BEACON": return ContactTypeEnum_BEACON, nil 
  }
  return ContactTypeEnum(0), fmt.Errorf("not a valid ContactTypeEnum string")
}


func ContactTypeEnumPtr(v ContactTypeEnum) *ContactTypeEnum { return &v }

func (p ContactTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactTypeEnum) UnmarshalText(text []byte) error {
q, err := ContactTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactTypeEnum(v)
return nil
}

func (p * ContactTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactStatusEnum int64
const (
  ContactStatusEnum_UNSPECIFIED ContactStatusEnum = 0
  ContactStatusEnum_FRIEND ContactStatusEnum = 1
  ContactStatusEnum_FRIEND_BLOCKED ContactStatusEnum = 2
  ContactStatusEnum_RECOMMEND ContactStatusEnum = 3
  ContactStatusEnum_RECOMMEND_BLOCKED ContactStatusEnum = 4
  ContactStatusEnum_DELETED ContactStatusEnum = 5
  ContactStatusEnum_DELETED_BLOCKED ContactStatusEnum = 6
)

func (p ContactStatusEnum) String() string {
  switch p {
  case ContactStatusEnum_UNSPECIFIED: return "UNSPECIFIED"
  case ContactStatusEnum_FRIEND: return "FRIEND"
  case ContactStatusEnum_FRIEND_BLOCKED: return "FRIEND_BLOCKED"
  case ContactStatusEnum_RECOMMEND: return "RECOMMEND"
  case ContactStatusEnum_RECOMMEND_BLOCKED: return "RECOMMEND_BLOCKED"
  case ContactStatusEnum_DELETED: return "DELETED"
  case ContactStatusEnum_DELETED_BLOCKED: return "DELETED_BLOCKED"
  }
  return "<UNSET>"
}

func ContactStatusEnumFromString(s string) (ContactStatusEnum, error) {
  switch s {
  case "UNSPECIFIED": return ContactStatusEnum_UNSPECIFIED, nil 
  case "FRIEND": return ContactStatusEnum_FRIEND, nil 
  case "FRIEND_BLOCKED": return ContactStatusEnum_FRIEND_BLOCKED, nil 
  case "RECOMMEND": return ContactStatusEnum_RECOMMEND, nil 
  case "RECOMMEND_BLOCKED": return ContactStatusEnum_RECOMMEND_BLOCKED, nil 
  case "DELETED": return ContactStatusEnum_DELETED, nil 
  case "DELETED_BLOCKED": return ContactStatusEnum_DELETED_BLOCKED, nil 
  }
  return ContactStatusEnum(0), fmt.Errorf("not a valid ContactStatusEnum string")
}


func ContactStatusEnumPtr(v ContactStatusEnum) *ContactStatusEnum { return &v }

func (p ContactStatusEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactStatusEnum) UnmarshalText(text []byte) error {
q, err := ContactStatusEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactStatusEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactStatusEnum(v)
return nil
}

func (p * ContactStatusEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactRelationEnum int64
const (
  ContactRelationEnum_ONEWAY ContactRelationEnum = 0
  ContactRelationEnum_BOTH ContactRelationEnum = 1
  ContactRelationEnum_NOT_REGISTERED ContactRelationEnum = 2
)

func (p ContactRelationEnum) String() string {
  switch p {
  case ContactRelationEnum_ONEWAY: return "ONEWAY"
  case ContactRelationEnum_BOTH: return "BOTH"
  case ContactRelationEnum_NOT_REGISTERED: return "NOT_REGISTERED"
  }
  return "<UNSET>"
}

func ContactRelationEnumFromString(s string) (ContactRelationEnum, error) {
  switch s {
  case "ONEWAY": return ContactRelationEnum_ONEWAY, nil 
  case "BOTH": return ContactRelationEnum_BOTH, nil 
  case "NOT_REGISTERED": return ContactRelationEnum_NOT_REGISTERED, nil 
  }
  return ContactRelationEnum(0), fmt.Errorf("not a valid ContactRelationEnum string")
}


func ContactRelationEnumPtr(v ContactRelationEnum) *ContactRelationEnum { return &v }

func (p ContactRelationEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactRelationEnum) UnmarshalText(text []byte) error {
q, err := ContactRelationEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactRelationEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactRelationEnum(v)
return nil
}

func (p * ContactRelationEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type GroupCallMediaTypeEnum int64
const (
  GroupCallMediaTypeEnum_AUDIO GroupCallMediaTypeEnum = 1
  GroupCallMediaTypeEnum_VIDEO GroupCallMediaTypeEnum = 2
  GroupCallMediaTypeEnum_LIVE GroupCallMediaTypeEnum = 3
)

func (p GroupCallMediaTypeEnum) String() string {
  switch p {
  case GroupCallMediaTypeEnum_AUDIO: return "AUDIO"
  case GroupCallMediaTypeEnum_VIDEO: return "VIDEO"
  case GroupCallMediaTypeEnum_LIVE: return "LIVE"
  }
  return "<UNSET>"
}

func GroupCallMediaTypeEnumFromString(s string) (GroupCallMediaTypeEnum, error) {
  switch s {
  case "AUDIO": return GroupCallMediaTypeEnum_AUDIO, nil 
  case "VIDEO": return GroupCallMediaTypeEnum_VIDEO, nil 
  case "LIVE": return GroupCallMediaTypeEnum_LIVE, nil 
  }
  return GroupCallMediaTypeEnum(0), fmt.Errorf("not a valid GroupCallMediaTypeEnum string")
}


func GroupCallMediaTypeEnumPtr(v GroupCallMediaTypeEnum) *GroupCallMediaTypeEnum { return &v }

func (p GroupCallMediaTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *GroupCallMediaTypeEnum) UnmarshalText(text []byte) error {
q, err := GroupCallMediaTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *GroupCallMediaTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = GroupCallMediaTypeEnum(v)
return nil
}

func (p * GroupCallMediaTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type IdentityProviderEnum int64
const (
  IdentityProviderEnum_UNKNOWN IdentityProviderEnum = 0
  IdentityProviderEnum_LINE IdentityProviderEnum = 1
  IdentityProviderEnum_NAVER_KR IdentityProviderEnum = 2
  IdentityProviderEnum_LINE_PHONE IdentityProviderEnum = 3
)

func (p IdentityProviderEnum) String() string {
  switch p {
  case IdentityProviderEnum_UNKNOWN: return "UNKNOWN"
  case IdentityProviderEnum_LINE: return "LINE"
  case IdentityProviderEnum_NAVER_KR: return "NAVER_KR"
  case IdentityProviderEnum_LINE_PHONE: return "LINE_PHONE"
  }
  return "<UNSET>"
}

func IdentityProviderEnumFromString(s string) (IdentityProviderEnum, error) {
  switch s {
  case "UNKNOWN": return IdentityProviderEnum_UNKNOWN, nil 
  case "LINE": return IdentityProviderEnum_LINE, nil 
  case "NAVER_KR": return IdentityProviderEnum_NAVER_KR, nil 
  case "LINE_PHONE": return IdentityProviderEnum_LINE_PHONE, nil 
  }
  return IdentityProviderEnum(0), fmt.Errorf("not a valid IdentityProviderEnum string")
}


func IdentityProviderEnumPtr(v IdentityProviderEnum) *IdentityProviderEnum { return &v }

func (p IdentityProviderEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *IdentityProviderEnum) UnmarshalText(text []byte) error {
q, err := IdentityProviderEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *IdentityProviderEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = IdentityProviderEnum(v)
return nil
}

func (p * IdentityProviderEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SnsIdTypeEnum int64
const (
  SnsIdTypeEnum_FACEBOOK SnsIdTypeEnum = 1
  SnsIdTypeEnum_SINA SnsIdTypeEnum = 2
  SnsIdTypeEnum_RENREN SnsIdTypeEnum = 3
  SnsIdTypeEnum_FEIXIN SnsIdTypeEnum = 4
  SnsIdTypeEnum_BBM SnsIdTypeEnum = 5
)

func (p SnsIdTypeEnum) String() string {
  switch p {
  case SnsIdTypeEnum_FACEBOOK: return "FACEBOOK"
  case SnsIdTypeEnum_SINA: return "SINA"
  case SnsIdTypeEnum_RENREN: return "RENREN"
  case SnsIdTypeEnum_FEIXIN: return "FEIXIN"
  case SnsIdTypeEnum_BBM: return "BBM"
  }
  return "<UNSET>"
}

func SnsIdTypeEnumFromString(s string) (SnsIdTypeEnum, error) {
  switch s {
  case "FACEBOOK": return SnsIdTypeEnum_FACEBOOK, nil 
  case "SINA": return SnsIdTypeEnum_SINA, nil 
  case "RENREN": return SnsIdTypeEnum_RENREN, nil 
  case "FEIXIN": return SnsIdTypeEnum_FEIXIN, nil 
  case "BBM": return SnsIdTypeEnum_BBM, nil 
  }
  return SnsIdTypeEnum(0), fmt.Errorf("not a valid SnsIdTypeEnum string")
}


func SnsIdTypeEnumPtr(v SnsIdTypeEnum) *SnsIdTypeEnum { return &v }

func (p SnsIdTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SnsIdTypeEnum) UnmarshalText(text []byte) error {
q, err := SnsIdTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SnsIdTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SnsIdTypeEnum(v)
return nil
}

func (p * SnsIdTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type CustomModeEnum int64
const (
  CustomModeEnum_PROMOTION_FRIENDS_INVITE CustomModeEnum = 1
  CustomModeEnum_CAPABILITY_SERVER_SIDE_SMS CustomModeEnum = 2
  CustomModeEnum_LINE_CLIENT_ANALYTICS_CONFIGURATION CustomModeEnum = 3
)

func (p CustomModeEnum) String() string {
  switch p {
  case CustomModeEnum_PROMOTION_FRIENDS_INVITE: return "PROMOTION_FRIENDS_INVITE"
  case CustomModeEnum_CAPABILITY_SERVER_SIDE_SMS: return "CAPABILITY_SERVER_SIDE_SMS"
  case CustomModeEnum_LINE_CLIENT_ANALYTICS_CONFIGURATION: return "LINE_CLIENT_ANALYTICS_CONFIGURATION"
  }
  return "<UNSET>"
}

func CustomModeEnumFromString(s string) (CustomModeEnum, error) {
  switch s {
  case "PROMOTION_FRIENDS_INVITE": return CustomModeEnum_PROMOTION_FRIENDS_INVITE, nil 
  case "CAPABILITY_SERVER_SIDE_SMS": return CustomModeEnum_CAPABILITY_SERVER_SIDE_SMS, nil 
  case "LINE_CLIENT_ANALYTICS_CONFIGURATION": return CustomModeEnum_LINE_CLIENT_ANALYTICS_CONFIGURATION, nil 
  }
  return CustomModeEnum(0), fmt.Errorf("not a valid CustomModeEnum string")
}


func CustomModeEnumPtr(v CustomModeEnum) *CustomModeEnum { return &v }

func (p CustomModeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CustomModeEnum) UnmarshalText(text []byte) error {
q, err := CustomModeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CustomModeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CustomModeEnum(v)
return nil
}

func (p * CustomModeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ProfileAttributeEnum int64
const (
  ProfileAttributeEnum_ALL ProfileAttributeEnum = 511
  ProfileAttributeEnum_EMAIL ProfileAttributeEnum = 1
  ProfileAttributeEnum_DISPLAY_NAME ProfileAttributeEnum = 2
  ProfileAttributeEnum_PHONETIC_NAME ProfileAttributeEnum = 4
  ProfileAttributeEnum_PICTURE ProfileAttributeEnum = 8
  ProfileAttributeEnum_STATUS_MESSAGE ProfileAttributeEnum = 16
  ProfileAttributeEnum_ALLOW_SEARCH_BY_USERID ProfileAttributeEnum = 32
  ProfileAttributeEnum_ALLOW_SEARCH_BY_EMAIL ProfileAttributeEnum = 64
  ProfileAttributeEnum_BUDDY_STATUS ProfileAttributeEnum = 128
  ProfileAttributeEnum_MUSIC_PROFILE ProfileAttributeEnum = 256
)

func (p ProfileAttributeEnum) String() string {
  switch p {
  case ProfileAttributeEnum_ALL: return "ALL"
  case ProfileAttributeEnum_EMAIL: return "EMAIL"
  case ProfileAttributeEnum_DISPLAY_NAME: return "DISPLAY_NAME"
  case ProfileAttributeEnum_PHONETIC_NAME: return "PHONETIC_NAME"
  case ProfileAttributeEnum_PICTURE: return "PICTURE"
  case ProfileAttributeEnum_STATUS_MESSAGE: return "STATUS_MESSAGE"
  case ProfileAttributeEnum_ALLOW_SEARCH_BY_USERID: return "ALLOW_SEARCH_BY_USERID"
  case ProfileAttributeEnum_ALLOW_SEARCH_BY_EMAIL: return "ALLOW_SEARCH_BY_EMAIL"
  case ProfileAttributeEnum_BUDDY_STATUS: return "BUDDY_STATUS"
  case ProfileAttributeEnum_MUSIC_PROFILE: return "MUSIC_PROFILE"
  }
  return "<UNSET>"
}

func ProfileAttributeEnumFromString(s string) (ProfileAttributeEnum, error) {
  switch s {
  case "ALL": return ProfileAttributeEnum_ALL, nil 
  case "EMAIL": return ProfileAttributeEnum_EMAIL, nil 
  case "DISPLAY_NAME": return ProfileAttributeEnum_DISPLAY_NAME, nil 
  case "PHONETIC_NAME": return ProfileAttributeEnum_PHONETIC_NAME, nil 
  case "PICTURE": return ProfileAttributeEnum_PICTURE, nil 
  case "STATUS_MESSAGE": return ProfileAttributeEnum_STATUS_MESSAGE, nil 
  case "ALLOW_SEARCH_BY_USERID": return ProfileAttributeEnum_ALLOW_SEARCH_BY_USERID, nil 
  case "ALLOW_SEARCH_BY_EMAIL": return ProfileAttributeEnum_ALLOW_SEARCH_BY_EMAIL, nil 
  case "BUDDY_STATUS": return ProfileAttributeEnum_BUDDY_STATUS, nil 
  case "MUSIC_PROFILE": return ProfileAttributeEnum_MUSIC_PROFILE, nil 
  }
  return ProfileAttributeEnum(0), fmt.Errorf("not a valid ProfileAttributeEnum string")
}


func ProfileAttributeEnumPtr(v ProfileAttributeEnum) *ProfileAttributeEnum { return &v }

func (p ProfileAttributeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ProfileAttributeEnum) UnmarshalText(text []byte) error {
q, err := ProfileAttributeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ProfileAttributeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ProfileAttributeEnum(v)
return nil
}

func (p * ProfileAttributeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OpTypeEnum int64
const (
  OpTypeEnum_END_OF_OPERATION OpTypeEnum = 0
  OpTypeEnum_UPDATE_PROFILE OpTypeEnum = 1
  OpTypeEnum_UPDATE_SETTINGS OpTypeEnum = 36
  OpTypeEnum_NOTIFIED_UPDATE_PROFILE OpTypeEnum = 2
  OpTypeEnum_REGISTER_USERID OpTypeEnum = 3
  OpTypeEnum_ADD_CONTACT OpTypeEnum = 4
  OpTypeEnum_NOTIFIED_ADD_CONTACT OpTypeEnum = 5
  OpTypeEnum_BLOCK_CONTACT OpTypeEnum = 6
  OpTypeEnum_UNBLOCK_CONTACT OpTypeEnum = 7
  OpTypeEnum_NOTIFIED_RECOMMEND_CONTACT OpTypeEnum = 8
  OpTypeEnum_CREATE_GROUP OpTypeEnum = 9
  OpTypeEnum_UPDATE_GROUP OpTypeEnum = 10
  OpTypeEnum_NOTIFIED_UPDATE_GROUP OpTypeEnum = 11
  OpTypeEnum_INVITE_INTO_GROUP OpTypeEnum = 12
  OpTypeEnum_NOTIFIED_INVITE_INTO_GROUP OpTypeEnum = 13
  OpTypeEnum_CANCEL_INVITATION_GROUP OpTypeEnum = 31
  OpTypeEnum_NOTIFIED_CANCEL_INVITATION_GROUP OpTypeEnum = 32
  OpTypeEnum_LEAVE_GROUP OpTypeEnum = 14
  OpTypeEnum_NOTIFIED_LEAVE_GROUP OpTypeEnum = 15
  OpTypeEnum_ACCEPT_GROUP_INVITATION OpTypeEnum = 16
  OpTypeEnum_NOTIFIED_ACCEPT_GROUP_INVITATION OpTypeEnum = 17
  OpTypeEnum_REJECT_GROUP_INVITATION OpTypeEnum = 34
  OpTypeEnum_NOTIFIED_REJECT_GROUP_INVITATION OpTypeEnum = 35
  OpTypeEnum_KICKOUT_FROM_GROUP OpTypeEnum = 18
  OpTypeEnum_NOTIFIED_KICKOUT_FROM_GROUP OpTypeEnum = 19
  OpTypeEnum_CREATE_ROOM OpTypeEnum = 20
  OpTypeEnum_INVITE_INTO_ROOM OpTypeEnum = 21
  OpTypeEnum_NOTIFIED_INVITE_INTO_ROOM OpTypeEnum = 22
  OpTypeEnum_LEAVE_ROOM OpTypeEnum = 23
  OpTypeEnum_NOTIFIED_LEAVE_ROOM OpTypeEnum = 24
  OpTypeEnum_SEND_MESSAGE OpTypeEnum = 25
  OpTypeEnum_RECEIVE_MESSAGE OpTypeEnum = 26
  OpTypeEnum_SEND_MESSAGE_RECEIPT OpTypeEnum = 27
  OpTypeEnum_RECEIVE_MESSAGE_RECEIPT OpTypeEnum = 28
  OpTypeEnum_SEND_CONTENT_RECEIPT OpTypeEnum = 29
  OpTypeEnum_RECEIVE_ANNOUNCEMENT OpTypeEnum = 30
  OpTypeEnum_NOTIFIED_UNREGISTER_USER OpTypeEnum = 33
  OpTypeEnum_INVITE_VIA_EMAIL OpTypeEnum = 38
  OpTypeEnum_NOTIFIED_REGISTER_USER OpTypeEnum = 37
  OpTypeEnum_NOTIFIED_REQUEST_RECOVERY OpTypeEnum = 39
  OpTypeEnum_SEND_CHAT_CHECKED OpTypeEnum = 40
  OpTypeEnum_SEND_CHAT_REMOVED OpTypeEnum = 41
  OpTypeEnum_NOTIFIED_FORCE_SYNC OpTypeEnum = 42
  OpTypeEnum_SEND_CONTENT OpTypeEnum = 43
  OpTypeEnum_SEND_MESSAGE_MYHOME OpTypeEnum = 44
  OpTypeEnum_NOTIFIED_UPDATE_CONTENT_PREVIEW OpTypeEnum = 45
  OpTypeEnum_REMOVE_ALL_MESSAGES OpTypeEnum = 46
  OpTypeEnum_NOTIFIED_UPDATE_PURCHASES OpTypeEnum = 47
  OpTypeEnum_DUMMY OpTypeEnum = 48
  OpTypeEnum_UPDATE_CONTACT OpTypeEnum = 49
  OpTypeEnum_NOTIFIED_RECEIVED_CALL OpTypeEnum = 50
  OpTypeEnum_CANCEL_CALL OpTypeEnum = 51
  OpTypeEnum_NOTIFIED_REDIRECT OpTypeEnum = 52
  OpTypeEnum_NOTIFIED_CHANNEL_SYNC OpTypeEnum = 53
  OpTypeEnum_FAILED_SEND_MESSAGE OpTypeEnum = 54
  OpTypeEnum_NOTIFIED_READ_MESSAGE OpTypeEnum = 55
  OpTypeEnum_FAILED_EMAIL_CONFIRMATION OpTypeEnum = 56
  OpTypeEnum_NOTIFIED_CHAT_CONTENT OpTypeEnum = 58
  OpTypeEnum_NOTIFIED_PUSH_NOTICENTER_ITEM OpTypeEnum = 59
  OpTypeEnum_NOTIFIED_JOIN_CHAT OpTypeEnum = 60
  OpTypeEnum_NOTIFIED_LEAVE_CHAT OpTypeEnum = 61
  OpTypeEnum_NOTIFIED_TYPING OpTypeEnum = 62
  OpTypeEnum_FRIEND_REQUEST_ACCEPTED OpTypeEnum = 63
  OpTypeEnum_DESTROY_MESSAGE OpTypeEnum = 64
  OpTypeEnum_NOTIFIED_DESTROY_MESSAGE OpTypeEnum = 65
  OpTypeEnum_UPDATE_PUBLICKEYCHAIN OpTypeEnum = 66
  OpTypeEnum_NOTIFIED_UPDATE_PUBLICKEYCHAIN OpTypeEnum = 67
  OpTypeEnum_NOTIFIED_BLOCK_CONTACT OpTypeEnum = 68
  OpTypeEnum_NOTIFIED_UNBLOCK_CONTACT OpTypeEnum = 69
  OpTypeEnum_UPDATE_GROUPPREFERENCE OpTypeEnum = 70
  OpTypeEnum_NOTIFIED_PAYMENT_EVENT OpTypeEnum = 71
  OpTypeEnum_REGISTER_E2EE_PUBLICKEY OpTypeEnum = 72
  OpTypeEnum_NOTIFIED_E2EE_KEY_EXCHANGE_REQ OpTypeEnum = 73
  OpTypeEnum_NOTIFIED_E2EE_KEY_EXCHANGE_RESP OpTypeEnum = 74
  OpTypeEnum_NOTIFIED_E2EE_MESSAGE_RESEND_REQ OpTypeEnum = 75
  OpTypeEnum_NOTIFIED_E2EE_MESSAGE_RESEND_RESP OpTypeEnum = 76
  OpTypeEnum_NOTIFIED_E2EE_KEY_UPDATE OpTypeEnum = 77
  OpTypeEnum_NOTIFIED_BUDDY_UPDATE_PROFILE OpTypeEnum = 78
  OpTypeEnum_NOTIFIED_UPDATE_LINEAT_TABS OpTypeEnum = 79
  OpTypeEnum_UPDATE_ROOM OpTypeEnum = 80
  OpTypeEnum_NOTIFIED_BEACON_DETECTED OpTypeEnum = 81
  OpTypeEnum_UPDATE_EXTENDED_PROFILE OpTypeEnum = 82
  OpTypeEnum_ADD_FOLLOW OpTypeEnum = 83
  OpTypeEnum_NOTIFIED_ADD_FOLLOW OpTypeEnum = 84
  OpTypeEnum_DELETE_FOLLOW OpTypeEnum = 85
  OpTypeEnum_NOTIFIED_DELETE_FOLLOW OpTypeEnum = 86
  OpTypeEnum_UPDATE_TIMELINE_SETTINGS OpTypeEnum = 87
  OpTypeEnum_NOTIFIED_FRIEND_REQUEST OpTypeEnum = 88
  OpTypeEnum_UPDATE_RINGBACK_TONE OpTypeEnum = 89
  OpTypeEnum_NOTIFIED_POSTBACK OpTypeEnum = 90
  OpTypeEnum_RECEIVE_READ_WATERMARK OpTypeEnum = 91
  OpTypeEnum_NOTIFIED_MESSAGE_DELIVERED OpTypeEnum = 92
  OpTypeEnum_NOTIFIED_UPDATE_CHAT_BAR OpTypeEnum = 93
  OpTypeEnum_NOTIFIED_CHATAPP_INSTALLED OpTypeEnum = 94
  OpTypeEnum_NOTIFIED_CHATAPP_UPDATED OpTypeEnum = 95
  OpTypeEnum_NOTIFIED_CHATAPP_NEW_MARK OpTypeEnum = 96
  OpTypeEnum_NOTIFIED_CHATAPP_DELETED OpTypeEnum = 97
  OpTypeEnum_NOTIFIED_CHATAPP_SYNC OpTypeEnum = 98
  OpTypeEnum_NOTIFIED_UPDATE_MESSAGE OpTypeEnum = 99
  OpTypeEnum_UPDATE_CHATROOMBGM OpTypeEnum = 100
  OpTypeEnum_NOTIFIED_UPDATE_CHATROOMBGM OpTypeEnum = 101
  OpTypeEnum_UPDATE_RINGTONE OpTypeEnum = 102
  OpTypeEnum_CREATE_CHAT OpTypeEnum = 103
  OpTypeEnum_UPDATE_CHAT OpTypeEnum = 104
  OpTypeEnum_NOTIFIED_UPDATE_CHAT OpTypeEnum = 105
  OpTypeEnum_INVITE_INTO_CHAT OpTypeEnum = 106
  OpTypeEnum_NOTIFIED_INVITE_INTO_CHAT OpTypeEnum = 107
  OpTypeEnum_CANCEL_CHAT_INVITATION OpTypeEnum = 108
  OpTypeEnum_NOTIFIED_CANCEL_CHAT_INVITATION OpTypeEnum = 109
  OpTypeEnum_DELETE_SELF_FROM_CHAT OpTypeEnum = 110
  OpTypeEnum_NOTIFIED_DELETE_SELF_FROM_CHAT OpTypeEnum = 111
  OpTypeEnum_ACCEPT_CHAT_INVITATION OpTypeEnum = 112
  OpTypeEnum_NOTIFIED_ACCEPT_CHAT_INVITATION OpTypeEnum = 113
  OpTypeEnum_REJECT_CHAT_INVITATION OpTypeEnum = 114
  OpTypeEnum_NOTIFIED_REJECT_CHAT_INVITATION OpTypeEnum = 115
  OpTypeEnum_DELETE_OTHER_FROM_CHAT OpTypeEnum = 116
  OpTypeEnum_NOTIFIED_DELETE_OTHER_FROM_CHAT OpTypeEnum = 117
  OpTypeEnum_UPDATE_USER_SETTINGS OpTypeEnum = 118
)

func (p OpTypeEnum) String() string {
  switch p {
  case OpTypeEnum_END_OF_OPERATION: return "END_OF_OPERATION"
  case OpTypeEnum_UPDATE_PROFILE: return "UPDATE_PROFILE"
  case OpTypeEnum_UPDATE_SETTINGS: return "UPDATE_SETTINGS"
  case OpTypeEnum_NOTIFIED_UPDATE_PROFILE: return "NOTIFIED_UPDATE_PROFILE"
  case OpTypeEnum_REGISTER_USERID: return "REGISTER_USERID"
  case OpTypeEnum_ADD_CONTACT: return "ADD_CONTACT"
  case OpTypeEnum_NOTIFIED_ADD_CONTACT: return "NOTIFIED_ADD_CONTACT"
  case OpTypeEnum_BLOCK_CONTACT: return "BLOCK_CONTACT"
  case OpTypeEnum_UNBLOCK_CONTACT: return "UNBLOCK_CONTACT"
  case OpTypeEnum_NOTIFIED_RECOMMEND_CONTACT: return "NOTIFIED_RECOMMEND_CONTACT"
  case OpTypeEnum_CREATE_GROUP: return "CREATE_GROUP"
  case OpTypeEnum_UPDATE_GROUP: return "UPDATE_GROUP"
  case OpTypeEnum_NOTIFIED_UPDATE_GROUP: return "NOTIFIED_UPDATE_GROUP"
  case OpTypeEnum_INVITE_INTO_GROUP: return "INVITE_INTO_GROUP"
  case OpTypeEnum_NOTIFIED_INVITE_INTO_GROUP: return "NOTIFIED_INVITE_INTO_GROUP"
  case OpTypeEnum_CANCEL_INVITATION_GROUP: return "CANCEL_INVITATION_GROUP"
  case OpTypeEnum_NOTIFIED_CANCEL_INVITATION_GROUP: return "NOTIFIED_CANCEL_INVITATION_GROUP"
  case OpTypeEnum_LEAVE_GROUP: return "LEAVE_GROUP"
  case OpTypeEnum_NOTIFIED_LEAVE_GROUP: return "NOTIFIED_LEAVE_GROUP"
  case OpTypeEnum_ACCEPT_GROUP_INVITATION: return "ACCEPT_GROUP_INVITATION"
  case OpTypeEnum_NOTIFIED_ACCEPT_GROUP_INVITATION: return "NOTIFIED_ACCEPT_GROUP_INVITATION"
  case OpTypeEnum_REJECT_GROUP_INVITATION: return "REJECT_GROUP_INVITATION"
  case OpTypeEnum_NOTIFIED_REJECT_GROUP_INVITATION: return "NOTIFIED_REJECT_GROUP_INVITATION"
  case OpTypeEnum_KICKOUT_FROM_GROUP: return "KICKOUT_FROM_GROUP"
  case OpTypeEnum_NOTIFIED_KICKOUT_FROM_GROUP: return "NOTIFIED_KICKOUT_FROM_GROUP"
  case OpTypeEnum_CREATE_ROOM: return "CREATE_ROOM"
  case OpTypeEnum_INVITE_INTO_ROOM: return "INVITE_INTO_ROOM"
  case OpTypeEnum_NOTIFIED_INVITE_INTO_ROOM: return "NOTIFIED_INVITE_INTO_ROOM"
  case OpTypeEnum_LEAVE_ROOM: return "LEAVE_ROOM"
  case OpTypeEnum_NOTIFIED_LEAVE_ROOM: return "NOTIFIED_LEAVE_ROOM"
  case OpTypeEnum_SEND_MESSAGE: return "SEND_MESSAGE"
  case OpTypeEnum_RECEIVE_MESSAGE: return "RECEIVE_MESSAGE"
  case OpTypeEnum_SEND_MESSAGE_RECEIPT: return "SEND_MESSAGE_RECEIPT"
  case OpTypeEnum_RECEIVE_MESSAGE_RECEIPT: return "RECEIVE_MESSAGE_RECEIPT"
  case OpTypeEnum_SEND_CONTENT_RECEIPT: return "SEND_CONTENT_RECEIPT"
  case OpTypeEnum_RECEIVE_ANNOUNCEMENT: return "RECEIVE_ANNOUNCEMENT"
  case OpTypeEnum_NOTIFIED_UNREGISTER_USER: return "NOTIFIED_UNREGISTER_USER"
  case OpTypeEnum_INVITE_VIA_EMAIL: return "INVITE_VIA_EMAIL"
  case OpTypeEnum_NOTIFIED_REGISTER_USER: return "NOTIFIED_REGISTER_USER"
  case OpTypeEnum_NOTIFIED_REQUEST_RECOVERY: return "NOTIFIED_REQUEST_RECOVERY"
  case OpTypeEnum_SEND_CHAT_CHECKED: return "SEND_CHAT_CHECKED"
  case OpTypeEnum_SEND_CHAT_REMOVED: return "SEND_CHAT_REMOVED"
  case OpTypeEnum_NOTIFIED_FORCE_SYNC: return "NOTIFIED_FORCE_SYNC"
  case OpTypeEnum_SEND_CONTENT: return "SEND_CONTENT"
  case OpTypeEnum_SEND_MESSAGE_MYHOME: return "SEND_MESSAGE_MYHOME"
  case OpTypeEnum_NOTIFIED_UPDATE_CONTENT_PREVIEW: return "NOTIFIED_UPDATE_CONTENT_PREVIEW"
  case OpTypeEnum_REMOVE_ALL_MESSAGES: return "REMOVE_ALL_MESSAGES"
  case OpTypeEnum_NOTIFIED_UPDATE_PURCHASES: return "NOTIFIED_UPDATE_PURCHASES"
  case OpTypeEnum_DUMMY: return "DUMMY"
  case OpTypeEnum_UPDATE_CONTACT: return "UPDATE_CONTACT"
  case OpTypeEnum_NOTIFIED_RECEIVED_CALL: return "NOTIFIED_RECEIVED_CALL"
  case OpTypeEnum_CANCEL_CALL: return "CANCEL_CALL"
  case OpTypeEnum_NOTIFIED_REDIRECT: return "NOTIFIED_REDIRECT"
  case OpTypeEnum_NOTIFIED_CHANNEL_SYNC: return "NOTIFIED_CHANNEL_SYNC"
  case OpTypeEnum_FAILED_SEND_MESSAGE: return "FAILED_SEND_MESSAGE"
  case OpTypeEnum_NOTIFIED_READ_MESSAGE: return "NOTIFIED_READ_MESSAGE"
  case OpTypeEnum_FAILED_EMAIL_CONFIRMATION: return "FAILED_EMAIL_CONFIRMATION"
  case OpTypeEnum_NOTIFIED_CHAT_CONTENT: return "NOTIFIED_CHAT_CONTENT"
  case OpTypeEnum_NOTIFIED_PUSH_NOTICENTER_ITEM: return "NOTIFIED_PUSH_NOTICENTER_ITEM"
  case OpTypeEnum_NOTIFIED_JOIN_CHAT: return "NOTIFIED_JOIN_CHAT"
  case OpTypeEnum_NOTIFIED_LEAVE_CHAT: return "NOTIFIED_LEAVE_CHAT"
  case OpTypeEnum_NOTIFIED_TYPING: return "NOTIFIED_TYPING"
  case OpTypeEnum_FRIEND_REQUEST_ACCEPTED: return "FRIEND_REQUEST_ACCEPTED"
  case OpTypeEnum_DESTROY_MESSAGE: return "DESTROY_MESSAGE"
  case OpTypeEnum_NOTIFIED_DESTROY_MESSAGE: return "NOTIFIED_DESTROY_MESSAGE"
  case OpTypeEnum_UPDATE_PUBLICKEYCHAIN: return "UPDATE_PUBLICKEYCHAIN"
  case OpTypeEnum_NOTIFIED_UPDATE_PUBLICKEYCHAIN: return "NOTIFIED_UPDATE_PUBLICKEYCHAIN"
  case OpTypeEnum_NOTIFIED_BLOCK_CONTACT: return "NOTIFIED_BLOCK_CONTACT"
  case OpTypeEnum_NOTIFIED_UNBLOCK_CONTACT: return "NOTIFIED_UNBLOCK_CONTACT"
  case OpTypeEnum_UPDATE_GROUPPREFERENCE: return "UPDATE_GROUPPREFERENCE"
  case OpTypeEnum_NOTIFIED_PAYMENT_EVENT: return "NOTIFIED_PAYMENT_EVENT"
  case OpTypeEnum_REGISTER_E2EE_PUBLICKEY: return "REGISTER_E2EE_PUBLICKEY"
  case OpTypeEnum_NOTIFIED_E2EE_KEY_EXCHANGE_REQ: return "NOTIFIED_E2EE_KEY_EXCHANGE_REQ"
  case OpTypeEnum_NOTIFIED_E2EE_KEY_EXCHANGE_RESP: return "NOTIFIED_E2EE_KEY_EXCHANGE_RESP"
  case OpTypeEnum_NOTIFIED_E2EE_MESSAGE_RESEND_REQ: return "NOTIFIED_E2EE_MESSAGE_RESEND_REQ"
  case OpTypeEnum_NOTIFIED_E2EE_MESSAGE_RESEND_RESP: return "NOTIFIED_E2EE_MESSAGE_RESEND_RESP"
  case OpTypeEnum_NOTIFIED_E2EE_KEY_UPDATE: return "NOTIFIED_E2EE_KEY_UPDATE"
  case OpTypeEnum_NOTIFIED_BUDDY_UPDATE_PROFILE: return "NOTIFIED_BUDDY_UPDATE_PROFILE"
  case OpTypeEnum_NOTIFIED_UPDATE_LINEAT_TABS: return "NOTIFIED_UPDATE_LINEAT_TABS"
  case OpTypeEnum_UPDATE_ROOM: return "UPDATE_ROOM"
  case OpTypeEnum_NOTIFIED_BEACON_DETECTED: return "NOTIFIED_BEACON_DETECTED"
  case OpTypeEnum_UPDATE_EXTENDED_PROFILE: return "UPDATE_EXTENDED_PROFILE"
  case OpTypeEnum_ADD_FOLLOW: return "ADD_FOLLOW"
  case OpTypeEnum_NOTIFIED_ADD_FOLLOW: return "NOTIFIED_ADD_FOLLOW"
  case OpTypeEnum_DELETE_FOLLOW: return "DELETE_FOLLOW"
  case OpTypeEnum_NOTIFIED_DELETE_FOLLOW: return "NOTIFIED_DELETE_FOLLOW"
  case OpTypeEnum_UPDATE_TIMELINE_SETTINGS: return "UPDATE_TIMELINE_SETTINGS"
  case OpTypeEnum_NOTIFIED_FRIEND_REQUEST: return "NOTIFIED_FRIEND_REQUEST"
  case OpTypeEnum_UPDATE_RINGBACK_TONE: return "UPDATE_RINGBACK_TONE"
  case OpTypeEnum_NOTIFIED_POSTBACK: return "NOTIFIED_POSTBACK"
  case OpTypeEnum_RECEIVE_READ_WATERMARK: return "RECEIVE_READ_WATERMARK"
  case OpTypeEnum_NOTIFIED_MESSAGE_DELIVERED: return "NOTIFIED_MESSAGE_DELIVERED"
  case OpTypeEnum_NOTIFIED_UPDATE_CHAT_BAR: return "NOTIFIED_UPDATE_CHAT_BAR"
  case OpTypeEnum_NOTIFIED_CHATAPP_INSTALLED: return "NOTIFIED_CHATAPP_INSTALLED"
  case OpTypeEnum_NOTIFIED_CHATAPP_UPDATED: return "NOTIFIED_CHATAPP_UPDATED"
  case OpTypeEnum_NOTIFIED_CHATAPP_NEW_MARK: return "NOTIFIED_CHATAPP_NEW_MARK"
  case OpTypeEnum_NOTIFIED_CHATAPP_DELETED: return "NOTIFIED_CHATAPP_DELETED"
  case OpTypeEnum_NOTIFIED_CHATAPP_SYNC: return "NOTIFIED_CHATAPP_SYNC"
  case OpTypeEnum_NOTIFIED_UPDATE_MESSAGE: return "NOTIFIED_UPDATE_MESSAGE"
  case OpTypeEnum_UPDATE_CHATROOMBGM: return "UPDATE_CHATROOMBGM"
  case OpTypeEnum_NOTIFIED_UPDATE_CHATROOMBGM: return "NOTIFIED_UPDATE_CHATROOMBGM"
  case OpTypeEnum_UPDATE_RINGTONE: return "UPDATE_RINGTONE"
  case OpTypeEnum_CREATE_CHAT: return "CREATE_CHAT"
  case OpTypeEnum_UPDATE_CHAT: return "UPDATE_CHAT"
  case OpTypeEnum_NOTIFIED_UPDATE_CHAT: return "NOTIFIED_UPDATE_CHAT"
  case OpTypeEnum_INVITE_INTO_CHAT: return "INVITE_INTO_CHAT"
  case OpTypeEnum_NOTIFIED_INVITE_INTO_CHAT: return "NOTIFIED_INVITE_INTO_CHAT"
  case OpTypeEnum_CANCEL_CHAT_INVITATION: return "CANCEL_CHAT_INVITATION"
  case OpTypeEnum_NOTIFIED_CANCEL_CHAT_INVITATION: return "NOTIFIED_CANCEL_CHAT_INVITATION"
  case OpTypeEnum_DELETE_SELF_FROM_CHAT: return "DELETE_SELF_FROM_CHAT"
  case OpTypeEnum_NOTIFIED_DELETE_SELF_FROM_CHAT: return "NOTIFIED_DELETE_SELF_FROM_CHAT"
  case OpTypeEnum_ACCEPT_CHAT_INVITATION: return "ACCEPT_CHAT_INVITATION"
  case OpTypeEnum_NOTIFIED_ACCEPT_CHAT_INVITATION: return "NOTIFIED_ACCEPT_CHAT_INVITATION"
  case OpTypeEnum_REJECT_CHAT_INVITATION: return "REJECT_CHAT_INVITATION"
  case OpTypeEnum_NOTIFIED_REJECT_CHAT_INVITATION: return "NOTIFIED_REJECT_CHAT_INVITATION"
  case OpTypeEnum_DELETE_OTHER_FROM_CHAT: return "DELETE_OTHER_FROM_CHAT"
  case OpTypeEnum_NOTIFIED_DELETE_OTHER_FROM_CHAT: return "NOTIFIED_DELETE_OTHER_FROM_CHAT"
  case OpTypeEnum_UPDATE_USER_SETTINGS: return "UPDATE_USER_SETTINGS"
  }
  return "<UNSET>"
}

func OpTypeEnumFromString(s string) (OpTypeEnum, error) {
  switch s {
  case "END_OF_OPERATION": return OpTypeEnum_END_OF_OPERATION, nil 
  case "UPDATE_PROFILE": return OpTypeEnum_UPDATE_PROFILE, nil 
  case "UPDATE_SETTINGS": return OpTypeEnum_UPDATE_SETTINGS, nil 
  case "NOTIFIED_UPDATE_PROFILE": return OpTypeEnum_NOTIFIED_UPDATE_PROFILE, nil 
  case "REGISTER_USERID": return OpTypeEnum_REGISTER_USERID, nil 
  case "ADD_CONTACT": return OpTypeEnum_ADD_CONTACT, nil 
  case "NOTIFIED_ADD_CONTACT": return OpTypeEnum_NOTIFIED_ADD_CONTACT, nil 
  case "BLOCK_CONTACT": return OpTypeEnum_BLOCK_CONTACT, nil 
  case "UNBLOCK_CONTACT": return OpTypeEnum_UNBLOCK_CONTACT, nil 
  case "NOTIFIED_RECOMMEND_CONTACT": return OpTypeEnum_NOTIFIED_RECOMMEND_CONTACT, nil 
  case "CREATE_GROUP": return OpTypeEnum_CREATE_GROUP, nil 
  case "UPDATE_GROUP": return OpTypeEnum_UPDATE_GROUP, nil 
  case "NOTIFIED_UPDATE_GROUP": return OpTypeEnum_NOTIFIED_UPDATE_GROUP, nil 
  case "INVITE_INTO_GROUP": return OpTypeEnum_INVITE_INTO_GROUP, nil 
  case "NOTIFIED_INVITE_INTO_GROUP": return OpTypeEnum_NOTIFIED_INVITE_INTO_GROUP, nil 
  case "CANCEL_INVITATION_GROUP": return OpTypeEnum_CANCEL_INVITATION_GROUP, nil 
  case "NOTIFIED_CANCEL_INVITATION_GROUP": return OpTypeEnum_NOTIFIED_CANCEL_INVITATION_GROUP, nil 
  case "LEAVE_GROUP": return OpTypeEnum_LEAVE_GROUP, nil 
  case "NOTIFIED_LEAVE_GROUP": return OpTypeEnum_NOTIFIED_LEAVE_GROUP, nil 
  case "ACCEPT_GROUP_INVITATION": return OpTypeEnum_ACCEPT_GROUP_INVITATION, nil 
  case "NOTIFIED_ACCEPT_GROUP_INVITATION": return OpTypeEnum_NOTIFIED_ACCEPT_GROUP_INVITATION, nil 
  case "REJECT_GROUP_INVITATION": return OpTypeEnum_REJECT_GROUP_INVITATION, nil 
  case "NOTIFIED_REJECT_GROUP_INVITATION": return OpTypeEnum_NOTIFIED_REJECT_GROUP_INVITATION, nil 
  case "KICKOUT_FROM_GROUP": return OpTypeEnum_KICKOUT_FROM_GROUP, nil 
  case "NOTIFIED_KICKOUT_FROM_GROUP": return OpTypeEnum_NOTIFIED_KICKOUT_FROM_GROUP, nil 
  case "CREATE_ROOM": return OpTypeEnum_CREATE_ROOM, nil 
  case "INVITE_INTO_ROOM": return OpTypeEnum_INVITE_INTO_ROOM, nil 
  case "NOTIFIED_INVITE_INTO_ROOM": return OpTypeEnum_NOTIFIED_INVITE_INTO_ROOM, nil 
  case "LEAVE_ROOM": return OpTypeEnum_LEAVE_ROOM, nil 
  case "NOTIFIED_LEAVE_ROOM": return OpTypeEnum_NOTIFIED_LEAVE_ROOM, nil 
  case "SEND_MESSAGE": return OpTypeEnum_SEND_MESSAGE, nil 
  case "RECEIVE_MESSAGE": return OpTypeEnum_RECEIVE_MESSAGE, nil 
  case "SEND_MESSAGE_RECEIPT": return OpTypeEnum_SEND_MESSAGE_RECEIPT, nil 
  case "RECEIVE_MESSAGE_RECEIPT": return OpTypeEnum_RECEIVE_MESSAGE_RECEIPT, nil 
  case "SEND_CONTENT_RECEIPT": return OpTypeEnum_SEND_CONTENT_RECEIPT, nil 
  case "RECEIVE_ANNOUNCEMENT": return OpTypeEnum_RECEIVE_ANNOUNCEMENT, nil 
  case "NOTIFIED_UNREGISTER_USER": return OpTypeEnum_NOTIFIED_UNREGISTER_USER, nil 
  case "INVITE_VIA_EMAIL": return OpTypeEnum_INVITE_VIA_EMAIL, nil 
  case "NOTIFIED_REGISTER_USER": return OpTypeEnum_NOTIFIED_REGISTER_USER, nil 
  case "NOTIFIED_REQUEST_RECOVERY": return OpTypeEnum_NOTIFIED_REQUEST_RECOVERY, nil 
  case "SEND_CHAT_CHECKED": return OpTypeEnum_SEND_CHAT_CHECKED, nil 
  case "SEND_CHAT_REMOVED": return OpTypeEnum_SEND_CHAT_REMOVED, nil 
  case "NOTIFIED_FORCE_SYNC": return OpTypeEnum_NOTIFIED_FORCE_SYNC, nil 
  case "SEND_CONTENT": return OpTypeEnum_SEND_CONTENT, nil 
  case "SEND_MESSAGE_MYHOME": return OpTypeEnum_SEND_MESSAGE_MYHOME, nil 
  case "NOTIFIED_UPDATE_CONTENT_PREVIEW": return OpTypeEnum_NOTIFIED_UPDATE_CONTENT_PREVIEW, nil 
  case "REMOVE_ALL_MESSAGES": return OpTypeEnum_REMOVE_ALL_MESSAGES, nil 
  case "NOTIFIED_UPDATE_PURCHASES": return OpTypeEnum_NOTIFIED_UPDATE_PURCHASES, nil 
  case "DUMMY": return OpTypeEnum_DUMMY, nil 
  case "UPDATE_CONTACT": return OpTypeEnum_UPDATE_CONTACT, nil 
  case "NOTIFIED_RECEIVED_CALL": return OpTypeEnum_NOTIFIED_RECEIVED_CALL, nil 
  case "CANCEL_CALL": return OpTypeEnum_CANCEL_CALL, nil 
  case "NOTIFIED_REDIRECT": return OpTypeEnum_NOTIFIED_REDIRECT, nil 
  case "NOTIFIED_CHANNEL_SYNC": return OpTypeEnum_NOTIFIED_CHANNEL_SYNC, nil 
  case "FAILED_SEND_MESSAGE": return OpTypeEnum_FAILED_SEND_MESSAGE, nil 
  case "NOTIFIED_READ_MESSAGE": return OpTypeEnum_NOTIFIED_READ_MESSAGE, nil 
  case "FAILED_EMAIL_CONFIRMATION": return OpTypeEnum_FAILED_EMAIL_CONFIRMATION, nil 
  case "NOTIFIED_CHAT_CONTENT": return OpTypeEnum_NOTIFIED_CHAT_CONTENT, nil 
  case "NOTIFIED_PUSH_NOTICENTER_ITEM": return OpTypeEnum_NOTIFIED_PUSH_NOTICENTER_ITEM, nil 
  case "NOTIFIED_JOIN_CHAT": return OpTypeEnum_NOTIFIED_JOIN_CHAT, nil 
  case "NOTIFIED_LEAVE_CHAT": return OpTypeEnum_NOTIFIED_LEAVE_CHAT, nil 
  case "NOTIFIED_TYPING": return OpTypeEnum_NOTIFIED_TYPING, nil 
  case "FRIEND_REQUEST_ACCEPTED": return OpTypeEnum_FRIEND_REQUEST_ACCEPTED, nil 
  case "DESTROY_MESSAGE": return OpTypeEnum_DESTROY_MESSAGE, nil 
  case "NOTIFIED_DESTROY_MESSAGE": return OpTypeEnum_NOTIFIED_DESTROY_MESSAGE, nil 
  case "UPDATE_PUBLICKEYCHAIN": return OpTypeEnum_UPDATE_PUBLICKEYCHAIN, nil 
  case "NOTIFIED_UPDATE_PUBLICKEYCHAIN": return OpTypeEnum_NOTIFIED_UPDATE_PUBLICKEYCHAIN, nil 
  case "NOTIFIED_BLOCK_CONTACT": return OpTypeEnum_NOTIFIED_BLOCK_CONTACT, nil 
  case "NOTIFIED_UNBLOCK_CONTACT": return OpTypeEnum_NOTIFIED_UNBLOCK_CONTACT, nil 
  case "UPDATE_GROUPPREFERENCE": return OpTypeEnum_UPDATE_GROUPPREFERENCE, nil 
  case "NOTIFIED_PAYMENT_EVENT": return OpTypeEnum_NOTIFIED_PAYMENT_EVENT, nil 
  case "REGISTER_E2EE_PUBLICKEY": return OpTypeEnum_REGISTER_E2EE_PUBLICKEY, nil 
  case "NOTIFIED_E2EE_KEY_EXCHANGE_REQ": return OpTypeEnum_NOTIFIED_E2EE_KEY_EXCHANGE_REQ, nil 
  case "NOTIFIED_E2EE_KEY_EXCHANGE_RESP": return OpTypeEnum_NOTIFIED_E2EE_KEY_EXCHANGE_RESP, nil 
  case "NOTIFIED_E2EE_MESSAGE_RESEND_REQ": return OpTypeEnum_NOTIFIED_E2EE_MESSAGE_RESEND_REQ, nil 
  case "NOTIFIED_E2EE_MESSAGE_RESEND_RESP": return OpTypeEnum_NOTIFIED_E2EE_MESSAGE_RESEND_RESP, nil 
  case "NOTIFIED_E2EE_KEY_UPDATE": return OpTypeEnum_NOTIFIED_E2EE_KEY_UPDATE, nil 
  case "NOTIFIED_BUDDY_UPDATE_PROFILE": return OpTypeEnum_NOTIFIED_BUDDY_UPDATE_PROFILE, nil 
  case "NOTIFIED_UPDATE_LINEAT_TABS": return OpTypeEnum_NOTIFIED_UPDATE_LINEAT_TABS, nil 
  case "UPDATE_ROOM": return OpTypeEnum_UPDATE_ROOM, nil 
  case "NOTIFIED_BEACON_DETECTED": return OpTypeEnum_NOTIFIED_BEACON_DETECTED, nil 
  case "UPDATE_EXTENDED_PROFILE": return OpTypeEnum_UPDATE_EXTENDED_PROFILE, nil 
  case "ADD_FOLLOW": return OpTypeEnum_ADD_FOLLOW, nil 
  case "NOTIFIED_ADD_FOLLOW": return OpTypeEnum_NOTIFIED_ADD_FOLLOW, nil 
  case "DELETE_FOLLOW": return OpTypeEnum_DELETE_FOLLOW, nil 
  case "NOTIFIED_DELETE_FOLLOW": return OpTypeEnum_NOTIFIED_DELETE_FOLLOW, nil 
  case "UPDATE_TIMELINE_SETTINGS": return OpTypeEnum_UPDATE_TIMELINE_SETTINGS, nil 
  case "NOTIFIED_FRIEND_REQUEST": return OpTypeEnum_NOTIFIED_FRIEND_REQUEST, nil 
  case "UPDATE_RINGBACK_TONE": return OpTypeEnum_UPDATE_RINGBACK_TONE, nil 
  case "NOTIFIED_POSTBACK": return OpTypeEnum_NOTIFIED_POSTBACK, nil 
  case "RECEIVE_READ_WATERMARK": return OpTypeEnum_RECEIVE_READ_WATERMARK, nil 
  case "NOTIFIED_MESSAGE_DELIVERED": return OpTypeEnum_NOTIFIED_MESSAGE_DELIVERED, nil 
  case "NOTIFIED_UPDATE_CHAT_BAR": return OpTypeEnum_NOTIFIED_UPDATE_CHAT_BAR, nil 
  case "NOTIFIED_CHATAPP_INSTALLED": return OpTypeEnum_NOTIFIED_CHATAPP_INSTALLED, nil 
  case "NOTIFIED_CHATAPP_UPDATED": return OpTypeEnum_NOTIFIED_CHATAPP_UPDATED, nil 
  case "NOTIFIED_CHATAPP_NEW_MARK": return OpTypeEnum_NOTIFIED_CHATAPP_NEW_MARK, nil 
  case "NOTIFIED_CHATAPP_DELETED": return OpTypeEnum_NOTIFIED_CHATAPP_DELETED, nil 
  case "NOTIFIED_CHATAPP_SYNC": return OpTypeEnum_NOTIFIED_CHATAPP_SYNC, nil 
  case "NOTIFIED_UPDATE_MESSAGE": return OpTypeEnum_NOTIFIED_UPDATE_MESSAGE, nil 
  case "UPDATE_CHATROOMBGM": return OpTypeEnum_UPDATE_CHATROOMBGM, nil 
  case "NOTIFIED_UPDATE_CHATROOMBGM": return OpTypeEnum_NOTIFIED_UPDATE_CHATROOMBGM, nil 
  case "UPDATE_RINGTONE": return OpTypeEnum_UPDATE_RINGTONE, nil 
  case "CREATE_CHAT": return OpTypeEnum_CREATE_CHAT, nil 
  case "UPDATE_CHAT": return OpTypeEnum_UPDATE_CHAT, nil 
  case "NOTIFIED_UPDATE_CHAT": return OpTypeEnum_NOTIFIED_UPDATE_CHAT, nil 
  case "INVITE_INTO_CHAT": return OpTypeEnum_INVITE_INTO_CHAT, nil 
  case "NOTIFIED_INVITE_INTO_CHAT": return OpTypeEnum_NOTIFIED_INVITE_INTO_CHAT, nil 
  case "CANCEL_CHAT_INVITATION": return OpTypeEnum_CANCEL_CHAT_INVITATION, nil 
  case "NOTIFIED_CANCEL_CHAT_INVITATION": return OpTypeEnum_NOTIFIED_CANCEL_CHAT_INVITATION, nil 
  case "DELETE_SELF_FROM_CHAT": return OpTypeEnum_DELETE_SELF_FROM_CHAT, nil 
  case "NOTIFIED_DELETE_SELF_FROM_CHAT": return OpTypeEnum_NOTIFIED_DELETE_SELF_FROM_CHAT, nil 
  case "ACCEPT_CHAT_INVITATION": return OpTypeEnum_ACCEPT_CHAT_INVITATION, nil 
  case "NOTIFIED_ACCEPT_CHAT_INVITATION": return OpTypeEnum_NOTIFIED_ACCEPT_CHAT_INVITATION, nil 
  case "REJECT_CHAT_INVITATION": return OpTypeEnum_REJECT_CHAT_INVITATION, nil 
  case "NOTIFIED_REJECT_CHAT_INVITATION": return OpTypeEnum_NOTIFIED_REJECT_CHAT_INVITATION, nil 
  case "DELETE_OTHER_FROM_CHAT": return OpTypeEnum_DELETE_OTHER_FROM_CHAT, nil 
  case "NOTIFIED_DELETE_OTHER_FROM_CHAT": return OpTypeEnum_NOTIFIED_DELETE_OTHER_FROM_CHAT, nil 
  case "UPDATE_USER_SETTINGS": return OpTypeEnum_UPDATE_USER_SETTINGS, nil 
  }
  return OpTypeEnum(0), fmt.Errorf("not a valid OpTypeEnum string")
}


func OpTypeEnumPtr(v OpTypeEnum) *OpTypeEnum { return &v }

func (p OpTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OpTypeEnum) UnmarshalText(text []byte) error {
q, err := OpTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OpTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OpTypeEnum(v)
return nil
}

func (p * OpTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SettingsAttributes2Enum int64
const (
  SettingsAttributes2Enum_NOTIFICATION_ENABLE SettingsAttributes2Enum = 0
  SettingsAttributes2Enum_NOTIFICATION_MUTE_EXPIRATION SettingsAttributes2Enum = 1
  SettingsAttributes2Enum_NOTIFICATION_NEW_MESSAGE SettingsAttributes2Enum = 2
  SettingsAttributes2Enum_NOTIFICATION_GROUP_INVITATION SettingsAttributes2Enum = 3
  SettingsAttributes2Enum_NOTIFICATION_SHOW_MESSAGE SettingsAttributes2Enum = 4
  SettingsAttributes2Enum_NOTIFICATION_INCOMING_CALL SettingsAttributes2Enum = 5
  SettingsAttributes2Enum_NOTIFICATION_SOUND_MESSAGE SettingsAttributes2Enum = 8
  SettingsAttributes2Enum_NOTIFICATION_SOUND_GROUP SettingsAttributes2Enum = 9
  SettingsAttributes2Enum_NOTIFICATION_DISABLED_WITH_SUB SettingsAttributes2Enum = 16
  SettingsAttributes2Enum_NOTIFICATION_PAYMENT SettingsAttributes2Enum = 17
  SettingsAttributes2Enum_NOTIFICATION_MENTION SettingsAttributes2Enum = 40
  SettingsAttributes2Enum_NOTIFICATION_THUMBNAIL SettingsAttributes2Enum = 45
  SettingsAttributes2Enum_PRIVACY_SYNC_CONTACTS SettingsAttributes2Enum = 6
  SettingsAttributes2Enum_PRIVACY_SEARCH_BY_PHONE_NUMBER SettingsAttributes2Enum = 7
  SettingsAttributes2Enum_PRIVACY_SEARCH_BY_USERID SettingsAttributes2Enum = 13
  SettingsAttributes2Enum_PRIVACY_SEARCH_BY_EMAIL SettingsAttributes2Enum = 14
  SettingsAttributes2Enum_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN SettingsAttributes2Enum = 21
  SettingsAttributes2Enum_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME SettingsAttributes2Enum = 23
  SettingsAttributes2Enum_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME SettingsAttributes2Enum = 35
  SettingsAttributes2Enum_PRIVACY_ALLOW_FRIEND_REQUEST SettingsAttributes2Enum = 30
  SettingsAttributes2Enum_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND SettingsAttributes2Enum = 25
  SettingsAttributes2Enum_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL SettingsAttributes2Enum = 26
  SettingsAttributes2Enum_PRIVACY_AGREE_USE_PAIDCALL SettingsAttributes2Enum = 27
  SettingsAttributes2Enum_CONTACT_MY_TICKET SettingsAttributes2Enum = 10
  SettingsAttributes2Enum_IDENTITY_PROVIDER SettingsAttributes2Enum = 11
  SettingsAttributes2Enum_IDENTITY_IDENTIFIER SettingsAttributes2Enum = 12
  SettingsAttributes2Enum_SNS_ACCOUNT SettingsAttributes2Enum = 19
  SettingsAttributes2Enum_PHONE_REGISTRATION SettingsAttributes2Enum = 20
  SettingsAttributes2Enum_PREFERENCE_LOCALE SettingsAttributes2Enum = 15
  SettingsAttributes2Enum_CUSTOM_MODE SettingsAttributes2Enum = 22
  SettingsAttributes2Enum_EMAIL_CONFIRMATION_STATUS SettingsAttributes2Enum = 24
  SettingsAttributes2Enum_ACCOUNT_MIGRATION_PINCODE SettingsAttributes2Enum = 28
  SettingsAttributes2Enum_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE SettingsAttributes2Enum = 29
  SettingsAttributes2Enum_SECURITY_CENTER_SETTINGS SettingsAttributes2Enum = 18
  SettingsAttributes2Enum_E2EE_ENABLE SettingsAttributes2Enum = 33
  SettingsAttributes2Enum_ENABLE_SOUND_TO_TEXT SettingsAttributes2Enum = 47
  SettingsAttributes2Enum_HITOKOTO_BACKUP_REQUESTED SettingsAttributes2Enum = 34
  SettingsAttributes2Enum_CONTACT_ALLOW_FOLLOWING SettingsAttributes2Enum = 36
  SettingsAttributes2Enum_PRIVACY_ALLOW_NEARBY SettingsAttributes2Enum = 37
  SettingsAttributes2Enum_AGREEMENT_NEARBY SettingsAttributes2Enum = 38
  SettingsAttributes2Enum_AGREEMENT_SQUARE SettingsAttributes2Enum = 39
  SettingsAttributes2Enum_ALLOW_UNREGISTRATION_SECONDARY_DEVICE SettingsAttributes2Enum = 41
  SettingsAttributes2Enum_AGREEMENT_BOT_USE SettingsAttributes2Enum = 42
  SettingsAttributes2Enum_AGREEMENT_SHAKE_FUNCTION SettingsAttributes2Enum = 43
  SettingsAttributes2Enum_AGREEMENT_MOBILE_CONTACT_NAME SettingsAttributes2Enum = 44
  SettingsAttributes2Enum_AGREEMENT_SOUND_TO_TEXT SettingsAttributes2Enum = 46
  SettingsAttributes2Enum_AGREEMENT_PRIVACY_POLICY_VERSION SettingsAttributes2Enum = 47
  SettingsAttributes2Enum_AGREEMENT_AD_BY_WEB_ACCESS SettingsAttributes2Enum = 48
  SettingsAttributes2Enum_AGREEMENT_PHONE_NUMBER_MATCHING SettingsAttributes2Enum = 49
  SettingsAttributes2Enum_AGREEMENT_COMMUNICATION_INFO SettingsAttributes2Enum = 50
  SettingsAttributes2Enum_AGREEMENT_THINGS_WIRELESS_COMMUNICATION SettingsAttributes2Enum = 52
  SettingsAttributes2Enum_AGREEMENT_GDPR SettingsAttributes2Enum = 53
  SettingsAttributes2Enum_AGREEMENT_PROVIDE_LOCATION SettingsAttributes2Enum = 55
  SettingsAttributes2Enum_AGREEMENT_BEACON SettingsAttributes2Enum = 56
  SettingsAttributes2Enum_AGREEMENT_CONTENTS_SUGGEST SettingsAttributes2Enum = 58
  SettingsAttributes2Enum_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION SettingsAttributes2Enum = 59
)

func (p SettingsAttributes2Enum) String() string {
  switch p {
  case SettingsAttributes2Enum_NOTIFICATION_ENABLE: return "NOTIFICATION_ENABLE"
  case SettingsAttributes2Enum_NOTIFICATION_MUTE_EXPIRATION: return "NOTIFICATION_MUTE_EXPIRATION"
  case SettingsAttributes2Enum_NOTIFICATION_NEW_MESSAGE: return "NOTIFICATION_NEW_MESSAGE"
  case SettingsAttributes2Enum_NOTIFICATION_GROUP_INVITATION: return "NOTIFICATION_GROUP_INVITATION"
  case SettingsAttributes2Enum_NOTIFICATION_SHOW_MESSAGE: return "NOTIFICATION_SHOW_MESSAGE"
  case SettingsAttributes2Enum_NOTIFICATION_INCOMING_CALL: return "NOTIFICATION_INCOMING_CALL"
  case SettingsAttributes2Enum_NOTIFICATION_SOUND_MESSAGE: return "NOTIFICATION_SOUND_MESSAGE"
  case SettingsAttributes2Enum_NOTIFICATION_SOUND_GROUP: return "NOTIFICATION_SOUND_GROUP"
  case SettingsAttributes2Enum_NOTIFICATION_DISABLED_WITH_SUB: return "NOTIFICATION_DISABLED_WITH_SUB"
  case SettingsAttributes2Enum_NOTIFICATION_PAYMENT: return "NOTIFICATION_PAYMENT"
  case SettingsAttributes2Enum_NOTIFICATION_MENTION: return "NOTIFICATION_MENTION"
  case SettingsAttributes2Enum_NOTIFICATION_THUMBNAIL: return "NOTIFICATION_THUMBNAIL"
  case SettingsAttributes2Enum_PRIVACY_SYNC_CONTACTS: return "PRIVACY_SYNC_CONTACTS"
  case SettingsAttributes2Enum_PRIVACY_SEARCH_BY_PHONE_NUMBER: return "PRIVACY_SEARCH_BY_PHONE_NUMBER"
  case SettingsAttributes2Enum_PRIVACY_SEARCH_BY_USERID: return "PRIVACY_SEARCH_BY_USERID"
  case SettingsAttributes2Enum_PRIVACY_SEARCH_BY_EMAIL: return "PRIVACY_SEARCH_BY_EMAIL"
  case SettingsAttributes2Enum_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN: return "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN"
  case SettingsAttributes2Enum_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME: return "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME"
  case SettingsAttributes2Enum_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME: return "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME"
  case SettingsAttributes2Enum_PRIVACY_ALLOW_FRIEND_REQUEST: return "PRIVACY_ALLOW_FRIEND_REQUEST"
  case SettingsAttributes2Enum_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND: return "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND"
  case SettingsAttributes2Enum_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL: return "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL"
  case SettingsAttributes2Enum_PRIVACY_AGREE_USE_PAIDCALL: return "PRIVACY_AGREE_USE_PAIDCALL"
  case SettingsAttributes2Enum_CONTACT_MY_TICKET: return "CONTACT_MY_TICKET"
  case SettingsAttributes2Enum_IDENTITY_PROVIDER: return "IDENTITY_PROVIDER"
  case SettingsAttributes2Enum_IDENTITY_IDENTIFIER: return "IDENTITY_IDENTIFIER"
  case SettingsAttributes2Enum_SNS_ACCOUNT: return "SNS_ACCOUNT"
  case SettingsAttributes2Enum_PHONE_REGISTRATION: return "PHONE_REGISTRATION"
  case SettingsAttributes2Enum_PREFERENCE_LOCALE: return "PREFERENCE_LOCALE"
  case SettingsAttributes2Enum_CUSTOM_MODE: return "CUSTOM_MODE"
  case SettingsAttributes2Enum_EMAIL_CONFIRMATION_STATUS: return "EMAIL_CONFIRMATION_STATUS"
  case SettingsAttributes2Enum_ACCOUNT_MIGRATION_PINCODE: return "ACCOUNT_MIGRATION_PINCODE"
  case SettingsAttributes2Enum_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE: return "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE"
  case SettingsAttributes2Enum_SECURITY_CENTER_SETTINGS: return "SECURITY_CENTER_SETTINGS"
  case SettingsAttributes2Enum_E2EE_ENABLE: return "E2EE_ENABLE"
  case SettingsAttributes2Enum_ENABLE_SOUND_TO_TEXT: return "ENABLE_SOUND_TO_TEXT"
  case SettingsAttributes2Enum_HITOKOTO_BACKUP_REQUESTED: return "HITOKOTO_BACKUP_REQUESTED"
  case SettingsAttributes2Enum_CONTACT_ALLOW_FOLLOWING: return "CONTACT_ALLOW_FOLLOWING"
  case SettingsAttributes2Enum_PRIVACY_ALLOW_NEARBY: return "PRIVACY_ALLOW_NEARBY"
  case SettingsAttributes2Enum_AGREEMENT_NEARBY: return "AGREEMENT_NEARBY"
  case SettingsAttributes2Enum_AGREEMENT_SQUARE: return "AGREEMENT_SQUARE"
  case SettingsAttributes2Enum_ALLOW_UNREGISTRATION_SECONDARY_DEVICE: return "ALLOW_UNREGISTRATION_SECONDARY_DEVICE"
  case SettingsAttributes2Enum_AGREEMENT_BOT_USE: return "AGREEMENT_BOT_USE"
  case SettingsAttributes2Enum_AGREEMENT_SHAKE_FUNCTION: return "AGREEMENT_SHAKE_FUNCTION"
  case SettingsAttributes2Enum_AGREEMENT_MOBILE_CONTACT_NAME: return "AGREEMENT_MOBILE_CONTACT_NAME"
  case SettingsAttributes2Enum_AGREEMENT_SOUND_TO_TEXT: return "AGREEMENT_SOUND_TO_TEXT"
  case SettingsAttributes2Enum_AGREEMENT_PRIVACY_POLICY_VERSION: return "AGREEMENT_PRIVACY_POLICY_VERSION"
  case SettingsAttributes2Enum_AGREEMENT_AD_BY_WEB_ACCESS: return "AGREEMENT_AD_BY_WEB_ACCESS"
  case SettingsAttributes2Enum_AGREEMENT_PHONE_NUMBER_MATCHING: return "AGREEMENT_PHONE_NUMBER_MATCHING"
  case SettingsAttributes2Enum_AGREEMENT_COMMUNICATION_INFO: return "AGREEMENT_COMMUNICATION_INFO"
  case SettingsAttributes2Enum_AGREEMENT_THINGS_WIRELESS_COMMUNICATION: return "AGREEMENT_THINGS_WIRELESS_COMMUNICATION"
  case SettingsAttributes2Enum_AGREEMENT_GDPR: return "AGREEMENT_GDPR"
  case SettingsAttributes2Enum_AGREEMENT_PROVIDE_LOCATION: return "AGREEMENT_PROVIDE_LOCATION"
  case SettingsAttributes2Enum_AGREEMENT_BEACON: return "AGREEMENT_BEACON"
  case SettingsAttributes2Enum_AGREEMENT_CONTENTS_SUGGEST: return "AGREEMENT_CONTENTS_SUGGEST"
  case SettingsAttributes2Enum_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION: return "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION"
  }
  return "<UNSET>"
}

func SettingsAttributes2EnumFromString(s string) (SettingsAttributes2Enum, error) {
  switch s {
  case "NOTIFICATION_ENABLE": return SettingsAttributes2Enum_NOTIFICATION_ENABLE, nil 
  case "NOTIFICATION_MUTE_EXPIRATION": return SettingsAttributes2Enum_NOTIFICATION_MUTE_EXPIRATION, nil 
  case "NOTIFICATION_NEW_MESSAGE": return SettingsAttributes2Enum_NOTIFICATION_NEW_MESSAGE, nil 
  case "NOTIFICATION_GROUP_INVITATION": return SettingsAttributes2Enum_NOTIFICATION_GROUP_INVITATION, nil 
  case "NOTIFICATION_SHOW_MESSAGE": return SettingsAttributes2Enum_NOTIFICATION_SHOW_MESSAGE, nil 
  case "NOTIFICATION_INCOMING_CALL": return SettingsAttributes2Enum_NOTIFICATION_INCOMING_CALL, nil 
  case "NOTIFICATION_SOUND_MESSAGE": return SettingsAttributes2Enum_NOTIFICATION_SOUND_MESSAGE, nil 
  case "NOTIFICATION_SOUND_GROUP": return SettingsAttributes2Enum_NOTIFICATION_SOUND_GROUP, nil 
  case "NOTIFICATION_DISABLED_WITH_SUB": return SettingsAttributes2Enum_NOTIFICATION_DISABLED_WITH_SUB, nil 
  case "NOTIFICATION_PAYMENT": return SettingsAttributes2Enum_NOTIFICATION_PAYMENT, nil 
  case "NOTIFICATION_MENTION": return SettingsAttributes2Enum_NOTIFICATION_MENTION, nil 
  case "NOTIFICATION_THUMBNAIL": return SettingsAttributes2Enum_NOTIFICATION_THUMBNAIL, nil 
  case "PRIVACY_SYNC_CONTACTS": return SettingsAttributes2Enum_PRIVACY_SYNC_CONTACTS, nil 
  case "PRIVACY_SEARCH_BY_PHONE_NUMBER": return SettingsAttributes2Enum_PRIVACY_SEARCH_BY_PHONE_NUMBER, nil 
  case "PRIVACY_SEARCH_BY_USERID": return SettingsAttributes2Enum_PRIVACY_SEARCH_BY_USERID, nil 
  case "PRIVACY_SEARCH_BY_EMAIL": return SettingsAttributes2Enum_PRIVACY_SEARCH_BY_EMAIL, nil 
  case "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN": return SettingsAttributes2Enum_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN, nil 
  case "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME": return SettingsAttributes2Enum_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME, nil 
  case "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME": return SettingsAttributes2Enum_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME, nil 
  case "PRIVACY_ALLOW_FRIEND_REQUEST": return SettingsAttributes2Enum_PRIVACY_ALLOW_FRIEND_REQUEST, nil 
  case "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND": return SettingsAttributes2Enum_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND, nil 
  case "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL": return SettingsAttributes2Enum_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL, nil 
  case "PRIVACY_AGREE_USE_PAIDCALL": return SettingsAttributes2Enum_PRIVACY_AGREE_USE_PAIDCALL, nil 
  case "CONTACT_MY_TICKET": return SettingsAttributes2Enum_CONTACT_MY_TICKET, nil 
  case "IDENTITY_PROVIDER": return SettingsAttributes2Enum_IDENTITY_PROVIDER, nil 
  case "IDENTITY_IDENTIFIER": return SettingsAttributes2Enum_IDENTITY_IDENTIFIER, nil 
  case "SNS_ACCOUNT": return SettingsAttributes2Enum_SNS_ACCOUNT, nil 
  case "PHONE_REGISTRATION": return SettingsAttributes2Enum_PHONE_REGISTRATION, nil 
  case "PREFERENCE_LOCALE": return SettingsAttributes2Enum_PREFERENCE_LOCALE, nil 
  case "CUSTOM_MODE": return SettingsAttributes2Enum_CUSTOM_MODE, nil 
  case "EMAIL_CONFIRMATION_STATUS": return SettingsAttributes2Enum_EMAIL_CONFIRMATION_STATUS, nil 
  case "ACCOUNT_MIGRATION_PINCODE": return SettingsAttributes2Enum_ACCOUNT_MIGRATION_PINCODE, nil 
  case "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE": return SettingsAttributes2Enum_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE, nil 
  case "SECURITY_CENTER_SETTINGS": return SettingsAttributes2Enum_SECURITY_CENTER_SETTINGS, nil 
  case "E2EE_ENABLE": return SettingsAttributes2Enum_E2EE_ENABLE, nil 
  case "ENABLE_SOUND_TO_TEXT": return SettingsAttributes2Enum_ENABLE_SOUND_TO_TEXT, nil 
  case "HITOKOTO_BACKUP_REQUESTED": return SettingsAttributes2Enum_HITOKOTO_BACKUP_REQUESTED, nil 
  case "CONTACT_ALLOW_FOLLOWING": return SettingsAttributes2Enum_CONTACT_ALLOW_FOLLOWING, nil 
  case "PRIVACY_ALLOW_NEARBY": return SettingsAttributes2Enum_PRIVACY_ALLOW_NEARBY, nil 
  case "AGREEMENT_NEARBY": return SettingsAttributes2Enum_AGREEMENT_NEARBY, nil 
  case "AGREEMENT_SQUARE": return SettingsAttributes2Enum_AGREEMENT_SQUARE, nil 
  case "ALLOW_UNREGISTRATION_SECONDARY_DEVICE": return SettingsAttributes2Enum_ALLOW_UNREGISTRATION_SECONDARY_DEVICE, nil 
  case "AGREEMENT_BOT_USE": return SettingsAttributes2Enum_AGREEMENT_BOT_USE, nil 
  case "AGREEMENT_SHAKE_FUNCTION": return SettingsAttributes2Enum_AGREEMENT_SHAKE_FUNCTION, nil 
  case "AGREEMENT_MOBILE_CONTACT_NAME": return SettingsAttributes2Enum_AGREEMENT_MOBILE_CONTACT_NAME, nil 
  case "AGREEMENT_SOUND_TO_TEXT": return SettingsAttributes2Enum_AGREEMENT_SOUND_TO_TEXT, nil 
  case "AGREEMENT_PRIVACY_POLICY_VERSION": return SettingsAttributes2Enum_AGREEMENT_PRIVACY_POLICY_VERSION, nil 
  case "AGREEMENT_AD_BY_WEB_ACCESS": return SettingsAttributes2Enum_AGREEMENT_AD_BY_WEB_ACCESS, nil 
  case "AGREEMENT_PHONE_NUMBER_MATCHING": return SettingsAttributes2Enum_AGREEMENT_PHONE_NUMBER_MATCHING, nil 
  case "AGREEMENT_COMMUNICATION_INFO": return SettingsAttributes2Enum_AGREEMENT_COMMUNICATION_INFO, nil 
  case "AGREEMENT_THINGS_WIRELESS_COMMUNICATION": return SettingsAttributes2Enum_AGREEMENT_THINGS_WIRELESS_COMMUNICATION, nil 
  case "AGREEMENT_GDPR": return SettingsAttributes2Enum_AGREEMENT_GDPR, nil 
  case "AGREEMENT_PROVIDE_LOCATION": return SettingsAttributes2Enum_AGREEMENT_PROVIDE_LOCATION, nil 
  case "AGREEMENT_BEACON": return SettingsAttributes2Enum_AGREEMENT_BEACON, nil 
  case "AGREEMENT_CONTENTS_SUGGEST": return SettingsAttributes2Enum_AGREEMENT_CONTENTS_SUGGEST, nil 
  case "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION": return SettingsAttributes2Enum_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION, nil 
  }
  return SettingsAttributes2Enum(0), fmt.Errorf("not a valid SettingsAttributes2Enum string")
}


func SettingsAttributes2EnumPtr(v SettingsAttributes2Enum) *SettingsAttributes2Enum { return &v }

func (p SettingsAttributes2Enum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SettingsAttributes2Enum) UnmarshalText(text []byte) error {
q, err := SettingsAttributes2EnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SettingsAttributes2Enum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SettingsAttributes2Enum(v)
return nil
}

func (p * SettingsAttributes2Enum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OpStatusEnum int64
const (
  OpStatusEnum_NORMAL OpStatusEnum = 0
  OpStatusEnum_ALERT_DISABLED OpStatusEnum = 1
  OpStatusEnum_ALWAYS OpStatusEnum = 2
)

func (p OpStatusEnum) String() string {
  switch p {
  case OpStatusEnum_NORMAL: return "NORMAL"
  case OpStatusEnum_ALERT_DISABLED: return "ALERT_DISABLED"
  case OpStatusEnum_ALWAYS: return "ALWAYS"
  }
  return "<UNSET>"
}

func OpStatusEnumFromString(s string) (OpStatusEnum, error) {
  switch s {
  case "NORMAL": return OpStatusEnum_NORMAL, nil 
  case "ALERT_DISABLED": return OpStatusEnum_ALERT_DISABLED, nil 
  case "ALWAYS": return OpStatusEnum_ALWAYS, nil 
  }
  return OpStatusEnum(0), fmt.Errorf("not a valid OpStatusEnum string")
}


func OpStatusEnumPtr(v OpStatusEnum) *OpStatusEnum { return &v }

func (p OpStatusEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OpStatusEnum) UnmarshalText(text []byte) error {
q, err := OpStatusEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OpStatusEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OpStatusEnum(v)
return nil
}

func (p * OpStatusEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FriendRequestStatusEnum int64
const (
  FriendRequestStatusEnum_NONE FriendRequestStatusEnum = 0
  FriendRequestStatusEnum_AVAILABLE FriendRequestStatusEnum = 1
  FriendRequestStatusEnum_ALREADY_REQUESTED FriendRequestStatusEnum = 2
  FriendRequestStatusEnum_UNAVAILABLE FriendRequestStatusEnum = 3
)

func (p FriendRequestStatusEnum) String() string {
  switch p {
  case FriendRequestStatusEnum_NONE: return "NONE"
  case FriendRequestStatusEnum_AVAILABLE: return "AVAILABLE"
  case FriendRequestStatusEnum_ALREADY_REQUESTED: return "ALREADY_REQUESTED"
  case FriendRequestStatusEnum_UNAVAILABLE: return "UNAVAILABLE"
  }
  return "<UNSET>"
}

func FriendRequestStatusEnumFromString(s string) (FriendRequestStatusEnum, error) {
  switch s {
  case "NONE": return FriendRequestStatusEnum_NONE, nil 
  case "AVAILABLE": return FriendRequestStatusEnum_AVAILABLE, nil 
  case "ALREADY_REQUESTED": return FriendRequestStatusEnum_ALREADY_REQUESTED, nil 
  case "UNAVAILABLE": return FriendRequestStatusEnum_UNAVAILABLE, nil 
  }
  return FriendRequestStatusEnum(0), fmt.Errorf("not a valid FriendRequestStatusEnum string")
}


func FriendRequestStatusEnumPtr(v FriendRequestStatusEnum) *FriendRequestStatusEnum { return &v }

func (p FriendRequestStatusEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FriendRequestStatusEnum) UnmarshalText(text []byte) error {
q, err := FriendRequestStatusEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FriendRequestStatusEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FriendRequestStatusEnum(v)
return nil
}

func (p * FriendRequestStatusEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PublicTypeEnum int64
const (
  PublicTypeEnum_HIDDEN PublicTypeEnum = 0
  PublicTypeEnum_PUBLIC PublicTypeEnum = 1000
)

func (p PublicTypeEnum) String() string {
  switch p {
  case PublicTypeEnum_HIDDEN: return "HIDDEN"
  case PublicTypeEnum_PUBLIC: return "PUBLIC"
  }
  return "<UNSET>"
}

func PublicTypeEnumFromString(s string) (PublicTypeEnum, error) {
  switch s {
  case "HIDDEN": return PublicTypeEnum_HIDDEN, nil 
  case "PUBLIC": return PublicTypeEnum_PUBLIC, nil 
  }
  return PublicTypeEnum(0), fmt.Errorf("not a valid PublicTypeEnum string")
}


func PublicTypeEnumPtr(v PublicTypeEnum) *PublicTypeEnum { return &v }

func (p PublicTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PublicTypeEnum) UnmarshalText(text []byte) error {
q, err := PublicTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PublicTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PublicTypeEnum(v)
return nil
}

func (p * PublicTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChannelConfigurationEnum int64
const (
  ChannelConfigurationEnum_MESSAGE ChannelConfigurationEnum = 0
  ChannelConfigurationEnum_MESSAGE_NOTIFICATION ChannelConfigurationEnum = 1
  ChannelConfigurationEnum_NOTIFICATION_CENTER ChannelConfigurationEnum = 2
)

func (p ChannelConfigurationEnum) String() string {
  switch p {
  case ChannelConfigurationEnum_MESSAGE: return "MESSAGE"
  case ChannelConfigurationEnum_MESSAGE_NOTIFICATION: return "MESSAGE_NOTIFICATION"
  case ChannelConfigurationEnum_NOTIFICATION_CENTER: return "NOTIFICATION_CENTER"
  }
  return "<UNSET>"
}

func ChannelConfigurationEnumFromString(s string) (ChannelConfigurationEnum, error) {
  switch s {
  case "MESSAGE": return ChannelConfigurationEnum_MESSAGE, nil 
  case "MESSAGE_NOTIFICATION": return ChannelConfigurationEnum_MESSAGE_NOTIFICATION, nil 
  case "NOTIFICATION_CENTER": return ChannelConfigurationEnum_NOTIFICATION_CENTER, nil 
  }
  return ChannelConfigurationEnum(0), fmt.Errorf("not a valid ChannelConfigurationEnum string")
}


func ChannelConfigurationEnumPtr(v ChannelConfigurationEnum) *ChannelConfigurationEnum { return &v }

func (p ChannelConfigurationEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChannelConfigurationEnum) UnmarshalText(text []byte) error {
q, err := ChannelConfigurationEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChannelConfigurationEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChannelConfigurationEnum(v)
return nil
}

func (p * ChannelConfigurationEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type LiffFeatureStuct int64
const (
  LiffFeatureStuct_GEOLOCATION LiffFeatureStuct = 1
  LiffFeatureStuct_ADVERTISING_ID LiffFeatureStuct = 2
  LiffFeatureStuct_BLUETOOTH_LE LiffFeatureStuct = 3
  LiffFeatureStuct_QR_CODE LiffFeatureStuct = 4
  LiffFeatureStuct_ADVERTISING_SDK LiffFeatureStuct = 5
)

func (p LiffFeatureStuct) String() string {
  switch p {
  case LiffFeatureStuct_GEOLOCATION: return "GEOLOCATION"
  case LiffFeatureStuct_ADVERTISING_ID: return "ADVERTISING_ID"
  case LiffFeatureStuct_BLUETOOTH_LE: return "BLUETOOTH_LE"
  case LiffFeatureStuct_QR_CODE: return "QR_CODE"
  case LiffFeatureStuct_ADVERTISING_SDK: return "ADVERTISING_SDK"
  }
  return "<UNSET>"
}

func LiffFeatureStuctFromString(s string) (LiffFeatureStuct, error) {
  switch s {
  case "GEOLOCATION": return LiffFeatureStuct_GEOLOCATION, nil 
  case "ADVERTISING_ID": return LiffFeatureStuct_ADVERTISING_ID, nil 
  case "BLUETOOTH_LE": return LiffFeatureStuct_BLUETOOTH_LE, nil 
  case "QR_CODE": return LiffFeatureStuct_QR_CODE, nil 
  case "ADVERTISING_SDK": return LiffFeatureStuct_ADVERTISING_SDK, nil 
  }
  return LiffFeatureStuct(0), fmt.Errorf("not a valid LiffFeatureStuct string")
}


func LiffFeatureStuctPtr(v LiffFeatureStuct) *LiffFeatureStuct { return &v }

func (p LiffFeatureStuct) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *LiffFeatureStuct) UnmarshalText(text []byte) error {
q, err := LiffFeatureStuctFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *LiffFeatureStuct) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = LiffFeatureStuct(v)
return nil
}

func (p * LiffFeatureStuct) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChannelPermissionEnum int64
const (
  ChannelPermissionEnum_PROFILE ChannelPermissionEnum = 0
  ChannelPermissionEnum_FRIENDS ChannelPermissionEnum = 1
  ChannelPermissionEnum_GROUP ChannelPermissionEnum = 2
)

func (p ChannelPermissionEnum) String() string {
  switch p {
  case ChannelPermissionEnum_PROFILE: return "PROFILE"
  case ChannelPermissionEnum_FRIENDS: return "FRIENDS"
  case ChannelPermissionEnum_GROUP: return "GROUP"
  }
  return "<UNSET>"
}

func ChannelPermissionEnumFromString(s string) (ChannelPermissionEnum, error) {
  switch s {
  case "PROFILE": return ChannelPermissionEnum_PROFILE, nil 
  case "FRIENDS": return ChannelPermissionEnum_FRIENDS, nil 
  case "GROUP": return ChannelPermissionEnum_GROUP, nil 
  }
  return ChannelPermissionEnum(0), fmt.Errorf("not a valid ChannelPermissionEnum string")
}


func ChannelPermissionEnumPtr(v ChannelPermissionEnum) *ChannelPermissionEnum { return &v }

func (p ChannelPermissionEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChannelPermissionEnum) UnmarshalText(text []byte) error {
q, err := ChannelPermissionEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChannelPermissionEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChannelPermissionEnum(v)
return nil
}

func (p * ChannelPermissionEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FeatureLicensesEnum int64
const (
  FeatureLicensesEnum_BLE_LCS_API_USABLE FeatureLicensesEnum = 26
  FeatureLicensesEnum_PROHIBIT_MINIMIZE_CHANNEL_BROWSER FeatureLicensesEnum = 27
  FeatureLicensesEnum_ALLOW_IOS_WEBKIT FeatureLicensesEnum = 28
  FeatureLicensesEnum_PURCHASE_LCS_API_USABLE FeatureLicensesEnum = 38
)

func (p FeatureLicensesEnum) String() string {
  switch p {
  case FeatureLicensesEnum_BLE_LCS_API_USABLE: return "BLE_LCS_API_USABLE"
  case FeatureLicensesEnum_PROHIBIT_MINIMIZE_CHANNEL_BROWSER: return "PROHIBIT_MINIMIZE_CHANNEL_BROWSER"
  case FeatureLicensesEnum_ALLOW_IOS_WEBKIT: return "ALLOW_IOS_WEBKIT"
  case FeatureLicensesEnum_PURCHASE_LCS_API_USABLE: return "PURCHASE_LCS_API_USABLE"
  }
  return "<UNSET>"
}

func FeatureLicensesEnumFromString(s string) (FeatureLicensesEnum, error) {
  switch s {
  case "BLE_LCS_API_USABLE": return FeatureLicensesEnum_BLE_LCS_API_USABLE, nil 
  case "PROHIBIT_MINIMIZE_CHANNEL_BROWSER": return FeatureLicensesEnum_PROHIBIT_MINIMIZE_CHANNEL_BROWSER, nil 
  case "ALLOW_IOS_WEBKIT": return FeatureLicensesEnum_ALLOW_IOS_WEBKIT, nil 
  case "PURCHASE_LCS_API_USABLE": return FeatureLicensesEnum_PURCHASE_LCS_API_USABLE, nil 
  }
  return FeatureLicensesEnum(0), fmt.Errorf("not a valid FeatureLicensesEnum string")
}


func FeatureLicensesEnumPtr(v FeatureLicensesEnum) *FeatureLicensesEnum { return &v }

func (p FeatureLicensesEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FeatureLicensesEnum) UnmarshalText(text []byte) error {
q, err := FeatureLicensesEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FeatureLicensesEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FeatureLicensesEnum(v)
return nil
}

func (p * FeatureLicensesEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FriendDirectionEnum int64
const (
  FriendDirectionEnum_INCOMING FriendDirectionEnum = 1
  FriendDirectionEnum_OUTGOING FriendDirectionEnum = 2
)

func (p FriendDirectionEnum) String() string {
  switch p {
  case FriendDirectionEnum_INCOMING: return "INCOMING"
  case FriendDirectionEnum_OUTGOING: return "OUTGOING"
  }
  return "<UNSET>"
}

func FriendDirectionEnumFromString(s string) (FriendDirectionEnum, error) {
  switch s {
  case "INCOMING": return FriendDirectionEnum_INCOMING, nil 
  case "OUTGOING": return FriendDirectionEnum_OUTGOING, nil 
  }
  return FriendDirectionEnum(0), fmt.Errorf("not a valid FriendDirectionEnum string")
}


func FriendDirectionEnumPtr(v FriendDirectionEnum) *FriendDirectionEnum { return &v }

func (p FriendDirectionEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FriendDirectionEnum) UnmarshalText(text []byte) error {
q, err := FriendDirectionEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FriendDirectionEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FriendDirectionEnum(v)
return nil
}

func (p * FriendDirectionEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FriendMethodEnum int64
const (
  FriendMethodEnum_TIMELINE FriendMethodEnum = 1
  FriendMethodEnum_NEARBY FriendMethodEnum = 2
  FriendMethodEnum_SQUARE FriendMethodEnum = 3
)

func (p FriendMethodEnum) String() string {
  switch p {
  case FriendMethodEnum_TIMELINE: return "TIMELINE"
  case FriendMethodEnum_NEARBY: return "NEARBY"
  case FriendMethodEnum_SQUARE: return "SQUARE"
  }
  return "<UNSET>"
}

func FriendMethodEnumFromString(s string) (FriendMethodEnum, error) {
  switch s {
  case "TIMELINE": return FriendMethodEnum_TIMELINE, nil 
  case "NEARBY": return FriendMethodEnum_NEARBY, nil 
  case "SQUARE": return FriendMethodEnum_SQUARE, nil 
  }
  return FriendMethodEnum(0), fmt.Errorf("not a valid FriendMethodEnum string")
}


func FriendMethodEnumPtr(v FriendMethodEnum) *FriendMethodEnum { return &v }

func (p FriendMethodEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FriendMethodEnum) UnmarshalText(text []byte) error {
q, err := FriendMethodEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FriendMethodEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FriendMethodEnum(v)
return nil
}

func (p * FriendMethodEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EmailConfirmationStatusEnum int64
const (
  EmailConfirmationStatusEnum_NOT_SPECIFIED EmailConfirmationStatusEnum = 0
  EmailConfirmationStatusEnum_NOT_YET EmailConfirmationStatusEnum = 1
  EmailConfirmationStatusEnum_DONE EmailConfirmationStatusEnum = 3
  EmailConfirmationStatusEnum_NEED_ENFORCED_INPUT EmailConfirmationStatusEnum = 4
)

func (p EmailConfirmationStatusEnum) String() string {
  switch p {
  case EmailConfirmationStatusEnum_NOT_SPECIFIED: return "NOT_SPECIFIED"
  case EmailConfirmationStatusEnum_NOT_YET: return "NOT_YET"
  case EmailConfirmationStatusEnum_DONE: return "DONE"
  case EmailConfirmationStatusEnum_NEED_ENFORCED_INPUT: return "NEED_ENFORCED_INPUT"
  }
  return "<UNSET>"
}

func EmailConfirmationStatusEnumFromString(s string) (EmailConfirmationStatusEnum, error) {
  switch s {
  case "NOT_SPECIFIED": return EmailConfirmationStatusEnum_NOT_SPECIFIED, nil 
  case "NOT_YET": return EmailConfirmationStatusEnum_NOT_YET, nil 
  case "DONE": return EmailConfirmationStatusEnum_DONE, nil 
  case "NEED_ENFORCED_INPUT": return EmailConfirmationStatusEnum_NEED_ENFORCED_INPUT, nil 
  }
  return EmailConfirmationStatusEnum(0), fmt.Errorf("not a valid EmailConfirmationStatusEnum string")
}


func EmailConfirmationStatusEnumPtr(v EmailConfirmationStatusEnum) *EmailConfirmationStatusEnum { return &v }

func (p EmailConfirmationStatusEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EmailConfirmationStatusEnum) UnmarshalText(text []byte) error {
q, err := EmailConfirmationStatusEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EmailConfirmationStatusEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EmailConfirmationStatusEnum(v)
return nil
}

func (p * EmailConfirmationStatusEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type CustomModesEnum int64
const (
  CustomModesEnum_PROMOTION_FRIENDS_INVITE CustomModesEnum = 1
  CustomModesEnum_CAPABILITY_SERVER_SIDE_SMS CustomModesEnum = 2
  CustomModesEnum_LINE_CLIENT_ANALYTICS_CONFIGURATION CustomModesEnum = 3
)

func (p CustomModesEnum) String() string {
  switch p {
  case CustomModesEnum_PROMOTION_FRIENDS_INVITE: return "PROMOTION_FRIENDS_INVITE"
  case CustomModesEnum_CAPABILITY_SERVER_SIDE_SMS: return "CAPABILITY_SERVER_SIDE_SMS"
  case CustomModesEnum_LINE_CLIENT_ANALYTICS_CONFIGURATION: return "LINE_CLIENT_ANALYTICS_CONFIGURATION"
  }
  return "<UNSET>"
}

func CustomModesEnumFromString(s string) (CustomModesEnum, error) {
  switch s {
  case "PROMOTION_FRIENDS_INVITE": return CustomModesEnum_PROMOTION_FRIENDS_INVITE, nil 
  case "CAPABILITY_SERVER_SIDE_SMS": return CustomModesEnum_CAPABILITY_SERVER_SIDE_SMS, nil 
  case "LINE_CLIENT_ANALYTICS_CONFIGURATION": return CustomModesEnum_LINE_CLIENT_ANALYTICS_CONFIGURATION, nil 
  }
  return CustomModesEnum(0), fmt.Errorf("not a valid CustomModesEnum string")
}


func CustomModesEnumPtr(v CustomModesEnum) *CustomModesEnum { return &v }

func (p CustomModesEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *CustomModesEnum) UnmarshalText(text []byte) error {
q, err := CustomModesEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *CustomModesEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = CustomModesEnum(v)
return nil
}

func (p * CustomModesEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SecurityCenterSettingsTypeEnum int64
const (
  SecurityCenterSettingsTypeEnum_NOT_APPLICABLE SecurityCenterSettingsTypeEnum = 0
  SecurityCenterSettingsTypeEnum_NOT_SET SecurityCenterSettingsTypeEnum = 1
  SecurityCenterSettingsTypeEnum_SET SecurityCenterSettingsTypeEnum = 2
  SecurityCenterSettingsTypeEnum_NEED_ENFORCED_INPUT SecurityCenterSettingsTypeEnum = 3
)

func (p SecurityCenterSettingsTypeEnum) String() string {
  switch p {
  case SecurityCenterSettingsTypeEnum_NOT_APPLICABLE: return "NOT_APPLICABLE"
  case SecurityCenterSettingsTypeEnum_NOT_SET: return "NOT_SET"
  case SecurityCenterSettingsTypeEnum_SET: return "SET"
  case SecurityCenterSettingsTypeEnum_NEED_ENFORCED_INPUT: return "NEED_ENFORCED_INPUT"
  }
  return "<UNSET>"
}

func SecurityCenterSettingsTypeEnumFromString(s string) (SecurityCenterSettingsTypeEnum, error) {
  switch s {
  case "NOT_APPLICABLE": return SecurityCenterSettingsTypeEnum_NOT_APPLICABLE, nil 
  case "NOT_SET": return SecurityCenterSettingsTypeEnum_NOT_SET, nil 
  case "SET": return SecurityCenterSettingsTypeEnum_SET, nil 
  case "NEED_ENFORCED_INPUT": return SecurityCenterSettingsTypeEnum_NEED_ENFORCED_INPUT, nil 
  }
  return SecurityCenterSettingsTypeEnum(0), fmt.Errorf("not a valid SecurityCenterSettingsTypeEnum string")
}


func SecurityCenterSettingsTypeEnumPtr(v SecurityCenterSettingsTypeEnum) *SecurityCenterSettingsTypeEnum { return &v }

func (p SecurityCenterSettingsTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SecurityCenterSettingsTypeEnum) UnmarshalText(text []byte) error {
q, err := SecurityCenterSettingsTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SecurityCenterSettingsTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SecurityCenterSettingsTypeEnum(v)
return nil
}

func (p * SecurityCenterSettingsTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AccountMigrationPincodeTypeEnum int64
const (
  AccountMigrationPincodeTypeEnum_NOT_APPLICABLE AccountMigrationPincodeTypeEnum = 0
  AccountMigrationPincodeTypeEnum_NOT_SET AccountMigrationPincodeTypeEnum = 1
  AccountMigrationPincodeTypeEnum_SET AccountMigrationPincodeTypeEnum = 2
  AccountMigrationPincodeTypeEnum_NEED_ENFORCED_INPUT AccountMigrationPincodeTypeEnum = 3
)

func (p AccountMigrationPincodeTypeEnum) String() string {
  switch p {
  case AccountMigrationPincodeTypeEnum_NOT_APPLICABLE: return "NOT_APPLICABLE"
  case AccountMigrationPincodeTypeEnum_NOT_SET: return "NOT_SET"
  case AccountMigrationPincodeTypeEnum_SET: return "SET"
  case AccountMigrationPincodeTypeEnum_NEED_ENFORCED_INPUT: return "NEED_ENFORCED_INPUT"
  }
  return "<UNSET>"
}

func AccountMigrationPincodeTypeEnumFromString(s string) (AccountMigrationPincodeTypeEnum, error) {
  switch s {
  case "NOT_APPLICABLE": return AccountMigrationPincodeTypeEnum_NOT_APPLICABLE, nil 
  case "NOT_SET": return AccountMigrationPincodeTypeEnum_NOT_SET, nil 
  case "SET": return AccountMigrationPincodeTypeEnum_SET, nil 
  case "NEED_ENFORCED_INPUT": return AccountMigrationPincodeTypeEnum_NEED_ENFORCED_INPUT, nil 
  }
  return AccountMigrationPincodeTypeEnum(0), fmt.Errorf("not a valid AccountMigrationPincodeTypeEnum string")
}


func AccountMigrationPincodeTypeEnumPtr(v AccountMigrationPincodeTypeEnum) *AccountMigrationPincodeTypeEnum { return &v }

func (p AccountMigrationPincodeTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AccountMigrationPincodeTypeEnum) UnmarshalText(text []byte) error {
q, err := AccountMigrationPincodeTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AccountMigrationPincodeTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AccountMigrationPincodeTypeEnum(v)
return nil
}

func (p * AccountMigrationPincodeTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PrivacyAgeResultEnum int64
const (
  PrivacyAgeResultEnum_OVER PrivacyAgeResultEnum = 1
  PrivacyAgeResultEnum_UNDER PrivacyAgeResultEnum = 2
  PrivacyAgeResultEnum_UNDEFINED PrivacyAgeResultEnum = 3
)

func (p PrivacyAgeResultEnum) String() string {
  switch p {
  case PrivacyAgeResultEnum_OVER: return "OVER"
  case PrivacyAgeResultEnum_UNDER: return "UNDER"
  case PrivacyAgeResultEnum_UNDEFINED: return "UNDEFINED"
  }
  return "<UNSET>"
}

func PrivacyAgeResultEnumFromString(s string) (PrivacyAgeResultEnum, error) {
  switch s {
  case "OVER": return PrivacyAgeResultEnum_OVER, nil 
  case "UNDER": return PrivacyAgeResultEnum_UNDER, nil 
  case "UNDEFINED": return PrivacyAgeResultEnum_UNDEFINED, nil 
  }
  return PrivacyAgeResultEnum(0), fmt.Errorf("not a valid PrivacyAgeResultEnum string")
}


func PrivacyAgeResultEnumPtr(v PrivacyAgeResultEnum) *PrivacyAgeResultEnum { return &v }

func (p PrivacyAgeResultEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PrivacyAgeResultEnum) UnmarshalText(text []byte) error {
q, err := PrivacyAgeResultEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PrivacyAgeResultEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PrivacyAgeResultEnum(v)
return nil
}

func (p * PrivacyAgeResultEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SharePersonalInfoToFriendsEnum int64
const (
  SharePersonalInfoToFriendsEnum_NEVER_SHOW SharePersonalInfoToFriendsEnum = 0
  SharePersonalInfoToFriendsEnum_ONE_WAY SharePersonalInfoToFriendsEnum = 1
  SharePersonalInfoToFriendsEnum_MUTUAL SharePersonalInfoToFriendsEnum = 2
)

func (p SharePersonalInfoToFriendsEnum) String() string {
  switch p {
  case SharePersonalInfoToFriendsEnum_NEVER_SHOW: return "NEVER_SHOW"
  case SharePersonalInfoToFriendsEnum_ONE_WAY: return "ONE_WAY"
  case SharePersonalInfoToFriendsEnum_MUTUAL: return "MUTUAL"
  }
  return "<UNSET>"
}

func SharePersonalInfoToFriendsEnumFromString(s string) (SharePersonalInfoToFriendsEnum, error) {
  switch s {
  case "NEVER_SHOW": return SharePersonalInfoToFriendsEnum_NEVER_SHOW, nil 
  case "ONE_WAY": return SharePersonalInfoToFriendsEnum_ONE_WAY, nil 
  case "MUTUAL": return SharePersonalInfoToFriendsEnum_MUTUAL, nil 
  }
  return SharePersonalInfoToFriendsEnum(0), fmt.Errorf("not a valid SharePersonalInfoToFriendsEnum string")
}


func SharePersonalInfoToFriendsEnumPtr(v SharePersonalInfoToFriendsEnum) *SharePersonalInfoToFriendsEnum { return &v }

func (p SharePersonalInfoToFriendsEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SharePersonalInfoToFriendsEnum) UnmarshalText(text []byte) error {
q, err := SharePersonalInfoToFriendsEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SharePersonalInfoToFriendsEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SharePersonalInfoToFriendsEnum(v)
return nil
}

func (p * SharePersonalInfoToFriendsEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type StatusMessageHistoryEnum int64
const (
  StatusMessageHistoryEnum_NONE StatusMessageHistoryEnum = 1
  StatusMessageHistoryEnum_ALL StatusMessageHistoryEnum = 2
)

func (p StatusMessageHistoryEnum) String() string {
  switch p {
  case StatusMessageHistoryEnum_NONE: return "NONE"
  case StatusMessageHistoryEnum_ALL: return "ALL"
  }
  return "<UNSET>"
}

func StatusMessageHistoryEnumFromString(s string) (StatusMessageHistoryEnum, error) {
  switch s {
  case "NONE": return StatusMessageHistoryEnum_NONE, nil 
  case "ALL": return StatusMessageHistoryEnum_ALL, nil 
  }
  return StatusMessageHistoryEnum(0), fmt.Errorf("not a valid StatusMessageHistoryEnum string")
}


func StatusMessageHistoryEnumPtr(v StatusMessageHistoryEnum) *StatusMessageHistoryEnum { return &v }

func (p StatusMessageHistoryEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *StatusMessageHistoryEnum) UnmarshalText(text []byte) error {
q, err := StatusMessageHistoryEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *StatusMessageHistoryEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = StatusMessageHistoryEnum(v)
return nil
}

func (p * StatusMessageHistoryEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AllowProfileHistoryEnum int64
const (
  AllowProfileHistoryEnum_OWNER AllowProfileHistoryEnum = 0
  AllowProfileHistoryEnum_FRIEND AllowProfileHistoryEnum = 1
)

func (p AllowProfileHistoryEnum) String() string {
  switch p {
  case AllowProfileHistoryEnum_OWNER: return "OWNER"
  case AllowProfileHistoryEnum_FRIEND: return "FRIEND"
  }
  return "<UNSET>"
}

func AllowProfileHistoryEnumFromString(s string) (AllowProfileHistoryEnum, error) {
  switch s {
  case "OWNER": return AllowProfileHistoryEnum_OWNER, nil 
  case "FRIEND": return AllowProfileHistoryEnum_FRIEND, nil 
  }
  return AllowProfileHistoryEnum(0), fmt.Errorf("not a valid AllowProfileHistoryEnum string")
}


func AllowProfileHistoryEnumPtr(v AllowProfileHistoryEnum) *AllowProfileHistoryEnum { return &v }

func (p AllowProfileHistoryEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AllowProfileHistoryEnum) UnmarshalText(text []byte) error {
q, err := AllowProfileHistoryEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AllowProfileHistoryEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AllowProfileHistoryEnum(v)
return nil
}

func (p * AllowProfileHistoryEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type StickerResourceEnum int64
const (
  StickerResourceEnum_STATIC StickerResourceEnum = 1
  StickerResourceEnum_ANIMATION StickerResourceEnum = 2
  StickerResourceEnum_SOUND StickerResourceEnum = 3
  StickerResourceEnum_ANIMATION_SOUND StickerResourceEnum = 4
  StickerResourceEnum_POPUP StickerResourceEnum = 5
  StickerResourceEnum_POPUP_SOUND StickerResourceEnum = 6
  StickerResourceEnum_NAME_TEXT StickerResourceEnum = 7
)

func (p StickerResourceEnum) String() string {
  switch p {
  case StickerResourceEnum_STATIC: return "STATIC"
  case StickerResourceEnum_ANIMATION: return "ANIMATION"
  case StickerResourceEnum_SOUND: return "SOUND"
  case StickerResourceEnum_ANIMATION_SOUND: return "ANIMATION_SOUND"
  case StickerResourceEnum_POPUP: return "POPUP"
  case StickerResourceEnum_POPUP_SOUND: return "POPUP_SOUND"
  case StickerResourceEnum_NAME_TEXT: return "NAME_TEXT"
  }
  return "<UNSET>"
}

func StickerResourceEnumFromString(s string) (StickerResourceEnum, error) {
  switch s {
  case "STATIC": return StickerResourceEnum_STATIC, nil 
  case "ANIMATION": return StickerResourceEnum_ANIMATION, nil 
  case "SOUND": return StickerResourceEnum_SOUND, nil 
  case "ANIMATION_SOUND": return StickerResourceEnum_ANIMATION_SOUND, nil 
  case "POPUP": return StickerResourceEnum_POPUP, nil 
  case "POPUP_SOUND": return StickerResourceEnum_POPUP_SOUND, nil 
  case "NAME_TEXT": return StickerResourceEnum_NAME_TEXT, nil 
  }
  return StickerResourceEnum(0), fmt.Errorf("not a valid StickerResourceEnum string")
}


func StickerResourceEnumPtr(v StickerResourceEnum) *StickerResourceEnum { return &v }

func (p StickerResourceEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *StickerResourceEnum) UnmarshalText(text []byte) error {
q, err := StickerResourceEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *StickerResourceEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = StickerResourceEnum(v)
return nil
}

func (p * StickerResourceEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SubTypeEnum int64
const (
  SubTypeEnum_GENERAL SubTypeEnum = 0
  SubTypeEnum_CREATORS SubTypeEnum = 1
  SubTypeEnum_STICON SubTypeEnum = 2
)

func (p SubTypeEnum) String() string {
  switch p {
  case SubTypeEnum_GENERAL: return "GENERAL"
  case SubTypeEnum_CREATORS: return "CREATORS"
  case SubTypeEnum_STICON: return "STICON"
  }
  return "<UNSET>"
}

func SubTypeEnumFromString(s string) (SubTypeEnum, error) {
  switch s {
  case "GENERAL": return SubTypeEnum_GENERAL, nil 
  case "CREATORS": return SubTypeEnum_CREATORS, nil 
  case "STICON": return SubTypeEnum_STICON, nil 
  }
  return SubTypeEnum(0), fmt.Errorf("not a valid SubTypeEnum string")
}


func SubTypeEnumPtr(v SubTypeEnum) *SubTypeEnum { return &v }

func (p SubTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SubTypeEnum) UnmarshalText(text []byte) error {
q, err := SubTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SubTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SubTypeEnum(v)
return nil
}

func (p * SubTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ResultTypeEnum int64
const (
  ResultTypeEnum_SUCCESS ResultTypeEnum = 1
  ResultTypeEnum_REQUIRE_QRCODE ResultTypeEnum = 2
  ResultTypeEnum_REQUIRE_DEVICE_CONFIRM ResultTypeEnum = 3
  ResultTypeEnum_REQUIRE_SMS_CONFIRM ResultTypeEnum = 4
)

func (p ResultTypeEnum) String() string {
  switch p {
  case ResultTypeEnum_SUCCESS: return "SUCCESS"
  case ResultTypeEnum_REQUIRE_QRCODE: return "REQUIRE_QRCODE"
  case ResultTypeEnum_REQUIRE_DEVICE_CONFIRM: return "REQUIRE_DEVICE_CONFIRM"
  case ResultTypeEnum_REQUIRE_SMS_CONFIRM: return "REQUIRE_SMS_CONFIRM"
  }
  return "<UNSET>"
}

func ResultTypeEnumFromString(s string) (ResultTypeEnum, error) {
  switch s {
  case "SUCCESS": return ResultTypeEnum_SUCCESS, nil 
  case "REQUIRE_QRCODE": return ResultTypeEnum_REQUIRE_QRCODE, nil 
  case "REQUIRE_DEVICE_CONFIRM": return ResultTypeEnum_REQUIRE_DEVICE_CONFIRM, nil 
  case "REQUIRE_SMS_CONFIRM": return ResultTypeEnum_REQUIRE_SMS_CONFIRM, nil 
  }
  return ResultTypeEnum(0), fmt.Errorf("not a valid ResultTypeEnum string")
}


func ResultTypeEnumPtr(v ResultTypeEnum) *ResultTypeEnum { return &v }

func (p ResultTypeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ResultTypeEnum) UnmarshalText(text []byte) error {
q, err := ResultTypeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ResultTypeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ResultTypeEnum(v)
return nil
}

func (p * ResultTypeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MethodEnum int64
const (
  MethodEnum_NO_AVAILABLE MethodEnum = 0
  MethodEnum_PIN_VIA_SMS MethodEnum = 1
  MethodEnum_CALLERID_INDIGO MethodEnum = 2
  MethodEnum_PIN_VIA_TTS MethodEnum = 4
  MethodEnum_SKIP MethodEnum = 10
)

func (p MethodEnum) String() string {
  switch p {
  case MethodEnum_NO_AVAILABLE: return "NO_AVAILABLE"
  case MethodEnum_PIN_VIA_SMS: return "PIN_VIA_SMS"
  case MethodEnum_CALLERID_INDIGO: return "CALLERID_INDIGO"
  case MethodEnum_PIN_VIA_TTS: return "PIN_VIA_TTS"
  case MethodEnum_SKIP: return "SKIP"
  }
  return "<UNSET>"
}

func MethodEnumFromString(s string) (MethodEnum, error) {
  switch s {
  case "NO_AVAILABLE": return MethodEnum_NO_AVAILABLE, nil 
  case "PIN_VIA_SMS": return MethodEnum_PIN_VIA_SMS, nil 
  case "CALLERID_INDIGO": return MethodEnum_CALLERID_INDIGO, nil 
  case "PIN_VIA_TTS": return MethodEnum_PIN_VIA_TTS, nil 
  case "SKIP": return MethodEnum_SKIP, nil 
  }
  return MethodEnum(0), fmt.Errorf("not a valid MethodEnum string")
}


func MethodEnumPtr(v MethodEnum) *MethodEnum { return &v }

func (p MethodEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MethodEnum) UnmarshalText(text []byte) error {
q, err := MethodEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MethodEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MethodEnum(v)
return nil
}

func (p * MethodEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SalesStateEnum int64
const (
  SalesStateEnum_ON_SALE SalesStateEnum = 0
  SalesStateEnum_OUTDATED_VERSION SalesStateEnum = 1
  SalesStateEnum_NOT_ON_SALE SalesStateEnum = 2
)

func (p SalesStateEnum) String() string {
  switch p {
  case SalesStateEnum_ON_SALE: return "ON_SALE"
  case SalesStateEnum_OUTDATED_VERSION: return "OUTDATED_VERSION"
  case SalesStateEnum_NOT_ON_SALE: return "NOT_ON_SALE"
  }
  return "<UNSET>"
}

func SalesStateEnumFromString(s string) (SalesStateEnum, error) {
  switch s {
  case "ON_SALE": return SalesStateEnum_ON_SALE, nil 
  case "OUTDATED_VERSION": return SalesStateEnum_OUTDATED_VERSION, nil 
  case "NOT_ON_SALE": return SalesStateEnum_NOT_ON_SALE, nil 
  }
  return SalesStateEnum(0), fmt.Errorf("not a valid SalesStateEnum string")
}


func SalesStateEnumPtr(v SalesStateEnum) *SalesStateEnum { return &v }

func (p SalesStateEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SalesStateEnum) UnmarshalText(text []byte) error {
q, err := SalesStateEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SalesStateEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SalesStateEnum(v)
return nil
}

func (p * SalesStateEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AvailabilityEnum int64
const (
  AvailabilityEnum_PURCHASE_ONLY AvailabilityEnum = 0
  AvailabilityEnum_PURCHASE_OR_SUBSCRIPTION AvailabilityEnum = 1
  AvailabilityEnum_SUBSCRIPTION_ONLY AvailabilityEnum = 2
)

func (p AvailabilityEnum) String() string {
  switch p {
  case AvailabilityEnum_PURCHASE_ONLY: return "PURCHASE_ONLY"
  case AvailabilityEnum_PURCHASE_OR_SUBSCRIPTION: return "PURCHASE_OR_SUBSCRIPTION"
  case AvailabilityEnum_SUBSCRIPTION_ONLY: return "SUBSCRIPTION_ONLY"
  }
  return "<UNSET>"
}

func AvailabilityEnumFromString(s string) (AvailabilityEnum, error) {
  switch s {
  case "PURCHASE_ONLY": return AvailabilityEnum_PURCHASE_ONLY, nil 
  case "PURCHASE_OR_SUBSCRIPTION": return AvailabilityEnum_PURCHASE_OR_SUBSCRIPTION, nil 
  case "SUBSCRIPTION_ONLY": return AvailabilityEnum_SUBSCRIPTION_ONLY, nil 
  }
  return AvailabilityEnum(0), fmt.Errorf("not a valid AvailabilityEnum string")
}


func AvailabilityEnumPtr(v AvailabilityEnum) *AvailabilityEnum { return &v }

func (p AvailabilityEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AvailabilityEnum) UnmarshalText(text []byte) error {
q, err := AvailabilityEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AvailabilityEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AvailabilityEnum(v)
return nil
}

func (p * AvailabilityEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactSettingEnum int64
const (
  ContactSettingEnum_CONTACT_SETTING_NOTIFICATION_DISABLE ContactSettingEnum = 1
  ContactSettingEnum_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE ContactSettingEnum = 2
  ContactSettingEnum_CONTACT_SETTING_CONTACT_HIDE ContactSettingEnum = 4
  ContactSettingEnum_CONTACT_SETTING_FAVORITE ContactSettingEnum = 8
  ContactSettingEnum_CONTACT_SETTING_DELETE ContactSettingEnum = 16
)

func (p ContactSettingEnum) String() string {
  switch p {
  case ContactSettingEnum_CONTACT_SETTING_NOTIFICATION_DISABLE: return "CONTACT_SETTING_NOTIFICATION_DISABLE"
  case ContactSettingEnum_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE: return "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE"
  case ContactSettingEnum_CONTACT_SETTING_CONTACT_HIDE: return "CONTACT_SETTING_CONTACT_HIDE"
  case ContactSettingEnum_CONTACT_SETTING_FAVORITE: return "CONTACT_SETTING_FAVORITE"
  case ContactSettingEnum_CONTACT_SETTING_DELETE: return "CONTACT_SETTING_DELETE"
  }
  return "<UNSET>"
}

func ContactSettingEnumFromString(s string) (ContactSettingEnum, error) {
  switch s {
  case "CONTACT_SETTING_NOTIFICATION_DISABLE": return ContactSettingEnum_CONTACT_SETTING_NOTIFICATION_DISABLE, nil 
  case "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE": return ContactSettingEnum_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE, nil 
  case "CONTACT_SETTING_CONTACT_HIDE": return ContactSettingEnum_CONTACT_SETTING_CONTACT_HIDE, nil 
  case "CONTACT_SETTING_FAVORITE": return ContactSettingEnum_CONTACT_SETTING_FAVORITE, nil 
  case "CONTACT_SETTING_DELETE": return ContactSettingEnum_CONTACT_SETTING_DELETE, nil 
  }
  return ContactSettingEnum(0), fmt.Errorf("not a valid ContactSettingEnum string")
}


func ContactSettingEnumPtr(v ContactSettingEnum) *ContactSettingEnum { return &v }

func (p ContactSettingEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactSettingEnum) UnmarshalText(text []byte) error {
q, err := ContactSettingEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactSettingEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactSettingEnum(v)
return nil
}

func (p * ContactSettingEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SettingsAttributeEnum int64
const (
  SettingsAttributeEnum_ALL SettingsAttributeEnum = 2147483647
  SettingsAttributeEnum_NOTIFICATION_ENABLE SettingsAttributeEnum = 1
  SettingsAttributeEnum_NOTIFICATION_MUTE_EXPIRATION SettingsAttributeEnum = 2
  SettingsAttributeEnum_NOTIFICATION_NEW_MESSAGE SettingsAttributeEnum = 4
  SettingsAttributeEnum_NOTIFICATION_GROUP_INVITATION SettingsAttributeEnum = 8
  SettingsAttributeEnum_NOTIFICATION_SHOW_MESSAGE SettingsAttributeEnum = 16
  SettingsAttributeEnum_NOTIFICATION_INCOMING_CALL SettingsAttributeEnum = 32
  SettingsAttributeEnum_NOTIFICATION_SOUND_MESSAGE SettingsAttributeEnum = 256
  SettingsAttributeEnum_NOTIFICATION_SOUND_GROUP SettingsAttributeEnum = 512
  SettingsAttributeEnum_NOTIFICATION_DISABLED_WITH_SUB SettingsAttributeEnum = 65536
  SettingsAttributeEnum_NOTIFICATION_PAYMENT SettingsAttributeEnum = 131072
  SettingsAttributeEnum_PRIVACY_SYNC_CONTACTS SettingsAttributeEnum = 64
  SettingsAttributeEnum_PRIVACY_SEARCH_BY_PHONE_NUMBER SettingsAttributeEnum = 128
  SettingsAttributeEnum_PRIVACY_SEARCH_BY_USERID SettingsAttributeEnum = 8192
  SettingsAttributeEnum_PRIVACY_SEARCH_BY_EMAIL SettingsAttributeEnum = 16384
  SettingsAttributeEnum_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN SettingsAttributeEnum = 2097152
  SettingsAttributeEnum_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME SettingsAttributeEnum = 8388608
  SettingsAttributeEnum_PRIVACY_ALLOW_FRIEND_REQUEST SettingsAttributeEnum = 1073741824
  SettingsAttributeEnum_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND SettingsAttributeEnum = 33554432
  SettingsAttributeEnum_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL SettingsAttributeEnum = 67108864
  SettingsAttributeEnum_PRIVACY_AGREE_USE_PAIDCALL SettingsAttributeEnum = 134217728
  SettingsAttributeEnum_CONTACT_MY_TICKET SettingsAttributeEnum = 1024
  SettingsAttributeEnum_IDENTITY_PROVIDER SettingsAttributeEnum = 2048
  SettingsAttributeEnum_IDENTITY_IDENTIFIER SettingsAttributeEnum = 4096
  SettingsAttributeEnum_SNS_ACCOUNT SettingsAttributeEnum = 524288
  SettingsAttributeEnum_PHONE_REGISTRATION SettingsAttributeEnum = 1048576
  SettingsAttributeEnum_PREFERENCE_LOCALE SettingsAttributeEnum = 32768
  SettingsAttributeEnum_CUSTOM_MODE SettingsAttributeEnum = 4194304
  SettingsAttributeEnum_EMAIL_CONFIRMATION_STATUS SettingsAttributeEnum = 16777216
  SettingsAttributeEnum_ACCOUNT_MIGRATION_PINCODE SettingsAttributeEnum = 268435456
  SettingsAttributeEnum_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE SettingsAttributeEnum = 536870912
  SettingsAttributeEnum_SECURITY_CENTER_SETTINGS SettingsAttributeEnum = 262144
)

func (p SettingsAttributeEnum) String() string {
  switch p {
  case SettingsAttributeEnum_ALL: return "ALL"
  case SettingsAttributeEnum_NOTIFICATION_ENABLE: return "NOTIFICATION_ENABLE"
  case SettingsAttributeEnum_NOTIFICATION_MUTE_EXPIRATION: return "NOTIFICATION_MUTE_EXPIRATION"
  case SettingsAttributeEnum_NOTIFICATION_NEW_MESSAGE: return "NOTIFICATION_NEW_MESSAGE"
  case SettingsAttributeEnum_NOTIFICATION_GROUP_INVITATION: return "NOTIFICATION_GROUP_INVITATION"
  case SettingsAttributeEnum_NOTIFICATION_SHOW_MESSAGE: return "NOTIFICATION_SHOW_MESSAGE"
  case SettingsAttributeEnum_NOTIFICATION_INCOMING_CALL: return "NOTIFICATION_INCOMING_CALL"
  case SettingsAttributeEnum_NOTIFICATION_SOUND_MESSAGE: return "NOTIFICATION_SOUND_MESSAGE"
  case SettingsAttributeEnum_NOTIFICATION_SOUND_GROUP: return "NOTIFICATION_SOUND_GROUP"
  case SettingsAttributeEnum_NOTIFICATION_DISABLED_WITH_SUB: return "NOTIFICATION_DISABLED_WITH_SUB"
  case SettingsAttributeEnum_NOTIFICATION_PAYMENT: return "NOTIFICATION_PAYMENT"
  case SettingsAttributeEnum_PRIVACY_SYNC_CONTACTS: return "PRIVACY_SYNC_CONTACTS"
  case SettingsAttributeEnum_PRIVACY_SEARCH_BY_PHONE_NUMBER: return "PRIVACY_SEARCH_BY_PHONE_NUMBER"
  case SettingsAttributeEnum_PRIVACY_SEARCH_BY_USERID: return "PRIVACY_SEARCH_BY_USERID"
  case SettingsAttributeEnum_PRIVACY_SEARCH_BY_EMAIL: return "PRIVACY_SEARCH_BY_EMAIL"
  case SettingsAttributeEnum_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN: return "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN"
  case SettingsAttributeEnum_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME: return "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME"
  case SettingsAttributeEnum_PRIVACY_ALLOW_FRIEND_REQUEST: return "PRIVACY_ALLOW_FRIEND_REQUEST"
  case SettingsAttributeEnum_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND: return "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND"
  case SettingsAttributeEnum_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL: return "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL"
  case SettingsAttributeEnum_PRIVACY_AGREE_USE_PAIDCALL: return "PRIVACY_AGREE_USE_PAIDCALL"
  case SettingsAttributeEnum_CONTACT_MY_TICKET: return "CONTACT_MY_TICKET"
  case SettingsAttributeEnum_IDENTITY_PROVIDER: return "IDENTITY_PROVIDER"
  case SettingsAttributeEnum_IDENTITY_IDENTIFIER: return "IDENTITY_IDENTIFIER"
  case SettingsAttributeEnum_SNS_ACCOUNT: return "SNS_ACCOUNT"
  case SettingsAttributeEnum_PHONE_REGISTRATION: return "PHONE_REGISTRATION"
  case SettingsAttributeEnum_PREFERENCE_LOCALE: return "PREFERENCE_LOCALE"
  case SettingsAttributeEnum_CUSTOM_MODE: return "CUSTOM_MODE"
  case SettingsAttributeEnum_EMAIL_CONFIRMATION_STATUS: return "EMAIL_CONFIRMATION_STATUS"
  case SettingsAttributeEnum_ACCOUNT_MIGRATION_PINCODE: return "ACCOUNT_MIGRATION_PINCODE"
  case SettingsAttributeEnum_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE: return "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE"
  case SettingsAttributeEnum_SECURITY_CENTER_SETTINGS: return "SECURITY_CENTER_SETTINGS"
  }
  return "<UNSET>"
}

func SettingsAttributeEnumFromString(s string) (SettingsAttributeEnum, error) {
  switch s {
  case "ALL": return SettingsAttributeEnum_ALL, nil 
  case "NOTIFICATION_ENABLE": return SettingsAttributeEnum_NOTIFICATION_ENABLE, nil 
  case "NOTIFICATION_MUTE_EXPIRATION": return SettingsAttributeEnum_NOTIFICATION_MUTE_EXPIRATION, nil 
  case "NOTIFICATION_NEW_MESSAGE": return SettingsAttributeEnum_NOTIFICATION_NEW_MESSAGE, nil 
  case "NOTIFICATION_GROUP_INVITATION": return SettingsAttributeEnum_NOTIFICATION_GROUP_INVITATION, nil 
  case "NOTIFICATION_SHOW_MESSAGE": return SettingsAttributeEnum_NOTIFICATION_SHOW_MESSAGE, nil 
  case "NOTIFICATION_INCOMING_CALL": return SettingsAttributeEnum_NOTIFICATION_INCOMING_CALL, nil 
  case "NOTIFICATION_SOUND_MESSAGE": return SettingsAttributeEnum_NOTIFICATION_SOUND_MESSAGE, nil 
  case "NOTIFICATION_SOUND_GROUP": return SettingsAttributeEnum_NOTIFICATION_SOUND_GROUP, nil 
  case "NOTIFICATION_DISABLED_WITH_SUB": return SettingsAttributeEnum_NOTIFICATION_DISABLED_WITH_SUB, nil 
  case "NOTIFICATION_PAYMENT": return SettingsAttributeEnum_NOTIFICATION_PAYMENT, nil 
  case "PRIVACY_SYNC_CONTACTS": return SettingsAttributeEnum_PRIVACY_SYNC_CONTACTS, nil 
  case "PRIVACY_SEARCH_BY_PHONE_NUMBER": return SettingsAttributeEnum_PRIVACY_SEARCH_BY_PHONE_NUMBER, nil 
  case "PRIVACY_SEARCH_BY_USERID": return SettingsAttributeEnum_PRIVACY_SEARCH_BY_USERID, nil 
  case "PRIVACY_SEARCH_BY_EMAIL": return SettingsAttributeEnum_PRIVACY_SEARCH_BY_EMAIL, nil 
  case "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN": return SettingsAttributeEnum_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN, nil 
  case "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME": return SettingsAttributeEnum_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME, nil 
  case "PRIVACY_ALLOW_FRIEND_REQUEST": return SettingsAttributeEnum_PRIVACY_ALLOW_FRIEND_REQUEST, nil 
  case "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND": return SettingsAttributeEnum_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND, nil 
  case "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL": return SettingsAttributeEnum_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL, nil 
  case "PRIVACY_AGREE_USE_PAIDCALL": return SettingsAttributeEnum_PRIVACY_AGREE_USE_PAIDCALL, nil 
  case "CONTACT_MY_TICKET": return SettingsAttributeEnum_CONTACT_MY_TICKET, nil 
  case "IDENTITY_PROVIDER": return SettingsAttributeEnum_IDENTITY_PROVIDER, nil 
  case "IDENTITY_IDENTIFIER": return SettingsAttributeEnum_IDENTITY_IDENTIFIER, nil 
  case "SNS_ACCOUNT": return SettingsAttributeEnum_SNS_ACCOUNT, nil 
  case "PHONE_REGISTRATION": return SettingsAttributeEnum_PHONE_REGISTRATION, nil 
  case "PREFERENCE_LOCALE": return SettingsAttributeEnum_PREFERENCE_LOCALE, nil 
  case "CUSTOM_MODE": return SettingsAttributeEnum_CUSTOM_MODE, nil 
  case "EMAIL_CONFIRMATION_STATUS": return SettingsAttributeEnum_EMAIL_CONFIRMATION_STATUS, nil 
  case "ACCOUNT_MIGRATION_PINCODE": return SettingsAttributeEnum_ACCOUNT_MIGRATION_PINCODE, nil 
  case "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE": return SettingsAttributeEnum_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE, nil 
  case "SECURITY_CENTER_SETTINGS": return SettingsAttributeEnum_SECURITY_CENTER_SETTINGS, nil 
  }
  return SettingsAttributeEnum(0), fmt.Errorf("not a valid SettingsAttributeEnum string")
}


func SettingsAttributeEnumPtr(v SettingsAttributeEnum) *SettingsAttributeEnum { return &v }

func (p SettingsAttributeEnum) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SettingsAttributeEnum) UnmarshalText(text []byte) error {
q, err := SettingsAttributeEnumFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SettingsAttributeEnum) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SettingsAttributeEnum(v)
return nil
}

func (p * SettingsAttributeEnum) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Host
//  - Removed
type ChannelDomainStruct struct {
  Host string `thrift:"host,1" db:"host" json:"host"`
  Removed bool `thrift:"removed,2" db:"removed" json:"removed"`
}

func NewChannelDomainStruct() *ChannelDomainStruct {
  return &ChannelDomainStruct{}
}


func (p *ChannelDomainStruct) GetHost() string {
  return p.Host
}

func (p *ChannelDomainStruct) GetRemoved() bool {
  return p.Removed
}
func (p *ChannelDomainStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelDomainStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *ChannelDomainStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Removed = v
}
  return nil
}

func (p *ChannelDomainStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChannelDomainStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelDomainStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := oprot.WriteString(string(p.Host)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *ChannelDomainStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("removed", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:removed: ", p), err) }
  if err := oprot.WriteBool(bool(p.Removed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.removed (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:removed: ", p), err) }
  return err
}

func (p *ChannelDomainStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelDomainStruct(%+v)", *p)
}

// Attributes:
//  - Name
//  - Certified
type ChannelProviderStruct struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Certified bool `thrift:"certified,2" db:"certified" json:"certified"`
}

func NewChannelProviderStruct() *ChannelProviderStruct {
  return &ChannelProviderStruct{}
}


func (p *ChannelProviderStruct) GetName() string {
  return p.Name
}

func (p *ChannelProviderStruct) GetCertified() bool {
  return p.Certified
}
func (p *ChannelProviderStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelProviderStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ChannelProviderStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Certified = v
}
  return nil
}

func (p *ChannelProviderStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChannelProviderStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelProviderStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ChannelProviderStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("certified", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:certified: ", p), err) }
  if err := oprot.WriteBool(bool(p.Certified)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.certified (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:certified: ", p), err) }
  return err
}

func (p *ChannelProviderStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelProviderStruct(%+v)", *p)
}

// Attributes:
//  - BaseUrl
//  - Token
type WebAuthStuct struct {
  BaseUrl string `thrift:"baseUrl,1" db:"baseUrl" json:"baseUrl"`
  Token string `thrift:"token,2" db:"token" json:"token"`
}

func NewWebAuthStuct() *WebAuthStuct {
  return &WebAuthStuct{}
}


func (p *WebAuthStuct) GetBaseUrl() string {
  return p.BaseUrl
}

func (p *WebAuthStuct) GetToken() string {
  return p.Token
}
func (p *WebAuthStuct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WebAuthStuct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BaseUrl = v
}
  return nil
}

func (p *WebAuthStuct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *WebAuthStuct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WebAuthStuct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WebAuthStuct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("baseUrl", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:baseUrl: ", p), err) }
  if err := oprot.WriteString(string(p.BaseUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.baseUrl (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:baseUrl: ", p), err) }
  return err
}

func (p *WebAuthStuct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err) }
  return err
}

func (p *WebAuthStuct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WebAuthStuct(%+v)", *p)
}

// Attributes:
//  - RadiusMeters
//  - RadiusConfidence
type GeolocationAccuracyStruct struct {
  RadiusMeters float64 `thrift:"radiusMeters,1" db:"radiusMeters" json:"radiusMeters"`
  RadiusConfidence float64 `thrift:"radiusConfidence,2" db:"radiusConfidence" json:"radiusConfidence"`
}

func NewGeolocationAccuracyStruct() *GeolocationAccuracyStruct {
  return &GeolocationAccuracyStruct{}
}


func (p *GeolocationAccuracyStruct) GetRadiusMeters() float64 {
  return p.RadiusMeters
}

func (p *GeolocationAccuracyStruct) GetRadiusConfidence() float64 {
  return p.RadiusConfidence
}
func (p *GeolocationAccuracyStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GeolocationAccuracyStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RadiusMeters = v
}
  return nil
}

func (p *GeolocationAccuracyStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RadiusConfidence = v
}
  return nil
}

func (p *GeolocationAccuracyStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GeolocationAccuracyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GeolocationAccuracyStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("radiusMeters", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:radiusMeters: ", p), err) }
  if err := oprot.WriteDouble(float64(p.RadiusMeters)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.radiusMeters (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:radiusMeters: ", p), err) }
  return err
}

func (p *GeolocationAccuracyStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("radiusConfidence", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:radiusConfidence: ", p), err) }
  if err := oprot.WriteDouble(float64(p.RadiusConfidence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.radiusConfidence (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:radiusConfidence: ", p), err) }
  return err
}

func (p *GeolocationAccuracyStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GeolocationAccuracyStruct(%+v)", *p)
}

// Attributes:
//  - Title
//  - Address
//  - Latitude
//  - Longitude
//  - Phone
//  - CategoryId
//  - Provider
//  - Accuracy
type LocationStuct struct {
  Title string `thrift:"title,1" db:"title" json:"title"`
  Address string `thrift:"address,2" db:"address" json:"address"`
  Latitude float64 `thrift:"latitude,3" db:"latitude" json:"latitude"`
  Longitude float64 `thrift:"longitude,4" db:"longitude" json:"longitude"`
  Phone string `thrift:"phone,5" db:"phone" json:"phone"`
  CategoryId string `thrift:"categoryId,6" db:"categoryId" json:"categoryId"`
  Provider ProviderEnum `thrift:"provider,7" db:"provider" json:"provider"`
  Accuracy *GeolocationAccuracyStruct `thrift:"accuracy,8" db:"accuracy" json:"accuracy"`
}

func NewLocationStuct() *LocationStuct {
  return &LocationStuct{}
}


func (p *LocationStuct) GetTitle() string {
  return p.Title
}

func (p *LocationStuct) GetAddress() string {
  return p.Address
}

func (p *LocationStuct) GetLatitude() float64 {
  return p.Latitude
}

func (p *LocationStuct) GetLongitude() float64 {
  return p.Longitude
}

func (p *LocationStuct) GetPhone() string {
  return p.Phone
}

func (p *LocationStuct) GetCategoryId() string {
  return p.CategoryId
}

func (p *LocationStuct) GetProvider() ProviderEnum {
  return p.Provider
}
var LocationStuct_Accuracy_DEFAULT *GeolocationAccuracyStruct
func (p *LocationStuct) GetAccuracy() *GeolocationAccuracyStruct {
  if !p.IsSetAccuracy() {
    return LocationStuct_Accuracy_DEFAULT
  }
return p.Accuracy
}
func (p *LocationStuct) IsSetAccuracy() bool {
  return p.Accuracy != nil
}

func (p *LocationStuct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LocationStuct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *LocationStuct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *LocationStuct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Latitude = v
}
  return nil
}

func (p *LocationStuct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Longitude = v
}
  return nil
}

func (p *LocationStuct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *LocationStuct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CategoryId = v
}
  return nil
}

func (p *LocationStuct)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := ProviderEnum(v)
  p.Provider = temp
}
  return nil
}

func (p *LocationStuct)  ReadField8(iprot thrift.TProtocol) error {
  p.Accuracy = &GeolocationAccuracyStruct{}
  if err := p.Accuracy.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Accuracy), err)
  }
  return nil
}

func (p *LocationStuct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LocationStuct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LocationStuct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err) }
  return err
}

func (p *LocationStuct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err) }
  return err
}

func (p *LocationStuct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latitude: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latitude (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latitude: ", p), err) }
  return err
}

func (p *LocationStuct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:longitude: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.longitude (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:longitude: ", p), err) }
  return err
}

func (p *LocationStuct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:phone: ", p), err) }
  return err
}

func (p *LocationStuct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("categoryId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:categoryId: ", p), err) }
  if err := oprot.WriteString(string(p.CategoryId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.categoryId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:categoryId: ", p), err) }
  return err
}

func (p *LocationStuct) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("provider", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:provider: ", p), err) }
  if err := oprot.WriteI32(int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:provider: ", p), err) }
  return err
}

func (p *LocationStuct) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accuracy", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:accuracy: ", p), err) }
  if err := p.Accuracy.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Accuracy), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:accuracy: ", p), err) }
  return err
}

func (p *LocationStuct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LocationStuct(%+v)", *p)
}

// Attributes:
//  - _from
//  - To
//  - ToType
//  - ID
//  - CreatedTime
//  - DeliveredTime
//  - Text
//  - Location
//  - HasContent
//  - ContentType
//  - ContentPreview
//  - ContentMetadata
//  - SessionId
//  - Chunks
//  - RelatedMessageId
//  - MessageRelationType
//  - ReadCount
//  - RelatedMessageServiceCode
type MessageStruct struct {
  _from string `thrift:"_from,1" db:"_from" json:"_from"`
  To string `thrift:"to,2" db:"to" json:"to"`
  ToType ToTypeEnum `thrift:"toType,3" db:"toType" json:"toType"`
  ID string `thrift:"id,4" db:"id" json:"id"`
  CreatedTime int64 `thrift:"createdTime,5" db:"createdTime" json:"createdTime"`
  DeliveredTime int64 `thrift:"deliveredTime,6" db:"deliveredTime" json:"deliveredTime"`
  // unused fields # 7 to 9
  Text string `thrift:"text,10" db:"text" json:"text"`
  Location *LocationStuct `thrift:"location,11" db:"location" json:"location"`
  // unused fields # 12 to 13
  HasContent bool `thrift:"hasContent,14" db:"hasContent" json:"hasContent"`
  ContentType ContentTypeEnum `thrift:"contentType,15" db:"contentType" json:"contentType"`
  // unused field # 16
  ContentPreview []byte `thrift:"contentPreview,17" db:"contentPreview" json:"contentPreview"`
  ContentMetadata map[string]string `thrift:"contentMetadata,18" db:"contentMetadata" json:"contentMetadata"`
  SessionId int8 `thrift:"sessionId,19" db:"sessionId" json:"sessionId"`
  Chunks [][]byte `thrift:"chunks,20" db:"chunks" json:"chunks"`
  RelatedMessageId string `thrift:"relatedMessageId,21" db:"relatedMessageId" json:"relatedMessageId"`
  MessageRelationType RelationTypeEnum `thrift:"messageRelationType,22" db:"messageRelationType" json:"messageRelationType"`
  ReadCount int64 `thrift:"readCount,23" db:"readCount" json:"readCount"`
  RelatedMessageServiceCode MessageServiceCodeEnum `thrift:"relatedMessageServiceCode,24" db:"relatedMessageServiceCode" json:"relatedMessageServiceCode"`
}

func NewMessageStruct() *MessageStruct {
  return &MessageStruct{}
}


func (p *MessageStruct) Get_from() string {
  return p._from
}

func (p *MessageStruct) GetTo() string {
  return p.To
}

func (p *MessageStruct) GetToType() ToTypeEnum {
  return p.ToType
}

func (p *MessageStruct) GetID() string {
  return p.ID
}

func (p *MessageStruct) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *MessageStruct) GetDeliveredTime() int64 {
  return p.DeliveredTime
}

func (p *MessageStruct) GetText() string {
  return p.Text
}
var MessageStruct_Location_DEFAULT *LocationStuct
func (p *MessageStruct) GetLocation() *LocationStuct {
  if !p.IsSetLocation() {
    return MessageStruct_Location_DEFAULT
  }
return p.Location
}

func (p *MessageStruct) GetHasContent() bool {
  return p.HasContent
}

func (p *MessageStruct) GetContentType() ContentTypeEnum {
  return p.ContentType
}

func (p *MessageStruct) GetContentPreview() []byte {
  return p.ContentPreview
}

func (p *MessageStruct) GetContentMetadata() map[string]string {
  return p.ContentMetadata
}

func (p *MessageStruct) GetSessionId() int8 {
  return p.SessionId
}

func (p *MessageStruct) GetChunks() [][]byte {
  return p.Chunks
}

func (p *MessageStruct) GetRelatedMessageId() string {
  return p.RelatedMessageId
}

func (p *MessageStruct) GetMessageRelationType() RelationTypeEnum {
  return p.MessageRelationType
}

func (p *MessageStruct) GetReadCount() int64 {
  return p.ReadCount
}

func (p *MessageStruct) GetRelatedMessageServiceCode() MessageServiceCodeEnum {
  return p.RelatedMessageServiceCode
}
func (p *MessageStruct) IsSetLocation() bool {
  return p.Location != nil
}

func (p *MessageStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p._from = v
}
  return nil
}

func (p *MessageStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.To = v
}
  return nil
}

func (p *MessageStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ToTypeEnum(v)
  p.ToType = temp
}
  return nil
}

func (p *MessageStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *MessageStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *MessageStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DeliveredTime = v
}
  return nil
}

func (p *MessageStruct)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *MessageStruct)  ReadField11(iprot thrift.TProtocol) error {
  p.Location = &LocationStuct{}
  if err := p.Location.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
  }
  return nil
}

func (p *MessageStruct)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.HasContent = v
}
  return nil
}

func (p *MessageStruct)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  temp := ContentTypeEnum(v)
  p.ContentType = temp
}
  return nil
}

func (p *MessageStruct)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.ContentPreview = v
}
  return nil
}

func (p *MessageStruct)  ReadField18(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.ContentMetadata[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MessageStruct)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  temp := int8(v)
  p.SessionId = temp
}
  return nil
}

func (p *MessageStruct)  ReadField20(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Chunks =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.Chunks = append(p.Chunks, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MessageStruct)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.RelatedMessageId = v
}
  return nil
}

func (p *MessageStruct)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  temp := RelationTypeEnum(v)
  p.MessageRelationType = temp
}
  return nil
}

func (p *MessageStruct)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.ReadCount = v
}
  return nil
}

func (p *MessageStruct)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  temp := MessageServiceCodeEnum(v)
  p.RelatedMessageServiceCode = temp
}
  return nil
}

func (p *MessageStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MessageStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("_from", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:_from: ", p), err) }
  if err := oprot.WriteString(string(p._from)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T._from (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:_from: ", p), err) }
  return err
}

func (p *MessageStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("to", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:to: ", p), err) }
  if err := oprot.WriteString(string(p.To)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.to (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:to: ", p), err) }
  return err
}

func (p *MessageStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("toType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:toType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ToType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:toType: ", p), err) }
  return err
}

func (p *MessageStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err) }
  return err
}

func (p *MessageStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err) }
  return err
}

func (p *MessageStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deliveredTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deliveredTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.DeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deliveredTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deliveredTime: ", p), err) }
  return err
}

func (p *MessageStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:text: ", p), err) }
  return err
}

func (p *MessageStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("location", thrift.STRUCT, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:location: ", p), err) }
  if err := p.Location.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:location: ", p), err) }
  return err
}

func (p *MessageStruct) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hasContent", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:hasContent: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasContent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasContent (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:hasContent: ", p), err) }
  return err
}

func (p *MessageStruct) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contentType", thrift.I32, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:contentType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ContentType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contentType (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:contentType: ", p), err) }
  return err
}

func (p *MessageStruct) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contentPreview", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:contentPreview: ", p), err) }
  if err := oprot.WriteBinary(p.ContentPreview); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contentPreview (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:contentPreview: ", p), err) }
  return err
}

func (p *MessageStruct) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contentMetadata", thrift.MAP, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:contentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ContentMetadata {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:contentMetadata: ", p), err) }
  return err
}

func (p *MessageStruct) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.BYTE, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:sessionId: ", p), err) }
  if err := oprot.WriteByte(int8(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:sessionId: ", p), err) }
  return err
}

func (p *MessageStruct) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chunks", thrift.LIST, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:chunks: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Chunks)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Chunks {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:chunks: ", p), err) }
  return err
}

func (p *MessageStruct) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("relatedMessageId", thrift.STRING, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:relatedMessageId: ", p), err) }
  if err := oprot.WriteString(string(p.RelatedMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relatedMessageId (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:relatedMessageId: ", p), err) }
  return err
}

func (p *MessageStruct) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("messageRelationType", thrift.I32, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:messageRelationType: ", p), err) }
  if err := oprot.WriteI32(int32(p.MessageRelationType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageRelationType (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:messageRelationType: ", p), err) }
  return err
}

func (p *MessageStruct) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("readCount", thrift.I64, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:readCount: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReadCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.readCount (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:readCount: ", p), err) }
  return err
}

func (p *MessageStruct) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("relatedMessageServiceCode", thrift.I32, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:relatedMessageServiceCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.RelatedMessageServiceCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relatedMessageServiceCode (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:relatedMessageServiceCode: ", p), err) }
  return err
}

func (p *MessageStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageStruct(%+v)", *p)
}

// Attributes:
//  - Mid
//  - CreatedTime
//  - Type
//  - Status
//  - Relation
//  - DisplayName
//  - PhoneticName
//  - PictureStatus
//  - ThumbnailUrl
//  - StatusMessage
//  - DisplayNameOverridden
//  - FavoriteTime
//  - CapableVoiceCall
//  - CapableVideoCall
//  - CapableMyhome
//  - CapableBuddy
//  - Attributes
//  - Settings
//  - PicturePath
//  - RecommendParams
//  - FriendRequestStatus
//  - MusicProfile
//  - VideoProfile
//  - StatusMessageContentMetadata
type ContactStruct struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  // unused fields # 3 to 9
  Type ContactTypeEnum `thrift:"type,10" db:"type" json:"type"`
  Status ContactStatusEnum `thrift:"status,11" db:"status" json:"status"`
  // unused fields # 12 to 20
  Relation ContactRelationEnum `thrift:"relation,21" db:"relation" json:"relation"`
  DisplayName string `thrift:"displayName,22" db:"displayName" json:"displayName"`
  PhoneticName string `thrift:"phoneticName,23" db:"phoneticName" json:"phoneticName"`
  PictureStatus string `thrift:"pictureStatus,24" db:"pictureStatus" json:"pictureStatus"`
  ThumbnailUrl string `thrift:"thumbnailUrl,25" db:"thumbnailUrl" json:"thumbnailUrl"`
  StatusMessage string `thrift:"statusMessage,26" db:"statusMessage" json:"statusMessage"`
  DisplayNameOverridden string `thrift:"displayNameOverridden,27" db:"displayNameOverridden" json:"displayNameOverridden"`
  FavoriteTime int64 `thrift:"favoriteTime,28" db:"favoriteTime" json:"favoriteTime"`
  // unused fields # 29 to 30
  CapableVoiceCall bool `thrift:"capableVoiceCall,31" db:"capableVoiceCall" json:"capableVoiceCall"`
  CapableVideoCall bool `thrift:"capableVideoCall,32" db:"capableVideoCall" json:"capableVideoCall"`
  CapableMyhome bool `thrift:"capableMyhome,33" db:"capableMyhome" json:"capableMyhome"`
  CapableBuddy bool `thrift:"capableBuddy,34" db:"capableBuddy" json:"capableBuddy"`
  Attributes int32 `thrift:"attributes,35" db:"attributes" json:"attributes"`
  Settings int64 `thrift:"settings,36" db:"settings" json:"settings"`
  PicturePath string `thrift:"picturePath,37" db:"picturePath" json:"picturePath"`
  RecommendParams string `thrift:"recommendParams,38" db:"recommendParams" json:"recommendParams"`
  FriendRequestStatus FriendRequestStatusEnum `thrift:"friendRequestStatus,39" db:"friendRequestStatus" json:"friendRequestStatus"`
  MusicProfile string `thrift:"musicProfile,40" db:"musicProfile" json:"musicProfile"`
  // unused field # 41
  VideoProfile string `thrift:"videoProfile,42" db:"videoProfile" json:"videoProfile"`
  StatusMessageContentMetadata map[string]string `thrift:"statusMessageContentMetadata,43" db:"statusMessageContentMetadata" json:"statusMessageContentMetadata"`
}

func NewContactStruct() *ContactStruct {
  return &ContactStruct{}
}


func (p *ContactStruct) GetMid() string {
  return p.Mid
}

func (p *ContactStruct) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *ContactStruct) GetType() ContactTypeEnum {
  return p.Type
}

func (p *ContactStruct) GetStatus() ContactStatusEnum {
  return p.Status
}

func (p *ContactStruct) GetRelation() ContactRelationEnum {
  return p.Relation
}

func (p *ContactStruct) GetDisplayName() string {
  return p.DisplayName
}

func (p *ContactStruct) GetPhoneticName() string {
  return p.PhoneticName
}

func (p *ContactStruct) GetPictureStatus() string {
  return p.PictureStatus
}

func (p *ContactStruct) GetThumbnailUrl() string {
  return p.ThumbnailUrl
}

func (p *ContactStruct) GetStatusMessage() string {
  return p.StatusMessage
}

func (p *ContactStruct) GetDisplayNameOverridden() string {
  return p.DisplayNameOverridden
}

func (p *ContactStruct) GetFavoriteTime() int64 {
  return p.FavoriteTime
}

func (p *ContactStruct) GetCapableVoiceCall() bool {
  return p.CapableVoiceCall
}

func (p *ContactStruct) GetCapableVideoCall() bool {
  return p.CapableVideoCall
}

func (p *ContactStruct) GetCapableMyhome() bool {
  return p.CapableMyhome
}

func (p *ContactStruct) GetCapableBuddy() bool {
  return p.CapableBuddy
}

func (p *ContactStruct) GetAttributes() int32 {
  return p.Attributes
}

func (p *ContactStruct) GetSettings() int64 {
  return p.Settings
}

func (p *ContactStruct) GetPicturePath() string {
  return p.PicturePath
}

func (p *ContactStruct) GetRecommendParams() string {
  return p.RecommendParams
}

func (p *ContactStruct) GetFriendRequestStatus() FriendRequestStatusEnum {
  return p.FriendRequestStatus
}

func (p *ContactStruct) GetMusicProfile() string {
  return p.MusicProfile
}

func (p *ContactStruct) GetVideoProfile() string {
  return p.VideoProfile
}

func (p *ContactStruct) GetStatusMessageContentMetadata() map[string]string {
  return p.StatusMessageContentMetadata
}
func (p *ContactStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField27(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField28(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField32(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField33(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField34(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField35(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField36(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField37(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 38:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField38(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 39:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField39(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField40(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField42(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField43(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ContactStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *ContactStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *ContactStruct)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := ContactTypeEnum(v)
  p.Type = temp
}
  return nil
}

func (p *ContactStruct)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := ContactStatusEnum(v)
  p.Status = temp
}
  return nil
}

func (p *ContactStruct)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  temp := ContactRelationEnum(v)
  p.Relation = temp
}
  return nil
}

func (p *ContactStruct)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *ContactStruct)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.PhoneticName = v
}
  return nil
}

func (p *ContactStruct)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *ContactStruct)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.ThumbnailUrl = v
}
  return nil
}

func (p *ContactStruct)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.StatusMessage = v
}
  return nil
}

func (p *ContactStruct)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.DisplayNameOverridden = v
}
  return nil
}

func (p *ContactStruct)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.FavoriteTime = v
}
  return nil
}

func (p *ContactStruct)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.CapableVoiceCall = v
}
  return nil
}

func (p *ContactStruct)  ReadField32(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.CapableVideoCall = v
}
  return nil
}

func (p *ContactStruct)  ReadField33(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.CapableMyhome = v
}
  return nil
}

func (p *ContactStruct)  ReadField34(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.CapableBuddy = v
}
  return nil
}

func (p *ContactStruct)  ReadField35(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.Attributes = v
}
  return nil
}

func (p *ContactStruct)  ReadField36(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 36: ", err)
} else {
  p.Settings = v
}
  return nil
}

func (p *ContactStruct)  ReadField37(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 37: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *ContactStruct)  ReadField38(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 38: ", err)
} else {
  p.RecommendParams = v
}
  return nil
}

func (p *ContactStruct)  ReadField39(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  temp := FriendRequestStatusEnum(v)
  p.FriendRequestStatus = temp
}
  return nil
}

func (p *ContactStruct)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.MusicProfile = v
}
  return nil
}

func (p *ContactStruct)  ReadField42(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 42: ", err)
} else {
  p.VideoProfile = v
}
  return nil
}

func (p *ContactStruct)  ReadField43(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.StatusMessageContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.StatusMessageContentMetadata[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ContactStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ContactStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
    if err := p.writeField32(oprot); err != nil { return err }
    if err := p.writeField33(oprot); err != nil { return err }
    if err := p.writeField34(oprot); err != nil { return err }
    if err := p.writeField35(oprot); err != nil { return err }
    if err := p.writeField36(oprot); err != nil { return err }
    if err := p.writeField37(oprot); err != nil { return err }
    if err := p.writeField38(oprot); err != nil { return err }
    if err := p.writeField39(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField42(oprot); err != nil { return err }
    if err := p.writeField43(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ContactStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *ContactStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *ContactStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:type: ", p), err) }
  return err
}

func (p *ContactStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:status: ", p), err) }
  return err
}

func (p *ContactStruct) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("relation", thrift.I32, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:relation: ", p), err) }
  if err := oprot.WriteI32(int32(p.Relation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relation (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:relation: ", p), err) }
  return err
}

func (p *ContactStruct) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:displayName: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:displayName: ", p), err) }
  return err
}

func (p *ContactStruct) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phoneticName", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:phoneticName: ", p), err) }
  if err := oprot.WriteString(string(p.PhoneticName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneticName (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:phoneticName: ", p), err) }
  return err
}

func (p *ContactStruct) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:pictureStatus: ", p), err) }
  if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:pictureStatus: ", p), err) }
  return err
}

func (p *ContactStruct) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:thumbnailUrl: ", p), err) }
  if err := oprot.WriteString(string(p.ThumbnailUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:thumbnailUrl: ", p), err) }
  return err
}

func (p *ContactStruct) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statusMessage", thrift.STRING, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:statusMessage: ", p), err) }
  if err := oprot.WriteString(string(p.StatusMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusMessage (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:statusMessage: ", p), err) }
  return err
}

func (p *ContactStruct) writeField27(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayNameOverridden", thrift.STRING, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:displayNameOverridden: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayNameOverridden)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayNameOverridden (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:displayNameOverridden: ", p), err) }
  return err
}

func (p *ContactStruct) writeField28(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("favoriteTime", thrift.I64, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:favoriteTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.FavoriteTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.favoriteTime (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:favoriteTime: ", p), err) }
  return err
}

func (p *ContactStruct) writeField31(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("capableVoiceCall", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:capableVoiceCall: ", p), err) }
  if err := oprot.WriteBool(bool(p.CapableVoiceCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableVoiceCall (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:capableVoiceCall: ", p), err) }
  return err
}

func (p *ContactStruct) writeField32(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("capableVideoCall", thrift.BOOL, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:capableVideoCall: ", p), err) }
  if err := oprot.WriteBool(bool(p.CapableVideoCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableVideoCall (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:capableVideoCall: ", p), err) }
  return err
}

func (p *ContactStruct) writeField33(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("capableMyhome", thrift.BOOL, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:capableMyhome: ", p), err) }
  if err := oprot.WriteBool(bool(p.CapableMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableMyhome (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:capableMyhome: ", p), err) }
  return err
}

func (p *ContactStruct) writeField34(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("capableBuddy", thrift.BOOL, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:capableBuddy: ", p), err) }
  if err := oprot.WriteBool(bool(p.CapableBuddy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableBuddy (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:capableBuddy: ", p), err) }
  return err
}

func (p *ContactStruct) writeField35(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attributes", thrift.I32, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:attributes: ", p), err) }
  if err := oprot.WriteI32(int32(p.Attributes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attributes (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:attributes: ", p), err) }
  return err
}

func (p *ContactStruct) writeField36(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("settings", thrift.I64, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:settings: ", p), err) }
  if err := oprot.WriteI64(int64(p.Settings)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.settings (36) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:settings: ", p), err) }
  return err
}

func (p *ContactStruct) writeField37(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 37); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:picturePath: ", p), err) }
  if err := oprot.WriteString(string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (37) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 37:picturePath: ", p), err) }
  return err
}

func (p *ContactStruct) writeField38(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recommendParams", thrift.STRING, 38); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:recommendParams: ", p), err) }
  if err := oprot.WriteString(string(p.RecommendParams)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recommendParams (38) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 38:recommendParams: ", p), err) }
  return err
}

func (p *ContactStruct) writeField39(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("friendRequestStatus", thrift.I32, 39); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:friendRequestStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.FriendRequestStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.friendRequestStatus (39) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 39:friendRequestStatus: ", p), err) }
  return err
}

func (p *ContactStruct) writeField40(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("musicProfile", thrift.STRING, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:musicProfile: ", p), err) }
  if err := oprot.WriteString(string(p.MusicProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.musicProfile (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:musicProfile: ", p), err) }
  return err
}

func (p *ContactStruct) writeField42(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("videoProfile", thrift.STRING, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:videoProfile: ", p), err) }
  if err := oprot.WriteString(string(p.VideoProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.videoProfile (42) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:videoProfile: ", p), err) }
  return err
}

func (p *ContactStruct) writeField43(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statusMessageContentMetadata", thrift.MAP, 43); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:statusMessageContentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.StatusMessageContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.StatusMessageContentMetadata {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 43:statusMessageContentMetadata: ", p), err) }
  return err
}

func (p *ContactStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContactStruct(%+v)", *p)
}

// Attributes:
//  - InvitationTicket
//  - FavoriteTimestamp
type GroupPreferenceStruct struct {
  InvitationTicket string `thrift:"invitationTicket,1" db:"invitationTicket" json:"invitationTicket"`
  FavoriteTimestamp int64 `thrift:"favoriteTimestamp,2" db:"favoriteTimestamp" json:"favoriteTimestamp"`
}

func NewGroupPreferenceStruct() *GroupPreferenceStruct {
  return &GroupPreferenceStruct{}
}


func (p *GroupPreferenceStruct) GetInvitationTicket() string {
  return p.InvitationTicket
}

func (p *GroupPreferenceStruct) GetFavoriteTimestamp() int64 {
  return p.FavoriteTimestamp
}
func (p *GroupPreferenceStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GroupPreferenceStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.InvitationTicket = v
}
  return nil
}

func (p *GroupPreferenceStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FavoriteTimestamp = v
}
  return nil
}

func (p *GroupPreferenceStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GroupPreferenceStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GroupPreferenceStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("invitationTicket", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:invitationTicket: ", p), err) }
  if err := oprot.WriteString(string(p.InvitationTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.invitationTicket (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:invitationTicket: ", p), err) }
  return err
}

func (p *GroupPreferenceStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("favoriteTimestamp", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:favoriteTimestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.FavoriteTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.favoriteTimestamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:favoriteTimestamp: ", p), err) }
  return err
}

func (p *GroupPreferenceStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GroupPreferenceStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - CreatedTime
//  - Name
//  - PictureStatus
//  - PreventedJoinByTicket
//  - GroupPreference
//  - Members
//  - Creator
//  - Invitee
//  - NotificationDisabled
//  - PicturePath
//  - MemberMids
//  - InviteeMids
type GroupStruct struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  // unused fields # 3 to 9
  Name string `thrift:"name,10" db:"name" json:"name"`
  PictureStatus string `thrift:"pictureStatus,11" db:"pictureStatus" json:"pictureStatus"`
  PreventedJoinByTicket bool `thrift:"preventedJoinByTicket,12" db:"preventedJoinByTicket" json:"preventedJoinByTicket"`
  GroupPreference *GroupPreferenceStruct `thrift:"groupPreference,13" db:"groupPreference" json:"groupPreference"`
  // unused fields # 14 to 19
  Members []*ContactStruct `thrift:"members,20" db:"members" json:"members"`
  Creator *ContactStruct `thrift:"creator,21" db:"creator" json:"creator"`
  Invitee []*ContactStruct `thrift:"invitee,22" db:"invitee" json:"invitee"`
  // unused fields # 23 to 30
  NotificationDisabled bool `thrift:"notificationDisabled,31" db:"notificationDisabled" json:"notificationDisabled"`
  PicturePath string `thrift:"picturePath,32" db:"picturePath" json:"picturePath"`
  // unused fields # 33 to 39
  MemberMids []*ContactStruct `thrift:"memberMids,40" db:"memberMids" json:"memberMids"`
  InviteeMids []*ContactStruct `thrift:"inviteeMids,41" db:"inviteeMids" json:"inviteeMids"`
}

func NewGroupStruct() *GroupStruct {
  return &GroupStruct{}
}


func (p *GroupStruct) GetID() string {
  return p.ID
}

func (p *GroupStruct) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *GroupStruct) GetName() string {
  return p.Name
}

func (p *GroupStruct) GetPictureStatus() string {
  return p.PictureStatus
}

func (p *GroupStruct) GetPreventedJoinByTicket() bool {
  return p.PreventedJoinByTicket
}
var GroupStruct_GroupPreference_DEFAULT *GroupPreferenceStruct
func (p *GroupStruct) GetGroupPreference() *GroupPreferenceStruct {
  if !p.IsSetGroupPreference() {
    return GroupStruct_GroupPreference_DEFAULT
  }
return p.GroupPreference
}

func (p *GroupStruct) GetMembers() []*ContactStruct {
  return p.Members
}
var GroupStruct_Creator_DEFAULT *ContactStruct
func (p *GroupStruct) GetCreator() *ContactStruct {
  if !p.IsSetCreator() {
    return GroupStruct_Creator_DEFAULT
  }
return p.Creator
}

func (p *GroupStruct) GetInvitee() []*ContactStruct {
  return p.Invitee
}

func (p *GroupStruct) GetNotificationDisabled() bool {
  return p.NotificationDisabled
}

func (p *GroupStruct) GetPicturePath() string {
  return p.PicturePath
}

func (p *GroupStruct) GetMemberMids() []*ContactStruct {
  return p.MemberMids
}

func (p *GroupStruct) GetInviteeMids() []*ContactStruct {
  return p.InviteeMids
}
func (p *GroupStruct) IsSetGroupPreference() bool {
  return p.GroupPreference != nil
}

func (p *GroupStruct) IsSetCreator() bool {
  return p.Creator != nil
}

func (p *GroupStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField32(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField40(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField41(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GroupStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *GroupStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *GroupStruct)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *GroupStruct)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *GroupStruct)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PreventedJoinByTicket = v
}
  return nil
}

func (p *GroupStruct)  ReadField13(iprot thrift.TProtocol) error {
  p.GroupPreference = &GroupPreferenceStruct{}
  if err := p.GroupPreference.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupPreference), err)
  }
  return nil
}

func (p *GroupStruct)  ReadField20(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ContactStruct, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &ContactStruct{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.Members = append(p.Members, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GroupStruct)  ReadField21(iprot thrift.TProtocol) error {
  p.Creator = &ContactStruct{}
  if err := p.Creator.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Creator), err)
  }
  return nil
}

func (p *GroupStruct)  ReadField22(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ContactStruct, 0, size)
  p.Invitee =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &ContactStruct{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Invitee = append(p.Invitee, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GroupStruct)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.NotificationDisabled = v
}
  return nil
}

func (p *GroupStruct)  ReadField32(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *GroupStruct)  ReadField40(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ContactStruct, 0, size)
  p.MemberMids =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &ContactStruct{}
    if err := _elem7.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.MemberMids = append(p.MemberMids, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GroupStruct)  ReadField41(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ContactStruct, 0, size)
  p.InviteeMids =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &ContactStruct{}
    if err := _elem8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.InviteeMids = append(p.InviteeMids, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GroupStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GroupStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
    if err := p.writeField32(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField41(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GroupStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *GroupStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *GroupStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:name: ", p), err) }
  return err
}

func (p *GroupStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:pictureStatus: ", p), err) }
  if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:pictureStatus: ", p), err) }
  return err
}

func (p *GroupStruct) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("preventedJoinByTicket", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:preventedJoinByTicket: ", p), err) }
  if err := oprot.WriteBool(bool(p.PreventedJoinByTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preventedJoinByTicket (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:preventedJoinByTicket: ", p), err) }
  return err
}

func (p *GroupStruct) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupPreference", thrift.STRUCT, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:groupPreference: ", p), err) }
  if err := p.GroupPreference.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupPreference), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:groupPreference: ", p), err) }
  return err
}

func (p *GroupStruct) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("members", thrift.LIST, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:members: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:members: ", p), err) }
  return err
}

func (p *GroupStruct) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("creator", thrift.STRUCT, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:creator: ", p), err) }
  if err := p.Creator.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Creator), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:creator: ", p), err) }
  return err
}

func (p *GroupStruct) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("invitee", thrift.LIST, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:invitee: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Invitee)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Invitee {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:invitee: ", p), err) }
  return err
}

func (p *GroupStruct) writeField31(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationDisabled", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:notificationDisabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationDisabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:notificationDisabled: ", p), err) }
  return err
}

func (p *GroupStruct) writeField32(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:picturePath: ", p), err) }
  if err := oprot.WriteString(string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:picturePath: ", p), err) }
  return err
}

func (p *GroupStruct) writeField40(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberMids", thrift.LIST, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:memberMids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MemberMids {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:memberMids: ", p), err) }
  return err
}

func (p *GroupStruct) writeField41(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inviteeMids", thrift.LIST, 41); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:inviteeMids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InviteeMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.InviteeMids {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 41:inviteeMids: ", p), err) }
  return err
}

func (p *GroupStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GroupStruct(%+v)", *p)
}

// Attributes:
//  - Mid
//  - CreatedTime
//  - Contacts
//  - NotificationDisabled
//  - MemberMids
type RoomStruct struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  // unused fields # 3 to 9
  Contacts []*ContactStruct `thrift:"contacts,10" db:"contacts" json:"contacts"`
  // unused fields # 11 to 30
  NotificationDisabled bool `thrift:"notificationDisabled,31" db:"notificationDisabled" json:"notificationDisabled"`
  // unused fields # 32 to 39
  MemberMids []string `thrift:"memberMids,40" db:"memberMids" json:"memberMids"`
}

func NewRoomStruct() *RoomStruct {
  return &RoomStruct{}
}


func (p *RoomStruct) GetMid() string {
  return p.Mid
}

func (p *RoomStruct) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *RoomStruct) GetContacts() []*ContactStruct {
  return p.Contacts
}

func (p *RoomStruct) GetNotificationDisabled() bool {
  return p.NotificationDisabled
}

func (p *RoomStruct) GetMemberMids() []string {
  return p.MemberMids
}
func (p *RoomStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField40(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RoomStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *RoomStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *RoomStruct)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ContactStruct, 0, size)
  p.Contacts =  tSlice
  for i := 0; i < size; i ++ {
    _elem9 := &ContactStruct{}
    if err := _elem9.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
    }
    p.Contacts = append(p.Contacts, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RoomStruct)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.NotificationDisabled = v
}
  return nil
}

func (p *RoomStruct)  ReadField40(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.MemberMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem10 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem10 = v
}
    p.MemberMids = append(p.MemberMids, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RoomStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RoomStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RoomStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *RoomStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *RoomStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contacts", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:contacts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contacts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Contacts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:contacts: ", p), err) }
  return err
}

func (p *RoomStruct) writeField31(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationDisabled", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:notificationDisabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationDisabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:notificationDisabled: ", p), err) }
  return err
}

func (p *RoomStruct) writeField40(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberMids", thrift.LIST, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:memberMids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MemberMids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:memberMids: ", p), err) }
  return err
}

func (p *RoomStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RoomStruct(%+v)", *p)
}

// Attributes:
//  - Online
//  - ChatMid
//  - HostMids
//  - MemberMids
//  - Started
//  - MediaType
type GroupCallStruct struct {
  Online bool `thrift:"online,1" db:"online" json:"online"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  HostMids string `thrift:"hostMids,3" db:"hostMids" json:"hostMids"`
  MemberMids []string `thrift:"memberMids,4" db:"memberMids" json:"memberMids"`
  Started int64 `thrift:"started,5" db:"started" json:"started"`
  MediaType GroupCallMediaTypeEnum `thrift:"mediaType,6" db:"mediaType" json:"mediaType"`
}

func NewGroupCallStruct() *GroupCallStruct {
  return &GroupCallStruct{}
}


func (p *GroupCallStruct) GetOnline() bool {
  return p.Online
}

func (p *GroupCallStruct) GetChatMid() string {
  return p.ChatMid
}

func (p *GroupCallStruct) GetHostMids() string {
  return p.HostMids
}

func (p *GroupCallStruct) GetMemberMids() []string {
  return p.MemberMids
}

func (p *GroupCallStruct) GetStarted() int64 {
  return p.Started
}

func (p *GroupCallStruct) GetMediaType() GroupCallMediaTypeEnum {
  return p.MediaType
}
func (p *GroupCallStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GroupCallStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Online = v
}
  return nil
}

func (p *GroupCallStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *GroupCallStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HostMids = v
}
  return nil
}

func (p *GroupCallStruct)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.MemberMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem11 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem11 = v
}
    p.MemberMids = append(p.MemberMids, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GroupCallStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Started = v
}
  return nil
}

func (p *GroupCallStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := GroupCallMediaTypeEnum(v)
  p.MediaType = temp
}
  return nil
}

func (p *GroupCallStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GroupCallStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GroupCallStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("online", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:online: ", p), err) }
  if err := oprot.WriteBool(bool(p.Online)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.online (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:online: ", p), err) }
  return err
}

func (p *GroupCallStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *GroupCallStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hostMids", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostMids: ", p), err) }
  if err := oprot.WriteString(string(p.HostMids)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostMids (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostMids: ", p), err) }
  return err
}

func (p *GroupCallStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberMids", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:memberMids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MemberMids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:memberMids: ", p), err) }
  return err
}

func (p *GroupCallStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("started", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:started: ", p), err) }
  if err := oprot.WriteI64(int64(p.Started)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.started (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:started: ", p), err) }
  return err
}

func (p *GroupCallStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mediaType", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mediaType: ", p), err) }
  if err := oprot.WriteI32(int32(p.MediaType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mediaType (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mediaType: ", p), err) }
  return err
}

func (p *GroupCallStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GroupCallStruct(%+v)", *p)
}

// Attributes:
//  - Mid
//  - Userid
//  - Phone
//  - Email
//  - RegionCode
//  - DisplayName
//  - PhoneticName
//  - PictureStatus
//  - ThumbnailUrl
//  - StatusMessage
//  - AllowSearchByUserid
//  - AllowSearchByEmail
//  - PicturePath
//  - MusicProfile
//  - VideoProfile
//  - StatusMessageContentMetadata
type ProfileStruct struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  // unused field # 2
  Userid string `thrift:"userid,3" db:"userid" json:"userid"`
  // unused fields # 4 to 9
  Phone string `thrift:"phone,10" db:"phone" json:"phone"`
  Email string `thrift:"email,11" db:"email" json:"email"`
  RegionCode string `thrift:"regionCode,12" db:"regionCode" json:"regionCode"`
  // unused fields # 13 to 19
  DisplayName string `thrift:"displayName,20" db:"displayName" json:"displayName"`
  PhoneticName string `thrift:"phoneticName,21" db:"phoneticName" json:"phoneticName"`
  PictureStatus string `thrift:"pictureStatus,22" db:"pictureStatus" json:"pictureStatus"`
  ThumbnailUrl string `thrift:"thumbnailUrl,23" db:"thumbnailUrl" json:"thumbnailUrl"`
  StatusMessage string `thrift:"statusMessage,24" db:"statusMessage" json:"statusMessage"`
  // unused fields # 25 to 30
  AllowSearchByUserid bool `thrift:"allowSearchByUserid,31" db:"allowSearchByUserid" json:"allowSearchByUserid"`
  AllowSearchByEmail bool `thrift:"allowSearchByEmail,32" db:"allowSearchByEmail" json:"allowSearchByEmail"`
  PicturePath string `thrift:"picturePath,33" db:"picturePath" json:"picturePath"`
  MusicProfile string `thrift:"musicProfile,34" db:"musicProfile" json:"musicProfile"`
  VideoProfile string `thrift:"videoProfile,35" db:"videoProfile" json:"videoProfile"`
  StatusMessageContentMetadata map[string]string `thrift:"statusMessageContentMetadata,36" db:"statusMessageContentMetadata" json:"statusMessageContentMetadata"`
}

func NewProfileStruct() *ProfileStruct {
  return &ProfileStruct{}
}


func (p *ProfileStruct) GetMid() string {
  return p.Mid
}

func (p *ProfileStruct) GetUserid() string {
  return p.Userid
}

func (p *ProfileStruct) GetPhone() string {
  return p.Phone
}

func (p *ProfileStruct) GetEmail() string {
  return p.Email
}

func (p *ProfileStruct) GetRegionCode() string {
  return p.RegionCode
}

func (p *ProfileStruct) GetDisplayName() string {
  return p.DisplayName
}

func (p *ProfileStruct) GetPhoneticName() string {
  return p.PhoneticName
}

func (p *ProfileStruct) GetPictureStatus() string {
  return p.PictureStatus
}

func (p *ProfileStruct) GetThumbnailUrl() string {
  return p.ThumbnailUrl
}

func (p *ProfileStruct) GetStatusMessage() string {
  return p.StatusMessage
}

func (p *ProfileStruct) GetAllowSearchByUserid() bool {
  return p.AllowSearchByUserid
}

func (p *ProfileStruct) GetAllowSearchByEmail() bool {
  return p.AllowSearchByEmail
}

func (p *ProfileStruct) GetPicturePath() string {
  return p.PicturePath
}

func (p *ProfileStruct) GetMusicProfile() string {
  return p.MusicProfile
}

func (p *ProfileStruct) GetVideoProfile() string {
  return p.VideoProfile
}

func (p *ProfileStruct) GetStatusMessageContentMetadata() map[string]string {
  return p.StatusMessageContentMetadata
}
func (p *ProfileStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField32(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField33(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField34(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField35(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField36(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProfileStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *ProfileStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Userid = v
}
  return nil
}

func (p *ProfileStruct)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *ProfileStruct)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *ProfileStruct)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.RegionCode = v
}
  return nil
}

func (p *ProfileStruct)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *ProfileStruct)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.PhoneticName = v
}
  return nil
}

func (p *ProfileStruct)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *ProfileStruct)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.ThumbnailUrl = v
}
  return nil
}

func (p *ProfileStruct)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.StatusMessage = v
}
  return nil
}

func (p *ProfileStruct)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.AllowSearchByUserid = v
}
  return nil
}

func (p *ProfileStruct)  ReadField32(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.AllowSearchByEmail = v
}
  return nil
}

func (p *ProfileStruct)  ReadField33(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *ProfileStruct)  ReadField34(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.MusicProfile = v
}
  return nil
}

func (p *ProfileStruct)  ReadField35(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.VideoProfile = v
}
  return nil
}

func (p *ProfileStruct)  ReadField36(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.StatusMessageContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key12 = v
}
var _val13 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val13 = v
}
    p.StatusMessageContentMetadata[_key12] = _val13
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ProfileStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProfileStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
    if err := p.writeField32(oprot); err != nil { return err }
    if err := p.writeField33(oprot); err != nil { return err }
    if err := p.writeField34(oprot); err != nil { return err }
    if err := p.writeField35(oprot); err != nil { return err }
    if err := p.writeField36(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProfileStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *ProfileStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userid: ", p), err) }
  if err := oprot.WriteString(string(p.Userid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userid: ", p), err) }
  return err
}

func (p *ProfileStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:phone: ", p), err) }
  return err
}

func (p *ProfileStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:email: ", p), err) }
  return err
}

func (p *ProfileStruct) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("regionCode", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:regionCode: ", p), err) }
  if err := oprot.WriteString(string(p.RegionCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.regionCode (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:regionCode: ", p), err) }
  return err
}

func (p *ProfileStruct) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:displayName: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:displayName: ", p), err) }
  return err
}

func (p *ProfileStruct) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phoneticName", thrift.STRING, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:phoneticName: ", p), err) }
  if err := oprot.WriteString(string(p.PhoneticName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneticName (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:phoneticName: ", p), err) }
  return err
}

func (p *ProfileStruct) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:pictureStatus: ", p), err) }
  if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:pictureStatus: ", p), err) }
  return err
}

func (p *ProfileStruct) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:thumbnailUrl: ", p), err) }
  if err := oprot.WriteString(string(p.ThumbnailUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:thumbnailUrl: ", p), err) }
  return err
}

func (p *ProfileStruct) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statusMessage", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:statusMessage: ", p), err) }
  if err := oprot.WriteString(string(p.StatusMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusMessage (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:statusMessage: ", p), err) }
  return err
}

func (p *ProfileStruct) writeField31(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allowSearchByUserid", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:allowSearchByUserid: ", p), err) }
  if err := oprot.WriteBool(bool(p.AllowSearchByUserid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowSearchByUserid (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:allowSearchByUserid: ", p), err) }
  return err
}

func (p *ProfileStruct) writeField32(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allowSearchByEmail", thrift.BOOL, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:allowSearchByEmail: ", p), err) }
  if err := oprot.WriteBool(bool(p.AllowSearchByEmail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowSearchByEmail (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:allowSearchByEmail: ", p), err) }
  return err
}

func (p *ProfileStruct) writeField33(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:picturePath: ", p), err) }
  if err := oprot.WriteString(string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:picturePath: ", p), err) }
  return err
}

func (p *ProfileStruct) writeField34(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("musicProfile", thrift.STRING, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:musicProfile: ", p), err) }
  if err := oprot.WriteString(string(p.MusicProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.musicProfile (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:musicProfile: ", p), err) }
  return err
}

func (p *ProfileStruct) writeField35(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("videoProfile", thrift.STRING, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:videoProfile: ", p), err) }
  if err := oprot.WriteString(string(p.VideoProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.videoProfile (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:videoProfile: ", p), err) }
  return err
}

func (p *ProfileStruct) writeField36(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statusMessageContentMetadata", thrift.MAP, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:statusMessageContentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.StatusMessageContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.StatusMessageContentMetadata {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:statusMessageContentMetadata: ", p), err) }
  return err
}

func (p *ProfileStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProfileStruct(%+v)", *p)
}

// Attributes:
//  - Host
//  - Port
//  - Zone
type CallHostStruct struct {
  Host string `thrift:"host,1" db:"host" json:"host"`
  Port int32 `thrift:"port,2" db:"port" json:"port"`
  Zone string `thrift:"zone,3" db:"zone" json:"zone"`
}

func NewCallHostStruct() *CallHostStruct {
  return &CallHostStruct{}
}


func (p *CallHostStruct) GetHost() string {
  return p.Host
}

func (p *CallHostStruct) GetPort() int32 {
  return p.Port
}

func (p *CallHostStruct) GetZone() string {
  return p.Zone
}
func (p *CallHostStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CallHostStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *CallHostStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *CallHostStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Zone = v
}
  return nil
}

func (p *CallHostStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CallHostStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CallHostStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := oprot.WriteString(string(p.Host)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *CallHostStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err) }
  if err := oprot.WriteI32(int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err) }
  return err
}

func (p *CallHostStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("zone", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:zone: ", p), err) }
  if err := oprot.WriteString(string(p.Zone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.zone (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:zone: ", p), err) }
  return err
}

func (p *CallHostStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CallHostStruct(%+v)", *p)
}

// Attributes:
//  - Token
//  - Cscf
//  - Mix
//  - HostMid
//  - Capabilities
//  - Proto
//  - VoipAddress
//  - VoipUdpPort
//  - VoipTcpPort
//  - FromZone
//  - CommParam
//  - PolarisAddress
//  - PolarisUdpPort
//  - PolarisZone
//  - OrionAddress
type GroupCallRouteStruct struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Cscf *CallHostStruct `thrift:"cscf,2" db:"cscf" json:"cscf"`
  Mix *CallHostStruct `thrift:"mix,3" db:"mix" json:"mix"`
  HostMid string `thrift:"hostMid,4" db:"hostMid" json:"hostMid"`
  Capabilities []string `thrift:"capabilities,5" db:"capabilities" json:"capabilities"`
  Proto ProtoEnum `thrift:"proto,6" db:"proto" json:"proto"`
  VoipAddress string `thrift:"voipAddress,7" db:"voipAddress" json:"voipAddress"`
  VoipUdpPort int32 `thrift:"voipUdpPort,8" db:"voipUdpPort" json:"voipUdpPort"`
  VoipTcpPort int32 `thrift:"voipTcpPort,9" db:"voipTcpPort" json:"voipTcpPort"`
  FromZone string `thrift:"fromZone,10" db:"fromZone" json:"fromZone"`
  CommParam string `thrift:"commParam,11" db:"commParam" json:"commParam"`
  PolarisAddress string `thrift:"polarisAddress,12" db:"polarisAddress" json:"polarisAddress"`
  PolarisUdpPort int32 `thrift:"polarisUdpPort,13" db:"polarisUdpPort" json:"polarisUdpPort"`
  PolarisZone string `thrift:"polarisZone,14" db:"polarisZone" json:"polarisZone"`
  OrionAddress string `thrift:"orionAddress,15" db:"orionAddress" json:"orionAddress"`
}

func NewGroupCallRouteStruct() *GroupCallRouteStruct {
  return &GroupCallRouteStruct{}
}


func (p *GroupCallRouteStruct) GetToken() string {
  return p.Token
}
var GroupCallRouteStruct_Cscf_DEFAULT *CallHostStruct
func (p *GroupCallRouteStruct) GetCscf() *CallHostStruct {
  if !p.IsSetCscf() {
    return GroupCallRouteStruct_Cscf_DEFAULT
  }
return p.Cscf
}
var GroupCallRouteStruct_Mix_DEFAULT *CallHostStruct
func (p *GroupCallRouteStruct) GetMix() *CallHostStruct {
  if !p.IsSetMix() {
    return GroupCallRouteStruct_Mix_DEFAULT
  }
return p.Mix
}

func (p *GroupCallRouteStruct) GetHostMid() string {
  return p.HostMid
}

func (p *GroupCallRouteStruct) GetCapabilities() []string {
  return p.Capabilities
}

func (p *GroupCallRouteStruct) GetProto() ProtoEnum {
  return p.Proto
}

func (p *GroupCallRouteStruct) GetVoipAddress() string {
  return p.VoipAddress
}

func (p *GroupCallRouteStruct) GetVoipUdpPort() int32 {
  return p.VoipUdpPort
}

func (p *GroupCallRouteStruct) GetVoipTcpPort() int32 {
  return p.VoipTcpPort
}

func (p *GroupCallRouteStruct) GetFromZone() string {
  return p.FromZone
}

func (p *GroupCallRouteStruct) GetCommParam() string {
  return p.CommParam
}

func (p *GroupCallRouteStruct) GetPolarisAddress() string {
  return p.PolarisAddress
}

func (p *GroupCallRouteStruct) GetPolarisUdpPort() int32 {
  return p.PolarisUdpPort
}

func (p *GroupCallRouteStruct) GetPolarisZone() string {
  return p.PolarisZone
}

func (p *GroupCallRouteStruct) GetOrionAddress() string {
  return p.OrionAddress
}
func (p *GroupCallRouteStruct) IsSetCscf() bool {
  return p.Cscf != nil
}

func (p *GroupCallRouteStruct) IsSetMix() bool {
  return p.Mix != nil
}

func (p *GroupCallRouteStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GroupCallRouteStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *GroupCallRouteStruct)  ReadField2(iprot thrift.TProtocol) error {
  p.Cscf = &CallHostStruct{}
  if err := p.Cscf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cscf), err)
  }
  return nil
}

func (p *GroupCallRouteStruct)  ReadField3(iprot thrift.TProtocol) error {
  p.Mix = &CallHostStruct{}
  if err := p.Mix.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Mix), err)
  }
  return nil
}

func (p *GroupCallRouteStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.HostMid = v
}
  return nil
}

func (p *GroupCallRouteStruct)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Capabilities =  tSlice
  for i := 0; i < size; i ++ {
var _elem14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem14 = v
}
    p.Capabilities = append(p.Capabilities, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GroupCallRouteStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := ProtoEnum(v)
  p.Proto = temp
}
  return nil
}

func (p *GroupCallRouteStruct)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VoipAddress = v
}
  return nil
}

func (p *GroupCallRouteStruct)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.VoipUdpPort = v
}
  return nil
}

func (p *GroupCallRouteStruct)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.VoipTcpPort = v
}
  return nil
}

func (p *GroupCallRouteStruct)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.FromZone = v
}
  return nil
}

func (p *GroupCallRouteStruct)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.CommParam = v
}
  return nil
}

func (p *GroupCallRouteStruct)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PolarisAddress = v
}
  return nil
}

func (p *GroupCallRouteStruct)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.PolarisUdpPort = v
}
  return nil
}

func (p *GroupCallRouteStruct)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.PolarisZone = v
}
  return nil
}

func (p *GroupCallRouteStruct)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.OrionAddress = v
}
  return nil
}

func (p *GroupCallRouteStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GroupCallRouteStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GroupCallRouteStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *GroupCallRouteStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cscf", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cscf: ", p), err) }
  if err := p.Cscf.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cscf), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cscf: ", p), err) }
  return err
}

func (p *GroupCallRouteStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mix", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mix: ", p), err) }
  if err := p.Mix.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Mix), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mix: ", p), err) }
  return err
}

func (p *GroupCallRouteStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hostMid", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hostMid: ", p), err) }
  if err := oprot.WriteString(string(p.HostMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostMid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hostMid: ", p), err) }
  return err
}

func (p *GroupCallRouteStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("capabilities", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:capabilities: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Capabilities)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Capabilities {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:capabilities: ", p), err) }
  return err
}

func (p *GroupCallRouteStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("proto", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:proto: ", p), err) }
  if err := oprot.WriteI32(int32(p.Proto)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.proto (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:proto: ", p), err) }
  return err
}

func (p *GroupCallRouteStruct) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("voipAddress", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:voipAddress: ", p), err) }
  if err := oprot.WriteString(string(p.VoipAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.voipAddress (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:voipAddress: ", p), err) }
  return err
}

func (p *GroupCallRouteStruct) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("voipUdpPort", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:voipUdpPort: ", p), err) }
  if err := oprot.WriteI32(int32(p.VoipUdpPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.voipUdpPort (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:voipUdpPort: ", p), err) }
  return err
}

func (p *GroupCallRouteStruct) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("voipTcpPort", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:voipTcpPort: ", p), err) }
  if err := oprot.WriteI32(int32(p.VoipTcpPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.voipTcpPort (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:voipTcpPort: ", p), err) }
  return err
}

func (p *GroupCallRouteStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fromZone", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:fromZone: ", p), err) }
  if err := oprot.WriteString(string(p.FromZone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fromZone (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:fromZone: ", p), err) }
  return err
}

func (p *GroupCallRouteStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("commParam", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:commParam: ", p), err) }
  if err := oprot.WriteString(string(p.CommParam)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.commParam (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:commParam: ", p), err) }
  return err
}

func (p *GroupCallRouteStruct) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("polarisAddress", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:polarisAddress: ", p), err) }
  if err := oprot.WriteString(string(p.PolarisAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.polarisAddress (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:polarisAddress: ", p), err) }
  return err
}

func (p *GroupCallRouteStruct) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("polarisUdpPort", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:polarisUdpPort: ", p), err) }
  if err := oprot.WriteI32(int32(p.PolarisUdpPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.polarisUdpPort (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:polarisUdpPort: ", p), err) }
  return err
}

func (p *GroupCallRouteStruct) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("polarisZone", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:polarisZone: ", p), err) }
  if err := oprot.WriteString(string(p.PolarisZone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.polarisZone (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:polarisZone: ", p), err) }
  return err
}

func (p *GroupCallRouteStruct) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orionAddress", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:orionAddress: ", p), err) }
  if err := oprot.WriteString(string(p.OrionAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orionAddress (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:orionAddress: ", p), err) }
  return err
}

func (p *GroupCallRouteStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GroupCallRouteStruct(%+v)", *p)
}

// Attributes:
//  - Revision
//  - CreatedTime
//  - Type
//  - ReqSeq
//  - Checksum
//  - Status
//  - Param1
//  - Param2
//  - Param3
//  - Message
type OperationStruct struct {
  Revision int64 `thrift:"revision,1" db:"revision" json:"revision"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  Type OpTypeEnum `thrift:"type,3" db:"type" json:"type"`
  ReqSeq int32 `thrift:"reqSeq,4" db:"reqSeq" json:"reqSeq"`
  Checksum string `thrift:"checksum,5" db:"checksum" json:"checksum"`
  // unused field # 6
  Status OpStatusEnum `thrift:"status,7" db:"status" json:"status"`
  // unused fields # 8 to 9
  Param1 string `thrift:"param1,10" db:"param1" json:"param1"`
  Param2 string `thrift:"param2,11" db:"param2" json:"param2"`
  Param3 string `thrift:"param3,12" db:"param3" json:"param3"`
  // unused fields # 13 to 19
  Message *MessageStruct `thrift:"message,20" db:"message" json:"message"`
}

func NewOperationStruct() *OperationStruct {
  return &OperationStruct{}
}


func (p *OperationStruct) GetRevision() int64 {
  return p.Revision
}

func (p *OperationStruct) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *OperationStruct) GetType() OpTypeEnum {
  return p.Type
}

func (p *OperationStruct) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *OperationStruct) GetChecksum() string {
  return p.Checksum
}

func (p *OperationStruct) GetStatus() OpStatusEnum {
  return p.Status
}

func (p *OperationStruct) GetParam1() string {
  return p.Param1
}

func (p *OperationStruct) GetParam2() string {
  return p.Param2
}

func (p *OperationStruct) GetParam3() string {
  return p.Param3
}
var OperationStruct_Message_DEFAULT *MessageStruct
func (p *OperationStruct) GetMessage() *MessageStruct {
  if !p.IsSetMessage() {
    return OperationStruct_Message_DEFAULT
  }
return p.Message
}
func (p *OperationStruct) IsSetMessage() bool {
  return p.Message != nil
}

func (p *OperationStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OperationStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *OperationStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *OperationStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := OpTypeEnum(v)
  p.Type = temp
}
  return nil
}

func (p *OperationStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *OperationStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Checksum = v
}
  return nil
}

func (p *OperationStruct)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := OpStatusEnum(v)
  p.Status = temp
}
  return nil
}

func (p *OperationStruct)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Param1 = v
}
  return nil
}

func (p *OperationStruct)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Param2 = v
}
  return nil
}

func (p *OperationStruct)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Param3 = v
}
  return nil
}

func (p *OperationStruct)  ReadField20(iprot thrift.TProtocol) error {
  p.Message = &MessageStruct{}
  if err := p.Message.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
  }
  return nil
}

func (p *OperationStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OperationStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OperationStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("revision", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:revision: ", p), err) }
  if err := oprot.WriteI64(int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:revision: ", p), err) }
  return err
}

func (p *OperationStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *OperationStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *OperationStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reqSeq: ", p), err) }
  return err
}

func (p *OperationStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("checksum", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:checksum: ", p), err) }
  if err := oprot.WriteString(string(p.Checksum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.checksum (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:checksum: ", p), err) }
  return err
}

func (p *OperationStruct) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err) }
  return err
}

func (p *OperationStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("param1", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:param1: ", p), err) }
  if err := oprot.WriteString(string(p.Param1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param1 (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:param1: ", p), err) }
  return err
}

func (p *OperationStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("param2", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:param2: ", p), err) }
  if err := oprot.WriteString(string(p.Param2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param2 (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:param2: ", p), err) }
  return err
}

func (p *OperationStruct) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("param3", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:param3: ", p), err) }
  if err := oprot.WriteString(string(p.Param3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param3 (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:param3: ", p), err) }
  return err
}

func (p *OperationStruct) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:message: ", p), err) }
  if err := p.Message.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:message: ", p), err) }
  return err
}

func (p *OperationStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OperationStruct(%+v)", *p)
}

// Attributes:
//  - Token
//  - ObsToken
//  - Expiration
//  - RefreshToken
//  - ChannelAccessToken
type ChannelTokenStruct struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  ObsToken string `thrift:"obsToken,2" db:"obsToken" json:"obsToken"`
  Expiration int64 `thrift:"expiration,3" db:"expiration" json:"expiration"`
  RefreshToken string `thrift:"refreshToken,4" db:"refreshToken" json:"refreshToken"`
  ChannelAccessToken string `thrift:"channelAccessToken,5" db:"channelAccessToken" json:"channelAccessToken"`
}

func NewChannelTokenStruct() *ChannelTokenStruct {
  return &ChannelTokenStruct{}
}


func (p *ChannelTokenStruct) GetToken() string {
  return p.Token
}

func (p *ChannelTokenStruct) GetObsToken() string {
  return p.ObsToken
}

func (p *ChannelTokenStruct) GetExpiration() int64 {
  return p.Expiration
}

func (p *ChannelTokenStruct) GetRefreshToken() string {
  return p.RefreshToken
}

func (p *ChannelTokenStruct) GetChannelAccessToken() string {
  return p.ChannelAccessToken
}
func (p *ChannelTokenStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelTokenStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *ChannelTokenStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ObsToken = v
}
  return nil
}

func (p *ChannelTokenStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Expiration = v
}
  return nil
}

func (p *ChannelTokenStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RefreshToken = v
}
  return nil
}

func (p *ChannelTokenStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ChannelAccessToken = v
}
  return nil
}

func (p *ChannelTokenStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChannelTokenStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelTokenStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *ChannelTokenStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("obsToken", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:obsToken: ", p), err) }
  if err := oprot.WriteString(string(p.ObsToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.obsToken (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:obsToken: ", p), err) }
  return err
}

func (p *ChannelTokenStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expiration", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expiration: ", p), err) }
  if err := oprot.WriteI64(int64(p.Expiration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expiration (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expiration: ", p), err) }
  return err
}

func (p *ChannelTokenStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("refreshToken", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:refreshToken: ", p), err) }
  if err := oprot.WriteString(string(p.RefreshToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refreshToken (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:refreshToken: ", p), err) }
  return err
}

func (p *ChannelTokenStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelAccessToken", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:channelAccessToken: ", p), err) }
  if err := oprot.WriteString(string(p.ChannelAccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelAccessToken (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:channelAccessToken: ", p), err) }
  return err
}

func (p *ChannelTokenStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelTokenStruct(%+v)", *p)
}

// Attributes:
//  - ChatMid
type ChatContextStruct struct {
  ChatMid string `thrift:"chatMid,1" db:"chatMid" json:"chatMid"`
}

func NewChatContextStruct() *ChatContextStruct {
  return &ChatContextStruct{}
}


func (p *ChatContextStruct) GetChatMid() string {
  return p.ChatMid
}
func (p *ChatContextStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatContextStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *ChatContextStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChatContextStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatContextStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatMid: ", p), err) }
  return err
}

func (p *ChatContextStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatContextStruct(%+v)", *p)
}

// Attributes:
//  - SquareChatMid
type SquareChatContextStruct struct {
  SquareChatMid string `thrift:"squareChatMid,1" db:"squareChatMid" json:"squareChatMid"`
}

func NewSquareChatContextStruct() *SquareChatContextStruct {
  return &SquareChatContextStruct{}
}


func (p *SquareChatContextStruct) GetSquareChatMid() string {
  return p.SquareChatMid
}
func (p *SquareChatContextStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SquareChatContextStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SquareChatMid = v
}
  return nil
}

func (p *SquareChatContextStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SquareChatContextStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SquareChatContextStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("squareChatMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:squareChatMid: ", p), err) }
  if err := oprot.WriteString(string(p.SquareChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.squareChatMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:squareChatMid: ", p), err) }
  return err
}

func (p *SquareChatContextStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SquareChatContextStruct(%+v)", *p)
}

// Attributes:
//  - None
//  - Chat
//  - SquareChat
type LiffContextStruct struct {
  None bool `thrift:"none,1" db:"none" json:"none"`
  Chat *ChatContextStruct `thrift:"chat,2" db:"chat" json:"chat"`
  SquareChat *SquareChatContextStruct `thrift:"squareChat,3" db:"squareChat" json:"squareChat"`
}

func NewLiffContextStruct() *LiffContextStruct {
  return &LiffContextStruct{}
}


func (p *LiffContextStruct) GetNone() bool {
  return p.None
}
var LiffContextStruct_Chat_DEFAULT *ChatContextStruct
func (p *LiffContextStruct) GetChat() *ChatContextStruct {
  if !p.IsSetChat() {
    return LiffContextStruct_Chat_DEFAULT
  }
return p.Chat
}
var LiffContextStruct_SquareChat_DEFAULT *SquareChatContextStruct
func (p *LiffContextStruct) GetSquareChat() *SquareChatContextStruct {
  if !p.IsSetSquareChat() {
    return LiffContextStruct_SquareChat_DEFAULT
  }
return p.SquareChat
}
func (p *LiffContextStruct) IsSetChat() bool {
  return p.Chat != nil
}

func (p *LiffContextStruct) IsSetSquareChat() bool {
  return p.SquareChat != nil
}

func (p *LiffContextStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LiffContextStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.None = v
}
  return nil
}

func (p *LiffContextStruct)  ReadField2(iprot thrift.TProtocol) error {
  p.Chat = &ChatContextStruct{}
  if err := p.Chat.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
  }
  return nil
}

func (p *LiffContextStruct)  ReadField3(iprot thrift.TProtocol) error {
  p.SquareChat = &SquareChatContextStruct{}
  if err := p.SquareChat.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SquareChat), err)
  }
  return nil
}

func (p *LiffContextStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LiffContextStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LiffContextStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("none", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:none: ", p), err) }
  if err := oprot.WriteBool(bool(p.None)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.none (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:none: ", p), err) }
  return err
}

func (p *LiffContextStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chat", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chat: ", p), err) }
  if err := p.Chat.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chat: ", p), err) }
  return err
}

func (p *LiffContextStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("squareChat", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:squareChat: ", p), err) }
  if err := p.SquareChat.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SquareChat), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:squareChat: ", p), err) }
  return err
}

func (p *LiffContextStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LiffContextStruct(%+v)", *p)
}

// Attributes:
//  - LiffId
//  - Context
//  - Lang
type LiffViewRequestStruct struct {
  LiffId string `thrift:"liffId,1" db:"liffId" json:"liffId"`
  Context *LiffContextStruct `thrift:"context,2" db:"context" json:"context"`
  Lang string `thrift:"lang,3" db:"lang" json:"lang"`
}

func NewLiffViewRequestStruct() *LiffViewRequestStruct {
  return &LiffViewRequestStruct{}
}


func (p *LiffViewRequestStruct) GetLiffId() string {
  return p.LiffId
}
var LiffViewRequestStruct_Context_DEFAULT *LiffContextStruct
func (p *LiffViewRequestStruct) GetContext() *LiffContextStruct {
  if !p.IsSetContext() {
    return LiffViewRequestStruct_Context_DEFAULT
  }
return p.Context
}

func (p *LiffViewRequestStruct) GetLang() string {
  return p.Lang
}
func (p *LiffViewRequestStruct) IsSetContext() bool {
  return p.Context != nil
}

func (p *LiffViewRequestStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LiffViewRequestStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LiffId = v
}
  return nil
}

func (p *LiffViewRequestStruct)  ReadField2(iprot thrift.TProtocol) error {
  p.Context = &LiffContextStruct{}
  if err := p.Context.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Context), err)
  }
  return nil
}

func (p *LiffViewRequestStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Lang = v
}
  return nil
}

func (p *LiffViewRequestStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LiffViewRequestStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LiffViewRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("liffId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:liffId: ", p), err) }
  if err := oprot.WriteString(string(p.LiffId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.liffId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:liffId: ", p), err) }
  return err
}

func (p *LiffViewRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("context", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:context: ", p), err) }
  if err := p.Context.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Context), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:context: ", p), err) }
  return err
}

func (p *LiffViewRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lang", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lang: ", p), err) }
  if err := oprot.WriteString(string(p.Lang)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lang (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lang: ", p), err) }
  return err
}

func (p *LiffViewRequestStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LiffViewRequestStruct(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - Name
//  - EntryPageUrl
//  - DescriptionText
//  - Provider
//  - PublicType
//  - IconImage
//  - Permissions
//  - IconThumbnailImage
//  - ChannelConfigurations
//  - LcsAllApiUsable
//  - AllowedPermissions
//  - ChannelDomains
//  - UpdatedTimestamp
//  - FeatureLicenses
type ChannelInfoStruct struct {
  ChannelId string `thrift:"channelId,1" db:"channelId" json:"channelId"`
  // unused field # 2
  Name string `thrift:"name,3" db:"name" json:"name"`
  EntryPageUrl string `thrift:"entryPageUrl,4" db:"entryPageUrl" json:"entryPageUrl"`
  DescriptionText string `thrift:"descriptionText,5" db:"descriptionText" json:"descriptionText"`
  Provider *ChannelProviderStruct `thrift:"provider,6" db:"provider" json:"provider"`
  PublicType PublicTypeEnum `thrift:"publicType,7" db:"publicType" json:"publicType"`
  IconImage string `thrift:"iconImage,8" db:"iconImage" json:"iconImage"`
  Permissions []string `thrift:"permissions,9" db:"permissions" json:"permissions"`
  // unused field # 10
  IconThumbnailImage string `thrift:"iconThumbnailImage,11" db:"iconThumbnailImage" json:"iconThumbnailImage"`
  ChannelConfigurations []ChannelConfigurationEnum `thrift:"channelConfigurations,12" db:"channelConfigurations" json:"channelConfigurations"`
  LcsAllApiUsable bool `thrift:"lcsAllApiUsable,13" db:"lcsAllApiUsable" json:"lcsAllApiUsable"`
  AllowedPermissions []ChannelPermissionEnum `thrift:"allowedPermissions,14" db:"allowedPermissions" json:"allowedPermissions"`
  ChannelDomains []*ChannelDomainStruct `thrift:"channelDomains,15" db:"channelDomains" json:"channelDomains"`
  UpdatedTimestamp int64 `thrift:"updatedTimestamp,16" db:"updatedTimestamp" json:"updatedTimestamp"`
  FeatureLicenses []FeatureLicensesEnum `thrift:"featureLicenses,17" db:"featureLicenses" json:"featureLicenses"`
}

func NewChannelInfoStruct() *ChannelInfoStruct {
  return &ChannelInfoStruct{}
}


func (p *ChannelInfoStruct) GetChannelId() string {
  return p.ChannelId
}

func (p *ChannelInfoStruct) GetName() string {
  return p.Name
}

func (p *ChannelInfoStruct) GetEntryPageUrl() string {
  return p.EntryPageUrl
}

func (p *ChannelInfoStruct) GetDescriptionText() string {
  return p.DescriptionText
}
var ChannelInfoStruct_Provider_DEFAULT *ChannelProviderStruct
func (p *ChannelInfoStruct) GetProvider() *ChannelProviderStruct {
  if !p.IsSetProvider() {
    return ChannelInfoStruct_Provider_DEFAULT
  }
return p.Provider
}

func (p *ChannelInfoStruct) GetPublicType() PublicTypeEnum {
  return p.PublicType
}

func (p *ChannelInfoStruct) GetIconImage() string {
  return p.IconImage
}

func (p *ChannelInfoStruct) GetPermissions() []string {
  return p.Permissions
}

func (p *ChannelInfoStruct) GetIconThumbnailImage() string {
  return p.IconThumbnailImage
}

func (p *ChannelInfoStruct) GetChannelConfigurations() []ChannelConfigurationEnum {
  return p.ChannelConfigurations
}

func (p *ChannelInfoStruct) GetLcsAllApiUsable() bool {
  return p.LcsAllApiUsable
}

func (p *ChannelInfoStruct) GetAllowedPermissions() []ChannelPermissionEnum {
  return p.AllowedPermissions
}

func (p *ChannelInfoStruct) GetChannelDomains() []*ChannelDomainStruct {
  return p.ChannelDomains
}

func (p *ChannelInfoStruct) GetUpdatedTimestamp() int64 {
  return p.UpdatedTimestamp
}

func (p *ChannelInfoStruct) GetFeatureLicenses() []FeatureLicensesEnum {
  return p.FeatureLicenses
}
func (p *ChannelInfoStruct) IsSetProvider() bool {
  return p.Provider != nil
}

func (p *ChannelInfoStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelInfoStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *ChannelInfoStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ChannelInfoStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EntryPageUrl = v
}
  return nil
}

func (p *ChannelInfoStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DescriptionText = v
}
  return nil
}

func (p *ChannelInfoStruct)  ReadField6(iprot thrift.TProtocol) error {
  p.Provider = &ChannelProviderStruct{}
  if err := p.Provider.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Provider), err)
  }
  return nil
}

func (p *ChannelInfoStruct)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := PublicTypeEnum(v)
  p.PublicType = temp
}
  return nil
}

func (p *ChannelInfoStruct)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.IconImage = v
}
  return nil
}

func (p *ChannelInfoStruct)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Permissions =  tSlice
  for i := 0; i < size; i ++ {
var _elem15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem15 = v
}
    p.Permissions = append(p.Permissions, _elem15)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChannelInfoStruct)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.IconThumbnailImage = v
}
  return nil
}

func (p *ChannelInfoStruct)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]ChannelConfigurationEnum, 0, size)
  p.ChannelConfigurations =  tSlice
  for i := 0; i < size; i ++ {
var _elem16 ChannelConfigurationEnum
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := ChannelConfigurationEnum(v)
    _elem16 = temp
}
    p.ChannelConfigurations = append(p.ChannelConfigurations, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChannelInfoStruct)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.LcsAllApiUsable = v
}
  return nil
}

func (p *ChannelInfoStruct)  ReadField14(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]ChannelPermissionEnum, 0, size)
  p.AllowedPermissions =  tSet
  for i := 0; i < size; i ++ {
var _elem17 ChannelPermissionEnum
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := ChannelPermissionEnum(v)
    _elem17 = temp
}
    p.AllowedPermissions = append(p.AllowedPermissions, _elem17)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *ChannelInfoStruct)  ReadField15(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ChannelDomainStruct, 0, size)
  p.ChannelDomains =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := &ChannelDomainStruct{}
    if err := _elem18.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.ChannelDomains = append(p.ChannelDomains, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ChannelInfoStruct)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.UpdatedTimestamp = v
}
  return nil
}

func (p *ChannelInfoStruct)  ReadField17(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]FeatureLicensesEnum, 0, size)
  p.FeatureLicenses =  tSet
  for i := 0; i < size; i ++ {
var _elem19 FeatureLicensesEnum
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := FeatureLicensesEnum(v)
    _elem19 = temp
}
    p.FeatureLicenses = append(p.FeatureLicenses, _elem19)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *ChannelInfoStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChannelInfoStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelInfoStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err) }
  if err := oprot.WriteString(string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err) }
  return err
}

func (p *ChannelInfoStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *ChannelInfoStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("entryPageUrl", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:entryPageUrl: ", p), err) }
  if err := oprot.WriteString(string(p.EntryPageUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.entryPageUrl (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:entryPageUrl: ", p), err) }
  return err
}

func (p *ChannelInfoStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("descriptionText", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:descriptionText: ", p), err) }
  if err := oprot.WriteString(string(p.DescriptionText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.descriptionText (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:descriptionText: ", p), err) }
  return err
}

func (p *ChannelInfoStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("provider", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:provider: ", p), err) }
  if err := p.Provider.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Provider), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:provider: ", p), err) }
  return err
}

func (p *ChannelInfoStruct) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("publicType", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:publicType: ", p), err) }
  if err := oprot.WriteI32(int32(p.PublicType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.publicType (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:publicType: ", p), err) }
  return err
}

func (p *ChannelInfoStruct) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("iconImage", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:iconImage: ", p), err) }
  if err := oprot.WriteString(string(p.IconImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iconImage (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:iconImage: ", p), err) }
  return err
}

func (p *ChannelInfoStruct) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("permissions", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:permissions: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Permissions)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Permissions {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:permissions: ", p), err) }
  return err
}

func (p *ChannelInfoStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("iconThumbnailImage", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:iconThumbnailImage: ", p), err) }
  if err := oprot.WriteString(string(p.IconThumbnailImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iconThumbnailImage (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:iconThumbnailImage: ", p), err) }
  return err
}

func (p *ChannelInfoStruct) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelConfigurations", thrift.LIST, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:channelConfigurations: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.ChannelConfigurations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChannelConfigurations {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:channelConfigurations: ", p), err) }
  return err
}

func (p *ChannelInfoStruct) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lcsAllApiUsable", thrift.BOOL, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:lcsAllApiUsable: ", p), err) }
  if err := oprot.WriteBool(bool(p.LcsAllApiUsable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lcsAllApiUsable (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:lcsAllApiUsable: ", p), err) }
  return err
}

func (p *ChannelInfoStruct) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allowedPermissions", thrift.SET, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:allowedPermissions: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I32, len(p.AllowedPermissions)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AllowedPermissions); i++ {
    for j := i+1; j<len(p.AllowedPermissions); j++ {
      if reflect.DeepEqual(p.AllowedPermissions[i],p.AllowedPermissions[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AllowedPermissions[i]))
      }
    }
  }
  for _, v := range p.AllowedPermissions {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:allowedPermissions: ", p), err) }
  return err
}

func (p *ChannelInfoStruct) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelDomains", thrift.LIST, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:channelDomains: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ChannelDomains)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChannelDomains {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:channelDomains: ", p), err) }
  return err
}

func (p *ChannelInfoStruct) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedTimestamp", thrift.I64, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:updatedTimestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdatedTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedTimestamp (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:updatedTimestamp: ", p), err) }
  return err
}

func (p *ChannelInfoStruct) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("featureLicenses", thrift.SET, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:featureLicenses: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I32, len(p.FeatureLicenses)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.FeatureLicenses); i++ {
    for j := i+1; j<len(p.FeatureLicenses); j++ {
      if reflect.DeepEqual(p.FeatureLicenses[i],p.FeatureLicenses[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.FeatureLicenses[i]))
      }
    }
  }
  for _, v := range p.FeatureLicenses {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:featureLicenses: ", p), err) }
  return err
}

func (p *ChannelInfoStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelInfoStruct(%+v)", *p)
}

// Attributes:
//  - ContextToken
//  - AccessToken
//  - FeatureToken
//  - Features
//  - ChannelId
type LiffViewStruct struct {
  // unused field # 1
  ContextToken string `thrift:"contextToken,2" db:"contextToken" json:"contextToken"`
  AccessToken string `thrift:"accessToken,3" db:"accessToken" json:"accessToken"`
  FeatureToken string `thrift:"featureToken,4" db:"featureToken" json:"featureToken"`
  Features []LiffFeatureStuct `thrift:"features,5" db:"features" json:"features"`
  ChannelId string `thrift:"channelId,6" db:"channelId" json:"channelId"`
}

func NewLiffViewStruct() *LiffViewStruct {
  return &LiffViewStruct{}
}


func (p *LiffViewStruct) GetContextToken() string {
  return p.ContextToken
}

func (p *LiffViewStruct) GetAccessToken() string {
  return p.AccessToken
}

func (p *LiffViewStruct) GetFeatureToken() string {
  return p.FeatureToken
}

func (p *LiffViewStruct) GetFeatures() []LiffFeatureStuct {
  return p.Features
}

func (p *LiffViewStruct) GetChannelId() string {
  return p.ChannelId
}
func (p *LiffViewStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LiffViewStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ContextToken = v
}
  return nil
}

func (p *LiffViewStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AccessToken = v
}
  return nil
}

func (p *LiffViewStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FeatureToken = v
}
  return nil
}

func (p *LiffViewStruct)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]LiffFeatureStuct, 0, size)
  p.Features =  tSlice
  for i := 0; i < size; i ++ {
var _elem20 LiffFeatureStuct
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := LiffFeatureStuct(v)
    _elem20 = temp
}
    p.Features = append(p.Features, _elem20)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LiffViewStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *LiffViewStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LiffViewStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LiffViewStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contextToken", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:contextToken: ", p), err) }
  if err := oprot.WriteString(string(p.ContextToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contextToken (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:contextToken: ", p), err) }
  return err
}

func (p *LiffViewStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accessToken", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accessToken: ", p), err) }
  if err := oprot.WriteString(string(p.AccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accessToken (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accessToken: ", p), err) }
  return err
}

func (p *LiffViewStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("featureToken", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:featureToken: ", p), err) }
  if err := oprot.WriteString(string(p.FeatureToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.featureToken (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:featureToken: ", p), err) }
  return err
}

func (p *LiffViewStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("features", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:features: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Features)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Features {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:features: ", p), err) }
  return err
}

func (p *LiffViewStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:channelId: ", p), err) }
  if err := oprot.WriteString(string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:channelId: ", p), err) }
  return err
}

func (p *LiffViewStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LiffViewStruct(%+v)", *p)
}

// Attributes:
//  - EMid
//  - Mid
//  - Direction
//  - Method
//  - Param
//  - Timestamp
//  - SeqId
//  - DisplayName
//  - PicturePath
//  - PictureStatus
type FriendRequestStruct struct {
  EMid string `thrift:"eMid,1" db:"eMid" json:"eMid"`
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  Direction FriendDirectionEnum `thrift:"direction,3" db:"direction" json:"direction"`
  Method FriendMethodEnum `thrift:"method,4" db:"method" json:"method"`
  Param string `thrift:"param,5" db:"param" json:"param"`
  Timestamp int64 `thrift:"timestamp,6" db:"timestamp" json:"timestamp"`
  SeqId int64 `thrift:"seqId,7" db:"seqId" json:"seqId"`
  // unused fields # 8 to 9
  DisplayName string `thrift:"displayName,10" db:"displayName" json:"displayName"`
  PicturePath string `thrift:"picturePath,11" db:"picturePath" json:"picturePath"`
  PictureStatus string `thrift:"pictureStatus,12" db:"pictureStatus" json:"pictureStatus"`
}

func NewFriendRequestStruct() *FriendRequestStruct {
  return &FriendRequestStruct{}
}


func (p *FriendRequestStruct) GetEMid() string {
  return p.EMid
}

func (p *FriendRequestStruct) GetMid() string {
  return p.Mid
}

func (p *FriendRequestStruct) GetDirection() FriendDirectionEnum {
  return p.Direction
}

func (p *FriendRequestStruct) GetMethod() FriendMethodEnum {
  return p.Method
}

func (p *FriendRequestStruct) GetParam() string {
  return p.Param
}

func (p *FriendRequestStruct) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *FriendRequestStruct) GetSeqId() int64 {
  return p.SeqId
}

func (p *FriendRequestStruct) GetDisplayName() string {
  return p.DisplayName
}

func (p *FriendRequestStruct) GetPicturePath() string {
  return p.PicturePath
}

func (p *FriendRequestStruct) GetPictureStatus() string {
  return p.PictureStatus
}
func (p *FriendRequestStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FriendRequestStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.EMid = v
}
  return nil
}

func (p *FriendRequestStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *FriendRequestStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := FriendDirectionEnum(v)
  p.Direction = temp
}
  return nil
}

func (p *FriendRequestStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := FriendMethodEnum(v)
  p.Method = temp
}
  return nil
}

func (p *FriendRequestStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Param = v
}
  return nil
}

func (p *FriendRequestStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *FriendRequestStruct)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SeqId = v
}
  return nil
}

func (p *FriendRequestStruct)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *FriendRequestStruct)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *FriendRequestStruct)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *FriendRequestStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FriendRequestStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FriendRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:eMid: ", p), err) }
  if err := oprot.WriteString(string(p.EMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:eMid: ", p), err) }
  return err
}

func (p *FriendRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *FriendRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("direction", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:direction: ", p), err) }
  if err := oprot.WriteI32(int32(p.Direction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.direction (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:direction: ", p), err) }
  return err
}

func (p *FriendRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("method", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:method: ", p), err) }
  if err := oprot.WriteI32(int32(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:method: ", p), err) }
  return err
}

func (p *FriendRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("param", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:param: ", p), err) }
  if err := oprot.WriteString(string(p.Param)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:param: ", p), err) }
  return err
}

func (p *FriendRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timestamp: ", p), err) }
  return err
}

func (p *FriendRequestStruct) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seqId", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:seqId: ", p), err) }
  if err := oprot.WriteI64(int64(p.SeqId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seqId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:seqId: ", p), err) }
  return err
}

func (p *FriendRequestStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:displayName: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:displayName: ", p), err) }
  return err
}

func (p *FriendRequestStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:picturePath: ", p), err) }
  if err := oprot.WriteString(string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:picturePath: ", p), err) }
  return err
}

func (p *FriendRequestStruct) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:pictureStatus: ", p), err) }
  if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:pictureStatus: ", p), err) }
  return err
}

func (p *FriendRequestStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FriendRequestStruct(%+v)", *p)
}

// Attributes:
//  - Currency
//  - Amount
//  - PriceString
type PriceStruct struct {
  Currency string `thrift:"currency,1" db:"currency" json:"currency"`
  Amount string `thrift:"amount,2" db:"amount" json:"amount"`
  PriceString string `thrift:"priceString,3" db:"priceString" json:"priceString"`
}

func NewPriceStruct() *PriceStruct {
  return &PriceStruct{}
}


func (p *PriceStruct) GetCurrency() string {
  return p.Currency
}

func (p *PriceStruct) GetAmount() string {
  return p.Amount
}

func (p *PriceStruct) GetPriceString() string {
  return p.PriceString
}
func (p *PriceStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PriceStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Currency = v
}
  return nil
}

func (p *PriceStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *PriceStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PriceString = v
}
  return nil
}

func (p *PriceStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PriceStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PriceStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currency", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:currency: ", p), err) }
  if err := oprot.WriteString(string(p.Currency)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.currency (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:currency: ", p), err) }
  return err
}

func (p *PriceStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err) }
  if err := oprot.WriteString(string(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err) }
  return err
}

func (p *PriceStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("priceString", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:priceString: ", p), err) }
  if err := oprot.WriteString(string(p.PriceString)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priceString (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:priceString: ", p), err) }
  return err
}

func (p *PriceStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PriceStruct(%+v)", *p)
}

// Attributes:
//  - LowerBound
//  - LowerBoundInclusive
//  - UpperBound
//  - UpperBoundInclusive
type VersionRangeStruct struct {
  LowerBound string `thrift:"lowerBound,1" db:"lowerBound" json:"lowerBound"`
  LowerBoundInclusive bool `thrift:"lowerBoundInclusive,2" db:"lowerBoundInclusive" json:"lowerBoundInclusive"`
  UpperBound string `thrift:"upperBound,3" db:"upperBound" json:"upperBound"`
  UpperBoundInclusive bool `thrift:"upperBoundInclusive,4" db:"upperBoundInclusive" json:"upperBoundInclusive"`
}

func NewVersionRangeStruct() *VersionRangeStruct {
  return &VersionRangeStruct{}
}


func (p *VersionRangeStruct) GetLowerBound() string {
  return p.LowerBound
}

func (p *VersionRangeStruct) GetLowerBoundInclusive() bool {
  return p.LowerBoundInclusive
}

func (p *VersionRangeStruct) GetUpperBound() string {
  return p.UpperBound
}

func (p *VersionRangeStruct) GetUpperBoundInclusive() bool {
  return p.UpperBoundInclusive
}
func (p *VersionRangeStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VersionRangeStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LowerBound = v
}
  return nil
}

func (p *VersionRangeStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LowerBoundInclusive = v
}
  return nil
}

func (p *VersionRangeStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UpperBound = v
}
  return nil
}

func (p *VersionRangeStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UpperBoundInclusive = v
}
  return nil
}

func (p *VersionRangeStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VersionRangeStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VersionRangeStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lowerBound", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lowerBound: ", p), err) }
  if err := oprot.WriteString(string(p.LowerBound)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lowerBound (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lowerBound: ", p), err) }
  return err
}

func (p *VersionRangeStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lowerBoundInclusive", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lowerBoundInclusive: ", p), err) }
  if err := oprot.WriteBool(bool(p.LowerBoundInclusive)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lowerBoundInclusive (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lowerBoundInclusive: ", p), err) }
  return err
}

func (p *VersionRangeStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("upperBound", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:upperBound: ", p), err) }
  if err := oprot.WriteString(string(p.UpperBound)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.upperBound (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:upperBound: ", p), err) }
  return err
}

func (p *VersionRangeStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("upperBoundInclusive", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:upperBoundInclusive: ", p), err) }
  if err := oprot.WriteBool(bool(p.UpperBoundInclusive)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.upperBoundInclusive (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:upperBoundInclusive: ", p), err) }
  return err
}

func (p *VersionRangeStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VersionRangeStruct(%+v)", *p)
}

// Attributes:
//  - BuddyMid
type PromoBuddyInfoStruct struct {
  BuddyMid string `thrift:"buddyMid,1" db:"buddyMid" json:"buddyMid"`
}

func NewPromoBuddyInfoStruct() *PromoBuddyInfoStruct {
  return &PromoBuddyInfoStruct{}
}


func (p *PromoBuddyInfoStruct) GetBuddyMid() string {
  return p.BuddyMid
}
func (p *PromoBuddyInfoStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PromoBuddyInfoStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BuddyMid = v
}
  return nil
}

func (p *PromoBuddyInfoStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PromoBuddyInfoStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PromoBuddyInfoStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buddyMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:buddyMid: ", p), err) }
  if err := oprot.WriteString(string(p.BuddyMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buddyMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:buddyMid: ", p), err) }
  return err
}

func (p *PromoBuddyInfoStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PromoBuddyInfoStruct(%+v)", *p)
}

// Attributes:
//  - DownloadUrl
//  - CustomUrlSchema
type PromoInstallInfoStruct struct {
  DownloadUrl string `thrift:"downloadUrl,1" db:"downloadUrl" json:"downloadUrl"`
  CustomUrlSchema string `thrift:"customUrlSchema,2" db:"customUrlSchema" json:"customUrlSchema"`
}

func NewPromoInstallInfoStruct() *PromoInstallInfoStruct {
  return &PromoInstallInfoStruct{}
}


func (p *PromoInstallInfoStruct) GetDownloadUrl() string {
  return p.DownloadUrl
}

func (p *PromoInstallInfoStruct) GetCustomUrlSchema() string {
  return p.CustomUrlSchema
}
func (p *PromoInstallInfoStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PromoInstallInfoStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DownloadUrl = v
}
  return nil
}

func (p *PromoInstallInfoStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CustomUrlSchema = v
}
  return nil
}

func (p *PromoInstallInfoStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PromoInstallInfoStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PromoInstallInfoStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("downloadUrl", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:downloadUrl: ", p), err) }
  if err := oprot.WriteString(string(p.DownloadUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.downloadUrl (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:downloadUrl: ", p), err) }
  return err
}

func (p *PromoInstallInfoStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("customUrlSchema", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:customUrlSchema: ", p), err) }
  if err := oprot.WriteString(string(p.CustomUrlSchema)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.customUrlSchema (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:customUrlSchema: ", p), err) }
  return err
}

func (p *PromoInstallInfoStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PromoInstallInfoStruct(%+v)", *p)
}

// Attributes:
//  - PromotionMissionType
//  - MissionCompleted
//  - DownloadUrl
//  - CustomUrlSchema
type PromoMissionInfoStruct struct {
  PromotionMissionType PromoMissionTypeEnum `thrift:"promotionMissionType,1" db:"promotionMissionType" json:"promotionMissionType"`
  MissionCompleted bool `thrift:"missionCompleted,2" db:"missionCompleted" json:"missionCompleted"`
  DownloadUrl string `thrift:"downloadUrl,3" db:"downloadUrl" json:"downloadUrl"`
  CustomUrlSchema string `thrift:"customUrlSchema,4" db:"customUrlSchema" json:"customUrlSchema"`
}

func NewPromoMissionInfoStruct() *PromoMissionInfoStruct {
  return &PromoMissionInfoStruct{}
}


func (p *PromoMissionInfoStruct) GetPromotionMissionType() PromoMissionTypeEnum {
  return p.PromotionMissionType
}

func (p *PromoMissionInfoStruct) GetMissionCompleted() bool {
  return p.MissionCompleted
}

func (p *PromoMissionInfoStruct) GetDownloadUrl() string {
  return p.DownloadUrl
}

func (p *PromoMissionInfoStruct) GetCustomUrlSchema() string {
  return p.CustomUrlSchema
}
func (p *PromoMissionInfoStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PromoMissionInfoStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := PromoMissionTypeEnum(v)
  p.PromotionMissionType = temp
}
  return nil
}

func (p *PromoMissionInfoStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MissionCompleted = v
}
  return nil
}

func (p *PromoMissionInfoStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DownloadUrl = v
}
  return nil
}

func (p *PromoMissionInfoStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CustomUrlSchema = v
}
  return nil
}

func (p *PromoMissionInfoStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PromoMissionInfoStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PromoMissionInfoStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("promotionMissionType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:promotionMissionType: ", p), err) }
  if err := oprot.WriteI32(int32(p.PromotionMissionType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.promotionMissionType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:promotionMissionType: ", p), err) }
  return err
}

func (p *PromoMissionInfoStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("missionCompleted", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:missionCompleted: ", p), err) }
  if err := oprot.WriteBool(bool(p.MissionCompleted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.missionCompleted (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:missionCompleted: ", p), err) }
  return err
}

func (p *PromoMissionInfoStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("downloadUrl", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:downloadUrl: ", p), err) }
  if err := oprot.WriteString(string(p.DownloadUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.downloadUrl (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:downloadUrl: ", p), err) }
  return err
}

func (p *PromoMissionInfoStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("customUrlSchema", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:customUrlSchema: ", p), err) }
  if err := oprot.WriteString(string(p.CustomUrlSchema)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.customUrlSchema (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:customUrlSchema: ", p), err) }
  return err
}

func (p *PromoMissionInfoStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PromoMissionInfoStruct(%+v)", *p)
}

// Attributes:
//  - PromotionBuddyInfo
//  - PromotionInstallInfo
//  - PromotionMissionInfo
type PromoDetailStruct struct {
  PromotionBuddyInfo *PromoBuddyInfoStruct `thrift:"promotionBuddyInfo,1" db:"promotionBuddyInfo" json:"promotionBuddyInfo"`
  PromotionInstallInfo *PromoInstallInfoStruct `thrift:"promotionInstallInfo,2" db:"promotionInstallInfo" json:"promotionInstallInfo"`
  PromotionMissionInfo string `thrift:"promotionMissionInfo,3" db:"promotionMissionInfo" json:"promotionMissionInfo"`
}

func NewPromoDetailStruct() *PromoDetailStruct {
  return &PromoDetailStruct{}
}

var PromoDetailStruct_PromotionBuddyInfo_DEFAULT *PromoBuddyInfoStruct
func (p *PromoDetailStruct) GetPromotionBuddyInfo() *PromoBuddyInfoStruct {
  if !p.IsSetPromotionBuddyInfo() {
    return PromoDetailStruct_PromotionBuddyInfo_DEFAULT
  }
return p.PromotionBuddyInfo
}
var PromoDetailStruct_PromotionInstallInfo_DEFAULT *PromoInstallInfoStruct
func (p *PromoDetailStruct) GetPromotionInstallInfo() *PromoInstallInfoStruct {
  if !p.IsSetPromotionInstallInfo() {
    return PromoDetailStruct_PromotionInstallInfo_DEFAULT
  }
return p.PromotionInstallInfo
}

func (p *PromoDetailStruct) GetPromotionMissionInfo() string {
  return p.PromotionMissionInfo
}
func (p *PromoDetailStruct) IsSetPromotionBuddyInfo() bool {
  return p.PromotionBuddyInfo != nil
}

func (p *PromoDetailStruct) IsSetPromotionInstallInfo() bool {
  return p.PromotionInstallInfo != nil
}

func (p *PromoDetailStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PromoDetailStruct)  ReadField1(iprot thrift.TProtocol) error {
  p.PromotionBuddyInfo = &PromoBuddyInfoStruct{}
  if err := p.PromotionBuddyInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PromotionBuddyInfo), err)
  }
  return nil
}

func (p *PromoDetailStruct)  ReadField2(iprot thrift.TProtocol) error {
  p.PromotionInstallInfo = &PromoInstallInfoStruct{}
  if err := p.PromotionInstallInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PromotionInstallInfo), err)
  }
  return nil
}

func (p *PromoDetailStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PromotionMissionInfo = v
}
  return nil
}

func (p *PromoDetailStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PromoDetailStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PromoDetailStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("promotionBuddyInfo", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:promotionBuddyInfo: ", p), err) }
  if err := p.PromotionBuddyInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PromotionBuddyInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:promotionBuddyInfo: ", p), err) }
  return err
}

func (p *PromoDetailStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("promotionInstallInfo", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:promotionInstallInfo: ", p), err) }
  if err := p.PromotionInstallInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PromotionInstallInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:promotionInstallInfo: ", p), err) }
  return err
}

func (p *PromoDetailStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("promotionMissionInfo", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:promotionMissionInfo: ", p), err) }
  if err := oprot.WriteString(string(p.PromotionMissionInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.promotionMissionInfo (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:promotionMissionInfo: ", p), err) }
  return err
}

func (p *PromoDetailStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PromoDetailStruct(%+v)", *p)
}

// Attributes:
//  - PromotionType
//  - PromotionDetail
//  - BuddyInfo
type PromotionInfoStruct struct {
  PromotionType PromoTypeEnum `thrift:"promotionType,1" db:"promotionType" json:"promotionType"`
  PromotionDetail *PromoDetailStruct `thrift:"promotionDetail,2" db:"promotionDetail" json:"promotionDetail"`
  // unused fields # 3 to 50
  BuddyInfo *PromoBuddyInfoStruct `thrift:"buddyInfo,51" db:"buddyInfo" json:"buddyInfo"`
}

func NewPromotionInfoStruct() *PromotionInfoStruct {
  return &PromotionInfoStruct{}
}


func (p *PromotionInfoStruct) GetPromotionType() PromoTypeEnum {
  return p.PromotionType
}
var PromotionInfoStruct_PromotionDetail_DEFAULT *PromoDetailStruct
func (p *PromotionInfoStruct) GetPromotionDetail() *PromoDetailStruct {
  if !p.IsSetPromotionDetail() {
    return PromotionInfoStruct_PromotionDetail_DEFAULT
  }
return p.PromotionDetail
}
var PromotionInfoStruct_BuddyInfo_DEFAULT *PromoBuddyInfoStruct
func (p *PromotionInfoStruct) GetBuddyInfo() *PromoBuddyInfoStruct {
  if !p.IsSetBuddyInfo() {
    return PromotionInfoStruct_BuddyInfo_DEFAULT
  }
return p.BuddyInfo
}
func (p *PromotionInfoStruct) IsSetPromotionDetail() bool {
  return p.PromotionDetail != nil
}

func (p *PromotionInfoStruct) IsSetBuddyInfo() bool {
  return p.BuddyInfo != nil
}

func (p *PromotionInfoStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 51:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField51(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PromotionInfoStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := PromoTypeEnum(v)
  p.PromotionType = temp
}
  return nil
}

func (p *PromotionInfoStruct)  ReadField2(iprot thrift.TProtocol) error {
  p.PromotionDetail = &PromoDetailStruct{}
  if err := p.PromotionDetail.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PromotionDetail), err)
  }
  return nil
}

func (p *PromotionInfoStruct)  ReadField51(iprot thrift.TProtocol) error {
  p.BuddyInfo = &PromoBuddyInfoStruct{}
  if err := p.BuddyInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BuddyInfo), err)
  }
  return nil
}

func (p *PromotionInfoStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PromotionInfoStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField51(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PromotionInfoStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("promotionType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:promotionType: ", p), err) }
  if err := oprot.WriteI32(int32(p.PromotionType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.promotionType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:promotionType: ", p), err) }
  return err
}

func (p *PromotionInfoStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("promotionDetail", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:promotionDetail: ", p), err) }
  if err := p.PromotionDetail.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PromotionDetail), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:promotionDetail: ", p), err) }
  return err
}

func (p *PromotionInfoStruct) writeField51(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buddyInfo", thrift.STRUCT, 51); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 51:buddyInfo: ", p), err) }
  if err := p.BuddyInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BuddyInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 51:buddyInfo: ", p), err) }
  return err
}

func (p *PromotionInfoStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PromotionInfoStruct(%+v)", *p)
}

// Attributes:
//  - TotalCount
type WishPropertyStruct struct {
  TotalCount int64 `thrift:"totalCount,1" db:"totalCount" json:"totalCount"`
}

func NewWishPropertyStruct() *WishPropertyStruct {
  return &WishPropertyStruct{}
}


func (p *WishPropertyStruct) GetTotalCount() int64 {
  return p.TotalCount
}
func (p *WishPropertyStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WishPropertyStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TotalCount = v
}
  return nil
}

func (p *WishPropertyStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WishPropertyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WishPropertyStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalCount", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalCount: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalCount (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalCount: ", p), err) }
  return err
}

func (p *WishPropertyStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WishPropertyStruct(%+v)", *p)
}

// Attributes:
//  - AvailableForSubscribe
//  - SubscriptionAvailability
type SubscriptionPropertyStruct struct {
  AvailableForSubscribe bool `thrift:"availableForSubscribe,1" db:"availableForSubscribe" json:"availableForSubscribe"`
  SubscriptionAvailability AvailabilityEnum `thrift:"subscriptionAvailability,2" db:"subscriptionAvailability" json:"subscriptionAvailability"`
}

func NewSubscriptionPropertyStruct() *SubscriptionPropertyStruct {
  return &SubscriptionPropertyStruct{}
}


func (p *SubscriptionPropertyStruct) GetAvailableForSubscribe() bool {
  return p.AvailableForSubscribe
}

func (p *SubscriptionPropertyStruct) GetSubscriptionAvailability() AvailabilityEnum {
  return p.SubscriptionAvailability
}
func (p *SubscriptionPropertyStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SubscriptionPropertyStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AvailableForSubscribe = v
}
  return nil
}

func (p *SubscriptionPropertyStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := AvailabilityEnum(v)
  p.SubscriptionAvailability = temp
}
  return nil
}

func (p *SubscriptionPropertyStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SubscriptionPropertyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SubscriptionPropertyStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("availableForSubscribe", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:availableForSubscribe: ", p), err) }
  if err := oprot.WriteBool(bool(p.AvailableForSubscribe)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.availableForSubscribe (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:availableForSubscribe: ", p), err) }
  return err
}

func (p *SubscriptionPropertyStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("subscriptionAvailability", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:subscriptionAvailability: ", p), err) }
  if err := oprot.WriteI32(int32(p.SubscriptionAvailability)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.subscriptionAvailability (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:subscriptionAvailability: ", p), err) }
  return err
}

func (p *SubscriptionPropertyStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SubscriptionPropertyStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - BillingItemId
//  - Type
//  - Subtype
//  - BillingCpId
//  - Name
//  - Author
//  - Details
//  - Copyright
//  - Notice
//  - PromotionInfo
//  - LatestVersion
//  - LatestVersionString
//  - Version
//  - VersionString
//  - ApplicationVersionRange
//  - Owned
//  - GrantedByDefault
//  - ValidFor
//  - ValidUntil
//  - OnSale
//  - SalesFlags
//  - AvailableForPresent
//  - AvailableForMyself
//  - PriceTier
//  - Price
//  - PriceInLineCoin
//  - LocalizedPrice
//  - Images
//  - Attributes
//  - AuthorId
//  - StickerResourceType
//  - ProductProperty
//  - ProductSalesState
//  - InstalledTime
//  - WishProperty
//  - SubscriptionProperty
type GetProductStruct struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  BillingItemId string `thrift:"billingItemId,2" db:"billingItemId" json:"billingItemId"`
  Type string `thrift:"type,3" db:"type" json:"type"`
  Subtype SubTypeEnum `thrift:"subtype,4" db:"subtype" json:"subtype"`
  BillingCpId string `thrift:"billingCpId,5" db:"billingCpId" json:"billingCpId"`
  // unused fields # 6 to 10
  Name string `thrift:"name,11" db:"name" json:"name"`
  Author string `thrift:"author,12" db:"author" json:"author"`
  Details string `thrift:"details,13" db:"details" json:"details"`
  Copyright string `thrift:"copyright,14" db:"copyright" json:"copyright"`
  Notice string `thrift:"notice,15" db:"notice" json:"notice"`
  PromotionInfo *PromotionInfoStruct `thrift:"promotionInfo,16" db:"promotionInfo" json:"promotionInfo"`
  // unused fields # 17 to 20
  LatestVersion int64 `thrift:"latestVersion,21" db:"latestVersion" json:"latestVersion"`
  LatestVersionString string `thrift:"latestVersionString,22" db:"latestVersionString" json:"latestVersionString"`
  Version int64 `thrift:"version,23" db:"version" json:"version"`
  VersionString string `thrift:"versionString,24" db:"versionString" json:"versionString"`
  ApplicationVersionRange *VersionRangeStruct `thrift:"applicationVersionRange,25" db:"applicationVersionRange" json:"applicationVersionRange"`
  // unused fields # 26 to 30
  Owned bool `thrift:"owned,31" db:"owned" json:"owned"`
  GrantedByDefault bool `thrift:"grantedByDefault,32" db:"grantedByDefault" json:"grantedByDefault"`
  // unused fields # 33 to 40
  ValidFor int32 `thrift:"validFor,41" db:"validFor" json:"validFor"`
  ValidUntil int64 `thrift:"validUntil,42" db:"validUntil" json:"validUntil"`
  // unused fields # 43 to 50
  OnSale bool `thrift:"onSale,51" db:"onSale" json:"onSale"`
  SalesFlags []string `thrift:"salesFlags,52" db:"salesFlags" json:"salesFlags"`
  AvailableForPresent bool `thrift:"availableForPresent,53" db:"availableForPresent" json:"availableForPresent"`
  AvailableForMyself bool `thrift:"availableForMyself,54" db:"availableForMyself" json:"availableForMyself"`
  // unused fields # 55 to 60
  PriceTier int32 `thrift:"priceTier,61" db:"priceTier" json:"priceTier"`
  Price *PriceStruct `thrift:"price,62" db:"price" json:"price"`
  PriceInLineCoin string `thrift:"priceInLineCoin,63" db:"priceInLineCoin" json:"priceInLineCoin"`
  LocalizedPrice *PriceStruct `thrift:"localizedPrice,64" db:"localizedPrice" json:"localizedPrice"`
  // unused fields # 65 to 90
  Images map[string][]string `thrift:"images,91" db:"images" json:"images"`
  Attributes map[string]string `thrift:"attributes,92" db:"attributes" json:"attributes"`
  AuthorId string `thrift:"authorId,93" db:"authorId" json:"authorId"`
  StickerResourceType StickerResourceEnum `thrift:"stickerResourceType,94" db:"stickerResourceType" json:"stickerResourceType"`
  ProductProperty *PropertyStruct `thrift:"productProperty,95" db:"productProperty" json:"productProperty"`
  ProductSalesState SalesStateEnum `thrift:"productSalesState,96" db:"productSalesState" json:"productSalesState"`
  InstalledTime int64 `thrift:"installedTime,97" db:"installedTime" json:"installedTime"`
  // unused fields # 98 to 100
  WishProperty *WishPropertyStruct `thrift:"wishProperty,101" db:"wishProperty" json:"wishProperty"`
  SubscriptionProperty *SubscriptionPropertyStruct `thrift:"subscriptionProperty,102" db:"subscriptionProperty" json:"subscriptionProperty"`
}

func NewGetProductStruct() *GetProductStruct {
  return &GetProductStruct{}
}


func (p *GetProductStruct) GetID() string {
  return p.ID
}

func (p *GetProductStruct) GetBillingItemId() string {
  return p.BillingItemId
}

func (p *GetProductStruct) GetType() string {
  return p.Type
}

func (p *GetProductStruct) GetSubtype() SubTypeEnum {
  return p.Subtype
}

func (p *GetProductStruct) GetBillingCpId() string {
  return p.BillingCpId
}

func (p *GetProductStruct) GetName() string {
  return p.Name
}

func (p *GetProductStruct) GetAuthor() string {
  return p.Author
}

func (p *GetProductStruct) GetDetails() string {
  return p.Details
}

func (p *GetProductStruct) GetCopyright() string {
  return p.Copyright
}

func (p *GetProductStruct) GetNotice() string {
  return p.Notice
}
var GetProductStruct_PromotionInfo_DEFAULT *PromotionInfoStruct
func (p *GetProductStruct) GetPromotionInfo() *PromotionInfoStruct {
  if !p.IsSetPromotionInfo() {
    return GetProductStruct_PromotionInfo_DEFAULT
  }
return p.PromotionInfo
}

func (p *GetProductStruct) GetLatestVersion() int64 {
  return p.LatestVersion
}

func (p *GetProductStruct) GetLatestVersionString() string {
  return p.LatestVersionString
}

func (p *GetProductStruct) GetVersion() int64 {
  return p.Version
}

func (p *GetProductStruct) GetVersionString() string {
  return p.VersionString
}
var GetProductStruct_ApplicationVersionRange_DEFAULT *VersionRangeStruct
func (p *GetProductStruct) GetApplicationVersionRange() *VersionRangeStruct {
  if !p.IsSetApplicationVersionRange() {
    return GetProductStruct_ApplicationVersionRange_DEFAULT
  }
return p.ApplicationVersionRange
}

func (p *GetProductStruct) GetOwned() bool {
  return p.Owned
}

func (p *GetProductStruct) GetGrantedByDefault() bool {
  return p.GrantedByDefault
}

func (p *GetProductStruct) GetValidFor() int32 {
  return p.ValidFor
}

func (p *GetProductStruct) GetValidUntil() int64 {
  return p.ValidUntil
}

func (p *GetProductStruct) GetOnSale() bool {
  return p.OnSale
}

func (p *GetProductStruct) GetSalesFlags() []string {
  return p.SalesFlags
}

func (p *GetProductStruct) GetAvailableForPresent() bool {
  return p.AvailableForPresent
}

func (p *GetProductStruct) GetAvailableForMyself() bool {
  return p.AvailableForMyself
}

func (p *GetProductStruct) GetPriceTier() int32 {
  return p.PriceTier
}
var GetProductStruct_Price_DEFAULT *PriceStruct
func (p *GetProductStruct) GetPrice() *PriceStruct {
  if !p.IsSetPrice() {
    return GetProductStruct_Price_DEFAULT
  }
return p.Price
}

func (p *GetProductStruct) GetPriceInLineCoin() string {
  return p.PriceInLineCoin
}
var GetProductStruct_LocalizedPrice_DEFAULT *PriceStruct
func (p *GetProductStruct) GetLocalizedPrice() *PriceStruct {
  if !p.IsSetLocalizedPrice() {
    return GetProductStruct_LocalizedPrice_DEFAULT
  }
return p.LocalizedPrice
}

func (p *GetProductStruct) GetImages() map[string][]string {
  return p.Images
}

func (p *GetProductStruct) GetAttributes() map[string]string {
  return p.Attributes
}

func (p *GetProductStruct) GetAuthorId() string {
  return p.AuthorId
}

func (p *GetProductStruct) GetStickerResourceType() StickerResourceEnum {
  return p.StickerResourceType
}
var GetProductStruct_ProductProperty_DEFAULT *PropertyStruct
func (p *GetProductStruct) GetProductProperty() *PropertyStruct {
  if !p.IsSetProductProperty() {
    return GetProductStruct_ProductProperty_DEFAULT
  }
return p.ProductProperty
}

func (p *GetProductStruct) GetProductSalesState() SalesStateEnum {
  return p.ProductSalesState
}

func (p *GetProductStruct) GetInstalledTime() int64 {
  return p.InstalledTime
}
var GetProductStruct_WishProperty_DEFAULT *WishPropertyStruct
func (p *GetProductStruct) GetWishProperty() *WishPropertyStruct {
  if !p.IsSetWishProperty() {
    return GetProductStruct_WishProperty_DEFAULT
  }
return p.WishProperty
}
var GetProductStruct_SubscriptionProperty_DEFAULT *SubscriptionPropertyStruct
func (p *GetProductStruct) GetSubscriptionProperty() *SubscriptionPropertyStruct {
  if !p.IsSetSubscriptionProperty() {
    return GetProductStruct_SubscriptionProperty_DEFAULT
  }
return p.SubscriptionProperty
}
func (p *GetProductStruct) IsSetPromotionInfo() bool {
  return p.PromotionInfo != nil
}

func (p *GetProductStruct) IsSetApplicationVersionRange() bool {
  return p.ApplicationVersionRange != nil
}

func (p *GetProductStruct) IsSetPrice() bool {
  return p.Price != nil
}

func (p *GetProductStruct) IsSetLocalizedPrice() bool {
  return p.LocalizedPrice != nil
}

func (p *GetProductStruct) IsSetProductProperty() bool {
  return p.ProductProperty != nil
}

func (p *GetProductStruct) IsSetWishProperty() bool {
  return p.WishProperty != nil
}

func (p *GetProductStruct) IsSetSubscriptionProperty() bool {
  return p.SubscriptionProperty != nil
}

func (p *GetProductStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField32(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField41(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField42(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 51:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField51(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 52:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField52(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 53:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField53(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 54:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField54(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 61:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField61(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 62:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField62(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 63:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField63(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 64:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField64(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 91:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField91(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 92:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField92(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 93:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField93(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 94:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField94(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 95:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField95(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 96:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField96(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 97:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField97(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 101:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField101(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 102:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField102(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetProductStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *GetProductStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BillingItemId = v
}
  return nil
}

func (p *GetProductStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *GetProductStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := SubTypeEnum(v)
  p.Subtype = temp
}
  return nil
}

func (p *GetProductStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BillingCpId = v
}
  return nil
}

func (p *GetProductStruct)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *GetProductStruct)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Author = v
}
  return nil
}

func (p *GetProductStruct)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Details = v
}
  return nil
}

func (p *GetProductStruct)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Copyright = v
}
  return nil
}

func (p *GetProductStruct)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Notice = v
}
  return nil
}

func (p *GetProductStruct)  ReadField16(iprot thrift.TProtocol) error {
  p.PromotionInfo = &PromotionInfoStruct{}
  if err := p.PromotionInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PromotionInfo), err)
  }
  return nil
}

func (p *GetProductStruct)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.LatestVersion = v
}
  return nil
}

func (p *GetProductStruct)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.LatestVersionString = v
}
  return nil
}

func (p *GetProductStruct)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *GetProductStruct)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.VersionString = v
}
  return nil
}

func (p *GetProductStruct)  ReadField25(iprot thrift.TProtocol) error {
  p.ApplicationVersionRange = &VersionRangeStruct{}
  if err := p.ApplicationVersionRange.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ApplicationVersionRange), err)
  }
  return nil
}

func (p *GetProductStruct)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.Owned = v
}
  return nil
}

func (p *GetProductStruct)  ReadField32(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.GrantedByDefault = v
}
  return nil
}

func (p *GetProductStruct)  ReadField41(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.ValidFor = v
}
  return nil
}

func (p *GetProductStruct)  ReadField42(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 42: ", err)
} else {
  p.ValidUntil = v
}
  return nil
}

func (p *GetProductStruct)  ReadField51(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 51: ", err)
} else {
  p.OnSale = v
}
  return nil
}

func (p *GetProductStruct)  ReadField52(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.SalesFlags =  tSet
  for i := 0; i < size; i ++ {
var _elem21 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem21 = v
}
    p.SalesFlags = append(p.SalesFlags, _elem21)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *GetProductStruct)  ReadField53(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 53: ", err)
} else {
  p.AvailableForPresent = v
}
  return nil
}

func (p *GetProductStruct)  ReadField54(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 54: ", err)
} else {
  p.AvailableForMyself = v
}
  return nil
}

func (p *GetProductStruct)  ReadField61(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 61: ", err)
} else {
  p.PriceTier = v
}
  return nil
}

func (p *GetProductStruct)  ReadField62(iprot thrift.TProtocol) error {
  p.Price = &PriceStruct{}
  if err := p.Price.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Price), err)
  }
  return nil
}

func (p *GetProductStruct)  ReadField63(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 63: ", err)
} else {
  p.PriceInLineCoin = v
}
  return nil
}

func (p *GetProductStruct)  ReadField64(iprot thrift.TProtocol) error {
  p.LocalizedPrice = &PriceStruct{}
  if err := p.LocalizedPrice.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LocalizedPrice), err)
  }
  return nil
}

func (p *GetProductStruct)  ReadField91(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]string, size)
  p.Images =  tMap
  for i := 0; i < size; i ++ {
var _key22 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key22 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]string, 0, size)
    _val23 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem24 string
      if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem24 = v
}
      _val23 = append(_val23, _elem24)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Images[_key22] = _val23
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetProductStruct)  ReadField92(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Attributes =  tMap
  for i := 0; i < size; i ++ {
var _key25 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key25 = v
}
var _val26 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val26 = v
}
    p.Attributes[_key25] = _val26
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GetProductStruct)  ReadField93(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 93: ", err)
} else {
  p.AuthorId = v
}
  return nil
}

func (p *GetProductStruct)  ReadField94(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 94: ", err)
} else {
  temp := StickerResourceEnum(v)
  p.StickerResourceType = temp
}
  return nil
}

func (p *GetProductStruct)  ReadField95(iprot thrift.TProtocol) error {
  p.ProductProperty = &PropertyStruct{}
  if err := p.ProductProperty.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ProductProperty), err)
  }
  return nil
}

func (p *GetProductStruct)  ReadField96(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 96: ", err)
} else {
  temp := SalesStateEnum(v)
  p.ProductSalesState = temp
}
  return nil
}

func (p *GetProductStruct)  ReadField97(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 97: ", err)
} else {
  p.InstalledTime = v
}
  return nil
}

func (p *GetProductStruct)  ReadField101(iprot thrift.TProtocol) error {
  p.WishProperty = &WishPropertyStruct{}
  if err := p.WishProperty.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WishProperty), err)
  }
  return nil
}

func (p *GetProductStruct)  ReadField102(iprot thrift.TProtocol) error {
  p.SubscriptionProperty = &SubscriptionPropertyStruct{}
  if err := p.SubscriptionProperty.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SubscriptionProperty), err)
  }
  return nil
}

func (p *GetProductStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetProductStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
    if err := p.writeField32(oprot); err != nil { return err }
    if err := p.writeField41(oprot); err != nil { return err }
    if err := p.writeField42(oprot); err != nil { return err }
    if err := p.writeField51(oprot); err != nil { return err }
    if err := p.writeField52(oprot); err != nil { return err }
    if err := p.writeField53(oprot); err != nil { return err }
    if err := p.writeField54(oprot); err != nil { return err }
    if err := p.writeField61(oprot); err != nil { return err }
    if err := p.writeField62(oprot); err != nil { return err }
    if err := p.writeField63(oprot); err != nil { return err }
    if err := p.writeField64(oprot); err != nil { return err }
    if err := p.writeField91(oprot); err != nil { return err }
    if err := p.writeField92(oprot); err != nil { return err }
    if err := p.writeField93(oprot); err != nil { return err }
    if err := p.writeField94(oprot); err != nil { return err }
    if err := p.writeField95(oprot); err != nil { return err }
    if err := p.writeField96(oprot); err != nil { return err }
    if err := p.writeField97(oprot); err != nil { return err }
    if err := p.writeField101(oprot); err != nil { return err }
    if err := p.writeField102(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetProductStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("billingItemId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:billingItemId: ", p), err) }
  if err := oprot.WriteString(string(p.BillingItemId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.billingItemId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:billingItemId: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("subtype", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:subtype: ", p), err) }
  if err := oprot.WriteI32(int32(p.Subtype)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.subtype (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:subtype: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("billingCpId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:billingCpId: ", p), err) }
  if err := oprot.WriteString(string(p.BillingCpId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.billingCpId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:billingCpId: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:name: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("author", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:author: ", p), err) }
  if err := oprot.WriteString(string(p.Author)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.author (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:author: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("details", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:details: ", p), err) }
  if err := oprot.WriteString(string(p.Details)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.details (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:details: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("copyright", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:copyright: ", p), err) }
  if err := oprot.WriteString(string(p.Copyright)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.copyright (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:copyright: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notice", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:notice: ", p), err) }
  if err := oprot.WriteString(string(p.Notice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notice (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:notice: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("promotionInfo", thrift.STRUCT, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:promotionInfo: ", p), err) }
  if err := p.PromotionInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PromotionInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:promotionInfo: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("latestVersion", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:latestVersion: ", p), err) }
  if err := oprot.WriteI64(int64(p.LatestVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latestVersion (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:latestVersion: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("latestVersionString", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:latestVersionString: ", p), err) }
  if err := oprot.WriteString(string(p.LatestVersionString)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latestVersionString (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:latestVersionString: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:version: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("versionString", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:versionString: ", p), err) }
  if err := oprot.WriteString(string(p.VersionString)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.versionString (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:versionString: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("applicationVersionRange", thrift.STRUCT, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:applicationVersionRange: ", p), err) }
  if err := p.ApplicationVersionRange.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ApplicationVersionRange), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:applicationVersionRange: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField31(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("owned", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:owned: ", p), err) }
  if err := oprot.WriteBool(bool(p.Owned)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.owned (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:owned: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField32(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("grantedByDefault", thrift.BOOL, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:grantedByDefault: ", p), err) }
  if err := oprot.WriteBool(bool(p.GrantedByDefault)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.grantedByDefault (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:grantedByDefault: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField41(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("validFor", thrift.I32, 41); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:validFor: ", p), err) }
  if err := oprot.WriteI32(int32(p.ValidFor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.validFor (41) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 41:validFor: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField42(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("validUntil", thrift.I64, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:validUntil: ", p), err) }
  if err := oprot.WriteI64(int64(p.ValidUntil)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.validUntil (42) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:validUntil: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField51(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("onSale", thrift.BOOL, 51); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 51:onSale: ", p), err) }
  if err := oprot.WriteBool(bool(p.OnSale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.onSale (51) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 51:onSale: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField52(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("salesFlags", thrift.SET, 52); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 52:salesFlags: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.SalesFlags)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.SalesFlags); i++ {
    for j := i+1; j<len(p.SalesFlags); j++ {
      if reflect.DeepEqual(p.SalesFlags[i],p.SalesFlags[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.SalesFlags[i]))
      }
    }
  }
  for _, v := range p.SalesFlags {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 52:salesFlags: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField53(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("availableForPresent", thrift.BOOL, 53); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 53:availableForPresent: ", p), err) }
  if err := oprot.WriteBool(bool(p.AvailableForPresent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.availableForPresent (53) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 53:availableForPresent: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField54(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("availableForMyself", thrift.BOOL, 54); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 54:availableForMyself: ", p), err) }
  if err := oprot.WriteBool(bool(p.AvailableForMyself)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.availableForMyself (54) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 54:availableForMyself: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField61(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("priceTier", thrift.I32, 61); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 61:priceTier: ", p), err) }
  if err := oprot.WriteI32(int32(p.PriceTier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priceTier (61) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 61:priceTier: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField62(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("price", thrift.STRUCT, 62); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 62:price: ", p), err) }
  if err := p.Price.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Price), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 62:price: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField63(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("priceInLineCoin", thrift.STRING, 63); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 63:priceInLineCoin: ", p), err) }
  if err := oprot.WriteString(string(p.PriceInLineCoin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priceInLineCoin (63) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 63:priceInLineCoin: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField64(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("localizedPrice", thrift.STRUCT, 64); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 64:localizedPrice: ", p), err) }
  if err := p.LocalizedPrice.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LocalizedPrice), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 64:localizedPrice: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField91(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("images", thrift.MAP, 91); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 91:images: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Images)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Images {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 91:images: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField92(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 92); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 92:attributes: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Attributes {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 92:attributes: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField93(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authorId", thrift.STRING, 93); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 93:authorId: ", p), err) }
  if err := oprot.WriteString(string(p.AuthorId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authorId (93) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 93:authorId: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField94(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stickerResourceType", thrift.I32, 94); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 94:stickerResourceType: ", p), err) }
  if err := oprot.WriteI32(int32(p.StickerResourceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stickerResourceType (94) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 94:stickerResourceType: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField95(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productProperty", thrift.STRUCT, 95); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 95:productProperty: ", p), err) }
  if err := p.ProductProperty.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ProductProperty), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 95:productProperty: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField96(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productSalesState", thrift.I32, 96); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 96:productSalesState: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProductSalesState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productSalesState (96) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 96:productSalesState: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField97(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("installedTime", thrift.I64, 97); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 97:installedTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.InstalledTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.installedTime (97) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 97:installedTime: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField101(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("wishProperty", thrift.STRUCT, 101); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 101:wishProperty: ", p), err) }
  if err := p.WishProperty.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WishProperty), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 101:wishProperty: ", p), err) }
  return err
}

func (p *GetProductStruct) writeField102(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("subscriptionProperty", thrift.STRUCT, 102); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 102:subscriptionProperty: ", p), err) }
  if err := p.SubscriptionProperty.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SubscriptionProperty), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 102:subscriptionProperty: ", p), err) }
  return err
}

func (p *GetProductStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductStruct(%+v)", *p)
}

// Attributes:
//  - ProductDetail
type GetProductStructV2 struct {
  ProductDetail *GetProductStruct `thrift:"productDetail,1" db:"productDetail" json:"productDetail"`
}

func NewGetProductStructV2() *GetProductStructV2 {
  return &GetProductStructV2{}
}

var GetProductStructV2_ProductDetail_DEFAULT *GetProductStruct
func (p *GetProductStructV2) GetProductDetail() *GetProductStruct {
  if !p.IsSetProductDetail() {
    return GetProductStructV2_ProductDetail_DEFAULT
  }
return p.ProductDetail
}
func (p *GetProductStructV2) IsSetProductDetail() bool {
  return p.ProductDetail != nil
}

func (p *GetProductStructV2) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetProductStructV2)  ReadField1(iprot thrift.TProtocol) error {
  p.ProductDetail = &GetProductStruct{}
  if err := p.ProductDetail.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ProductDetail), err)
  }
  return nil
}

func (p *GetProductStructV2) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetProductStructV2"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetProductStructV2) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productDetail", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:productDetail: ", p), err) }
  if err := p.ProductDetail.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ProductDetail), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:productDetail: ", p), err) }
  return err
}

func (p *GetProductStructV2) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductStructV2(%+v)", *p)
}

// Attributes:
//  - ProductType
//  - ProductId
//  - CarrierCode
//  - SaveBrowsingHistory
type GetProductRequestStruct struct {
  ProductType ProductTypeEnum `thrift:"productType,1" db:"productType" json:"productType"`
  ProductId string `thrift:"productId,2" db:"productId" json:"productId"`
  CarrierCode string `thrift:"carrierCode,3" db:"carrierCode" json:"carrierCode"`
  SaveBrowsingHistory bool `thrift:"saveBrowsingHistory,4" db:"saveBrowsingHistory" json:"saveBrowsingHistory"`
}

func NewGetProductRequestStruct() *GetProductRequestStruct {
  return &GetProductRequestStruct{}
}


func (p *GetProductRequestStruct) GetProductType() ProductTypeEnum {
  return p.ProductType
}

func (p *GetProductRequestStruct) GetProductId() string {
  return p.ProductId
}

func (p *GetProductRequestStruct) GetCarrierCode() string {
  return p.CarrierCode
}

func (p *GetProductRequestStruct) GetSaveBrowsingHistory() bool {
  return p.SaveBrowsingHistory
}
func (p *GetProductRequestStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetProductRequestStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ProductTypeEnum(v)
  p.ProductType = temp
}
  return nil
}

func (p *GetProductRequestStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProductId = v
}
  return nil
}

func (p *GetProductRequestStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CarrierCode = v
}
  return nil
}

func (p *GetProductRequestStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SaveBrowsingHistory = v
}
  return nil
}

func (p *GetProductRequestStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetProductRequestStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetProductRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:productType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProductType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:productType: ", p), err) }
  return err
}

func (p *GetProductRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:productId: ", p), err) }
  if err := oprot.WriteString(string(p.ProductId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:productId: ", p), err) }
  return err
}

func (p *GetProductRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrierCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrierCode: ", p), err) }
  if err := oprot.WriteString(string(p.CarrierCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrierCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrierCode: ", p), err) }
  return err
}

func (p *GetProductRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("saveBrowsingHistory", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:saveBrowsingHistory: ", p), err) }
  if err := oprot.WriteBool(bool(p.SaveBrowsingHistory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.saveBrowsingHistory (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:saveBrowsingHistory: ", p), err) }
  return err
}

func (p *GetProductRequestStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductRequestStruct(%+v)", *p)
}

// Attributes:
//  - Language
//  - Country
type LocaleStruct struct {
  Language string `thrift:"language,1" db:"language" json:"language"`
  Country string `thrift:"country,2" db:"country" json:"country"`
}

func NewLocaleStruct() *LocaleStruct {
  return &LocaleStruct{}
}


func (p *LocaleStruct) GetLanguage() string {
  return p.Language
}

func (p *LocaleStruct) GetCountry() string {
  return p.Country
}
func (p *LocaleStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LocaleStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Language = v
}
  return nil
}

func (p *LocaleStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Country = v
}
  return nil
}

func (p *LocaleStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LocaleStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LocaleStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("language", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:language: ", p), err) }
  if err := oprot.WriteString(string(p.Language)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:language: ", p), err) }
  return err
}

func (p *LocaleStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("country", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:country: ", p), err) }
  if err := oprot.WriteString(string(p.Country)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.country (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:country: ", p), err) }
  return err
}

func (p *LocaleStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LocaleStruct(%+v)", *p)
}

// Attributes:
//  - ShopId
//  - ProductId
//  - RecipientMid
//  - Price
//  - EnableLinePointAutoExchange
//  - Locale
//  - PresentAttributes
type PurchaseOrderStruct struct {
  ShopId string `thrift:"shopId,1" db:"shopId" json:"shopId"`
  ProductId string `thrift:"productId,2" db:"productId" json:"productId"`
  // unused fields # 3 to 4
  RecipientMid string `thrift:"recipientMid,5" db:"recipientMid" json:"recipientMid"`
  // unused fields # 6 to 10
  Price *PriceStruct `thrift:"price,11" db:"price" json:"price"`
  EnableLinePointAutoExchange bool `thrift:"enableLinePointAutoExchange,12" db:"enableLinePointAutoExchange" json:"enableLinePointAutoExchange"`
  // unused fields # 13 to 20
  Locale *LocaleStruct `thrift:"locale,21" db:"locale" json:"locale"`
  // unused fields # 22 to 30
  PresentAttributes map[string]string `thrift:"presentAttributes,31" db:"presentAttributes" json:"presentAttributes"`
}

func NewPurchaseOrderStruct() *PurchaseOrderStruct {
  return &PurchaseOrderStruct{}
}


func (p *PurchaseOrderStruct) GetShopId() string {
  return p.ShopId
}

func (p *PurchaseOrderStruct) GetProductId() string {
  return p.ProductId
}

func (p *PurchaseOrderStruct) GetRecipientMid() string {
  return p.RecipientMid
}
var PurchaseOrderStruct_Price_DEFAULT *PriceStruct
func (p *PurchaseOrderStruct) GetPrice() *PriceStruct {
  if !p.IsSetPrice() {
    return PurchaseOrderStruct_Price_DEFAULT
  }
return p.Price
}

func (p *PurchaseOrderStruct) GetEnableLinePointAutoExchange() bool {
  return p.EnableLinePointAutoExchange
}
var PurchaseOrderStruct_Locale_DEFAULT *LocaleStruct
func (p *PurchaseOrderStruct) GetLocale() *LocaleStruct {
  if !p.IsSetLocale() {
    return PurchaseOrderStruct_Locale_DEFAULT
  }
return p.Locale
}

func (p *PurchaseOrderStruct) GetPresentAttributes() map[string]string {
  return p.PresentAttributes
}
func (p *PurchaseOrderStruct) IsSetPrice() bool {
  return p.Price != nil
}

func (p *PurchaseOrderStruct) IsSetLocale() bool {
  return p.Locale != nil
}

func (p *PurchaseOrderStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PurchaseOrderStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ShopId = v
}
  return nil
}

func (p *PurchaseOrderStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProductId = v
}
  return nil
}

func (p *PurchaseOrderStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RecipientMid = v
}
  return nil
}

func (p *PurchaseOrderStruct)  ReadField11(iprot thrift.TProtocol) error {
  p.Price = &PriceStruct{}
  if err := p.Price.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Price), err)
  }
  return nil
}

func (p *PurchaseOrderStruct)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.EnableLinePointAutoExchange = v
}
  return nil
}

func (p *PurchaseOrderStruct)  ReadField21(iprot thrift.TProtocol) error {
  p.Locale = &LocaleStruct{}
  if err := p.Locale.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Locale), err)
  }
  return nil
}

func (p *PurchaseOrderStruct)  ReadField31(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.PresentAttributes =  tMap
  for i := 0; i < size; i ++ {
var _key27 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key27 = v
}
var _val28 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val28 = v
}
    p.PresentAttributes[_key27] = _val28
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PurchaseOrderStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PurchaseOrderStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PurchaseOrderStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("shopId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:shopId: ", p), err) }
  if err := oprot.WriteString(string(p.ShopId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.shopId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:shopId: ", p), err) }
  return err
}

func (p *PurchaseOrderStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:productId: ", p), err) }
  if err := oprot.WriteString(string(p.ProductId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:productId: ", p), err) }
  return err
}

func (p *PurchaseOrderStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recipientMid", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:recipientMid: ", p), err) }
  if err := oprot.WriteString(string(p.RecipientMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recipientMid (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:recipientMid: ", p), err) }
  return err
}

func (p *PurchaseOrderStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("price", thrift.STRUCT, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:price: ", p), err) }
  if err := p.Price.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Price), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:price: ", p), err) }
  return err
}

func (p *PurchaseOrderStruct) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("enableLinePointAutoExchange", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:enableLinePointAutoExchange: ", p), err) }
  if err := oprot.WriteBool(bool(p.EnableLinePointAutoExchange)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enableLinePointAutoExchange (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:enableLinePointAutoExchange: ", p), err) }
  return err
}

func (p *PurchaseOrderStruct) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("locale", thrift.STRUCT, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:locale: ", p), err) }
  if err := p.Locale.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Locale), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:locale: ", p), err) }
  return err
}

func (p *PurchaseOrderStruct) writeField31(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("presentAttributes", thrift.MAP, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:presentAttributes: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.PresentAttributes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.PresentAttributes {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:presentAttributes: ", p), err) }
  return err
}

func (p *PurchaseOrderStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PurchaseOrderStruct(%+v)", *p)
}

// Attributes:
//  - Qrcode
//  - Verifier
//  - CallbackUrl
type AuthQrcodeStruct struct {
  Qrcode string `thrift:"qrcode,1" db:"qrcode" json:"qrcode"`
  Verifier string `thrift:"verifier,2" db:"verifier" json:"verifier"`
  CallbackUrl string `thrift:"callbackUrl,3" db:"callbackUrl" json:"callbackUrl"`
}

func NewAuthQrcodeStruct() *AuthQrcodeStruct {
  return &AuthQrcodeStruct{}
}


func (p *AuthQrcodeStruct) GetQrcode() string {
  return p.Qrcode
}

func (p *AuthQrcodeStruct) GetVerifier() string {
  return p.Verifier
}

func (p *AuthQrcodeStruct) GetCallbackUrl() string {
  return p.CallbackUrl
}
func (p *AuthQrcodeStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthQrcodeStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Qrcode = v
}
  return nil
}

func (p *AuthQrcodeStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *AuthQrcodeStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CallbackUrl = v
}
  return nil
}

func (p *AuthQrcodeStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AuthQrcodeStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthQrcodeStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("qrcode", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:qrcode: ", p), err) }
  if err := oprot.WriteString(string(p.Qrcode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.qrcode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:qrcode: ", p), err) }
  return err
}

func (p *AuthQrcodeStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:verifier: ", p), err) }
  if err := oprot.WriteString(string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:verifier: ", p), err) }
  return err
}

func (p *AuthQrcodeStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("callbackUrl", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:callbackUrl: ", p), err) }
  if err := oprot.WriteString(string(p.CallbackUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callbackUrl (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:callbackUrl: ", p), err) }
  return err
}

func (p *AuthQrcodeStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthQrcodeStruct(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Method
//  - Callback
//  - NormalizedPhone
//  - CountryCode
//  - NationalSignificantNumber
//  - AvailableVerificationMethods
type SessionDataStruct struct {
  SessionId string `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  Method MethodEnum `thrift:"method,2" db:"method" json:"method"`
  Callback string `thrift:"callback,3" db:"callback" json:"callback"`
  NormalizedPhone string `thrift:"normalizedPhone,4" db:"normalizedPhone" json:"normalizedPhone"`
  CountryCode string `thrift:"countryCode,5" db:"countryCode" json:"countryCode"`
  NationalSignificantNumber string `thrift:"nationalSignificantNumber,6" db:"nationalSignificantNumber" json:"nationalSignificantNumber"`
  AvailableVerificationMethods []MethodEnum `thrift:"availableVerificationMethods,7" db:"availableVerificationMethods" json:"availableVerificationMethods"`
}

func NewSessionDataStruct() *SessionDataStruct {
  return &SessionDataStruct{}
}


func (p *SessionDataStruct) GetSessionId() string {
  return p.SessionId
}

func (p *SessionDataStruct) GetMethod() MethodEnum {
  return p.Method
}

func (p *SessionDataStruct) GetCallback() string {
  return p.Callback
}

func (p *SessionDataStruct) GetNormalizedPhone() string {
  return p.NormalizedPhone
}

func (p *SessionDataStruct) GetCountryCode() string {
  return p.CountryCode
}

func (p *SessionDataStruct) GetNationalSignificantNumber() string {
  return p.NationalSignificantNumber
}

func (p *SessionDataStruct) GetAvailableVerificationMethods() []MethodEnum {
  return p.AvailableVerificationMethods
}
func (p *SessionDataStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SessionDataStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *SessionDataStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := MethodEnum(v)
  p.Method = temp
}
  return nil
}

func (p *SessionDataStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Callback = v
}
  return nil
}

func (p *SessionDataStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NormalizedPhone = v
}
  return nil
}

func (p *SessionDataStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *SessionDataStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NationalSignificantNumber = v
}
  return nil
}

func (p *SessionDataStruct)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]MethodEnum, 0, size)
  p.AvailableVerificationMethods =  tSlice
  for i := 0; i < size; i ++ {
var _elem29 MethodEnum
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := MethodEnum(v)
    _elem29 = temp
}
    p.AvailableVerificationMethods = append(p.AvailableVerificationMethods, _elem29)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SessionDataStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SessionDataStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SessionDataStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *SessionDataStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("method", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:method: ", p), err) }
  if err := oprot.WriteI32(int32(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:method: ", p), err) }
  return err
}

func (p *SessionDataStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("callback", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:callback: ", p), err) }
  if err := oprot.WriteString(string(p.Callback)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callback (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:callback: ", p), err) }
  return err
}

func (p *SessionDataStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("normalizedPhone", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:normalizedPhone: ", p), err) }
  if err := oprot.WriteString(string(p.NormalizedPhone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.normalizedPhone (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:normalizedPhone: ", p), err) }
  return err
}

func (p *SessionDataStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("countryCode", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:countryCode: ", p), err) }
  if err := oprot.WriteString(string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryCode (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:countryCode: ", p), err) }
  return err
}

func (p *SessionDataStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nationalSignificantNumber", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nationalSignificantNumber: ", p), err) }
  if err := oprot.WriteString(string(p.NationalSignificantNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nationalSignificantNumber (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nationalSignificantNumber: ", p), err) }
  return err
}

func (p *SessionDataStruct) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("availableVerificationMethods", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:availableVerificationMethods: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.AvailableVerificationMethods)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AvailableVerificationMethods {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:availableVerificationMethods: ", p), err) }
  return err
}

func (p *SessionDataStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SessionDataStruct(%+v)", *p)
}

// Attributes:
//  - Type
//  - IdentityProvider
//  - Identifier
//  - Password
//  - KeepLoggedIn
//  - AccessLocation
//  - SystemName
//  - Certificate
//  - Verifier
//  - Secret
//  - E2eeVersion
type LoginRequestStruct struct {
  Type int32 `thrift:"type,1" db:"type" json:"type"`
  IdentityProvider int32 `thrift:"identityProvider,2" db:"identityProvider" json:"identityProvider"`
  Identifier string `thrift:"identifier,3" db:"identifier" json:"identifier"`
  Password string `thrift:"password,4" db:"password" json:"password"`
  KeepLoggedIn bool `thrift:"keepLoggedIn,5" db:"keepLoggedIn" json:"keepLoggedIn"`
  AccessLocation string `thrift:"accessLocation,6" db:"accessLocation" json:"accessLocation"`
  SystemName string `thrift:"systemName,7" db:"systemName" json:"systemName"`
  Certificate string `thrift:"certificate,8" db:"certificate" json:"certificate"`
  Verifier string `thrift:"verifier,9" db:"verifier" json:"verifier"`
  Secret string `thrift:"secret,10" db:"secret" json:"secret"`
  E2eeVersion int32 `thrift:"e2eeVersion,11" db:"e2eeVersion" json:"e2eeVersion"`
}

func NewLoginRequestStruct() *LoginRequestStruct {
  return &LoginRequestStruct{}
}


func (p *LoginRequestStruct) GetType() int32 {
  return p.Type
}

func (p *LoginRequestStruct) GetIdentityProvider() int32 {
  return p.IdentityProvider
}

func (p *LoginRequestStruct) GetIdentifier() string {
  return p.Identifier
}

func (p *LoginRequestStruct) GetPassword() string {
  return p.Password
}

func (p *LoginRequestStruct) GetKeepLoggedIn() bool {
  return p.KeepLoggedIn
}

func (p *LoginRequestStruct) GetAccessLocation() string {
  return p.AccessLocation
}

func (p *LoginRequestStruct) GetSystemName() string {
  return p.SystemName
}

func (p *LoginRequestStruct) GetCertificate() string {
  return p.Certificate
}

func (p *LoginRequestStruct) GetVerifier() string {
  return p.Verifier
}

func (p *LoginRequestStruct) GetSecret() string {
  return p.Secret
}

func (p *LoginRequestStruct) GetE2eeVersion() int32 {
  return p.E2eeVersion
}
func (p *LoginRequestStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginRequestStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *LoginRequestStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IdentityProvider = v
}
  return nil
}

func (p *LoginRequestStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *LoginRequestStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *LoginRequestStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.KeepLoggedIn = v
}
  return nil
}

func (p *LoginRequestStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AccessLocation = v
}
  return nil
}

func (p *LoginRequestStruct)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SystemName = v
}
  return nil
}

func (p *LoginRequestStruct)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Certificate = v
}
  return nil
}

func (p *LoginRequestStruct)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *LoginRequestStruct)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Secret = v
}
  return nil
}

func (p *LoginRequestStruct)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.E2eeVersion = v
}
  return nil
}

func (p *LoginRequestStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LoginRequestStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *LoginRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identityProvider", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identityProvider: ", p), err) }
  if err := oprot.WriteI32(int32(p.IdentityProvider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityProvider (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identityProvider: ", p), err) }
  return err
}

func (p *LoginRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:identifier: ", p), err) }
  if err := oprot.WriteString(string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:identifier: ", p), err) }
  return err
}

func (p *LoginRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:password: ", p), err) }
  return err
}

func (p *LoginRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keepLoggedIn", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:keepLoggedIn: ", p), err) }
  if err := oprot.WriteBool(bool(p.KeepLoggedIn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keepLoggedIn (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:keepLoggedIn: ", p), err) }
  return err
}

func (p *LoginRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accessLocation", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:accessLocation: ", p), err) }
  if err := oprot.WriteString(string(p.AccessLocation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accessLocation (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:accessLocation: ", p), err) }
  return err
}

func (p *LoginRequestStruct) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("systemName", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:systemName: ", p), err) }
  if err := oprot.WriteString(string(p.SystemName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemName (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:systemName: ", p), err) }
  return err
}

func (p *LoginRequestStruct) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("certificate", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:certificate: ", p), err) }
  if err := oprot.WriteString(string(p.Certificate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.certificate (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:certificate: ", p), err) }
  return err
}

func (p *LoginRequestStruct) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:verifier: ", p), err) }
  if err := oprot.WriteString(string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:verifier: ", p), err) }
  return err
}

func (p *LoginRequestStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("secret", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:secret: ", p), err) }
  if err := oprot.WriteString(string(p.Secret)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.secret (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:secret: ", p), err) }
  return err
}

func (p *LoginRequestStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("e2eeVersion", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:e2eeVersion: ", p), err) }
  if err := oprot.WriteI32(int32(p.E2eeVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.e2eeVersion (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:e2eeVersion: ", p), err) }
  return err
}

func (p *LoginRequestStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginRequestStruct(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - Certificate
//  - Verifier
//  - PinCode
//  - Type
//  - LastPrimaryBindTime
//  - DisplayMessage
//  - SessionForSMSConfirm
type LoginResultStruct struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
  Certificate string `thrift:"certificate,2" db:"certificate" json:"certificate"`
  Verifier string `thrift:"verifier,3" db:"verifier" json:"verifier"`
  PinCode string `thrift:"pinCode,4" db:"pinCode" json:"pinCode"`
  Type ResultTypeEnum `thrift:"type,5" db:"type" json:"type"`
  LastPrimaryBindTime int64 `thrift:"lastPrimaryBindTime,6" db:"lastPrimaryBindTime" json:"lastPrimaryBindTime"`
  DisplayMessage string `thrift:"displayMessage,7" db:"displayMessage" json:"displayMessage"`
  SessionForSMSConfirm *SessionDataStruct `thrift:"sessionForSMSConfirm,8" db:"sessionForSMSConfirm" json:"sessionForSMSConfirm"`
}

func NewLoginResultStruct() *LoginResultStruct {
  return &LoginResultStruct{}
}


func (p *LoginResultStruct) GetAuthToken() string {
  return p.AuthToken
}

func (p *LoginResultStruct) GetCertificate() string {
  return p.Certificate
}

func (p *LoginResultStruct) GetVerifier() string {
  return p.Verifier
}

func (p *LoginResultStruct) GetPinCode() string {
  return p.PinCode
}

func (p *LoginResultStruct) GetType() ResultTypeEnum {
  return p.Type
}

func (p *LoginResultStruct) GetLastPrimaryBindTime() int64 {
  return p.LastPrimaryBindTime
}

func (p *LoginResultStruct) GetDisplayMessage() string {
  return p.DisplayMessage
}
var LoginResultStruct_SessionForSMSConfirm_DEFAULT *SessionDataStruct
func (p *LoginResultStruct) GetSessionForSMSConfirm() *SessionDataStruct {
  if !p.IsSetSessionForSMSConfirm() {
    return LoginResultStruct_SessionForSMSConfirm_DEFAULT
  }
return p.SessionForSMSConfirm
}
func (p *LoginResultStruct) IsSetSessionForSMSConfirm() bool {
  return p.SessionForSMSConfirm != nil
}

func (p *LoginResultStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginResultStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *LoginResultStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Certificate = v
}
  return nil
}

func (p *LoginResultStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *LoginResultStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *LoginResultStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := ResultTypeEnum(v)
  p.Type = temp
}
  return nil
}

func (p *LoginResultStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LastPrimaryBindTime = v
}
  return nil
}

func (p *LoginResultStruct)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DisplayMessage = v
}
  return nil
}

func (p *LoginResultStruct)  ReadField8(iprot thrift.TProtocol) error {
  p.SessionForSMSConfirm = &SessionDataStruct{}
  if err := p.SessionForSMSConfirm.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionForSMSConfirm), err)
  }
  return nil
}

func (p *LoginResultStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LoginResultStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginResultStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *LoginResultStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("certificate", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:certificate: ", p), err) }
  if err := oprot.WriteString(string(p.Certificate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.certificate (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:certificate: ", p), err) }
  return err
}

func (p *LoginResultStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:verifier: ", p), err) }
  if err := oprot.WriteString(string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:verifier: ", p), err) }
  return err
}

func (p *LoginResultStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pinCode", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pinCode: ", p), err) }
  if err := oprot.WriteString(string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pinCode: ", p), err) }
  return err
}

func (p *LoginResultStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:type: ", p), err) }
  return err
}

func (p *LoginResultStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastPrimaryBindTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastPrimaryBindTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastPrimaryBindTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastPrimaryBindTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastPrimaryBindTime: ", p), err) }
  return err
}

func (p *LoginResultStruct) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayMessage", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:displayMessage: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayMessage (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:displayMessage: ", p), err) }
  return err
}

func (p *LoginResultStruct) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionForSMSConfirm", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sessionForSMSConfirm: ", p), err) }
  if err := p.SessionForSMSConfirm.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionForSMSConfirm), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sessionForSMSConfirm: ", p), err) }
  return err
}

func (p *LoginResultStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginResultStruct(%+v)", *p)
}

// Attributes:
//  - OrderId
//  - Attributes
//  - BillingConfirmUrl
type PurchaseOrderResponseStruct struct {
  OrderId string `thrift:"orderId,1" db:"orderId" json:"orderId"`
  // unused fields # 2 to 10
  Attributes map[string]string `thrift:"attributes,11" db:"attributes" json:"attributes"`
  BillingConfirmUrl string `thrift:"billingConfirmUrl,12" db:"billingConfirmUrl" json:"billingConfirmUrl"`
}

func NewPurchaseOrderResponseStruct() *PurchaseOrderResponseStruct {
  return &PurchaseOrderResponseStruct{}
}


func (p *PurchaseOrderResponseStruct) GetOrderId() string {
  return p.OrderId
}

func (p *PurchaseOrderResponseStruct) GetAttributes() map[string]string {
  return p.Attributes
}

func (p *PurchaseOrderResponseStruct) GetBillingConfirmUrl() string {
  return p.BillingConfirmUrl
}
func (p *PurchaseOrderResponseStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PurchaseOrderResponseStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OrderId = v
}
  return nil
}

func (p *PurchaseOrderResponseStruct)  ReadField11(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Attributes =  tMap
  for i := 0; i < size; i ++ {
var _key30 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key30 = v
}
var _val31 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val31 = v
}
    p.Attributes[_key30] = _val31
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PurchaseOrderResponseStruct)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.BillingConfirmUrl = v
}
  return nil
}

func (p *PurchaseOrderResponseStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PurchaseOrderResponseStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PurchaseOrderResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("orderId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:orderId: ", p), err) }
  if err := oprot.WriteString(string(p.OrderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:orderId: ", p), err) }
  return err
}

func (p *PurchaseOrderResponseStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attributes", thrift.MAP, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:attributes: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Attributes {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:attributes: ", p), err) }
  return err
}

func (p *PurchaseOrderResponseStruct) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("billingConfirmUrl", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:billingConfirmUrl: ", p), err) }
  if err := oprot.WriteString(string(p.BillingConfirmUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.billingConfirmUrl (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:billingConfirmUrl: ", p), err) }
  return err
}

func (p *PurchaseOrderResponseStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PurchaseOrderResponseStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - PlainText
//  - NameTextMaxCharacterCount
//  - EncryptedText
type ImageTextPropertyStruct struct {
  Status StatusEnum `thrift:"status,1" db:"status" json:"status"`
  PlainText string `thrift:"plainText,2" db:"plainText" json:"plainText"`
  NameTextMaxCharacterCount int32 `thrift:"nameTextMaxCharacterCount,3" db:"nameTextMaxCharacterCount" json:"nameTextMaxCharacterCount"`
  EncryptedText string `thrift:"encryptedText,4" db:"encryptedText" json:"encryptedText"`
}

func NewImageTextPropertyStruct() *ImageTextPropertyStruct {
  return &ImageTextPropertyStruct{}
}


func (p *ImageTextPropertyStruct) GetStatus() StatusEnum {
  return p.Status
}

func (p *ImageTextPropertyStruct) GetPlainText() string {
  return p.PlainText
}

func (p *ImageTextPropertyStruct) GetNameTextMaxCharacterCount() int32 {
  return p.NameTextMaxCharacterCount
}

func (p *ImageTextPropertyStruct) GetEncryptedText() string {
  return p.EncryptedText
}
func (p *ImageTextPropertyStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageTextPropertyStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := StatusEnum(v)
  p.Status = temp
}
  return nil
}

func (p *ImageTextPropertyStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PlainText = v
}
  return nil
}

func (p *ImageTextPropertyStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NameTextMaxCharacterCount = v
}
  return nil
}

func (p *ImageTextPropertyStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EncryptedText = v
}
  return nil
}

func (p *ImageTextPropertyStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageTextPropertyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageTextPropertyStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *ImageTextPropertyStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("plainText", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:plainText: ", p), err) }
  if err := oprot.WriteString(string(p.PlainText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.plainText (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:plainText: ", p), err) }
  return err
}

func (p *ImageTextPropertyStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nameTextMaxCharacterCount", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nameTextMaxCharacterCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.NameTextMaxCharacterCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nameTextMaxCharacterCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nameTextMaxCharacterCount: ", p), err) }
  return err
}

func (p *ImageTextPropertyStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("encryptedText", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:encryptedText: ", p), err) }
  if err := oprot.WriteString(string(p.EncryptedText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encryptedText (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:encryptedText: ", p), err) }
  return err
}

func (p *ImageTextPropertyStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageTextPropertyStruct(%+v)", *p)
}

// Attributes:
//  - HasAnimation
//  - HasSound
//  - HasPopup
//  - StickerResourceType
//  - StickerOptions
//  - CompactStickerOptions
//  - StickerHash
//  - StickerIds
//  - NameTextProperty
//  - AvailableForPhotoEdit
type StickerPropertyStruct struct {
  HasAnimation bool `thrift:"hasAnimation,1" db:"hasAnimation" json:"hasAnimation"`
  HasSound bool `thrift:"hasSound,2" db:"hasSound" json:"hasSound"`
  HasPopup bool `thrift:"hasPopup,3" db:"hasPopup" json:"hasPopup"`
  StickerResourceType StickerResourceEnum `thrift:"stickerResourceType,4" db:"stickerResourceType" json:"stickerResourceType"`
  StickerOptions string `thrift:"stickerOptions,5" db:"stickerOptions" json:"stickerOptions"`
  CompactStickerOptions int32 `thrift:"compactStickerOptions,6" db:"compactStickerOptions" json:"compactStickerOptions"`
  StickerHash string `thrift:"stickerHash,7" db:"stickerHash" json:"stickerHash"`
  // unused field # 8
  StickerIds []string `thrift:"stickerIds,9" db:"stickerIds" json:"stickerIds"`
  NameTextProperty *ImageTextPropertyStruct `thrift:"nameTextProperty,10" db:"nameTextProperty" json:"nameTextProperty"`
  AvailableForPhotoEdit bool `thrift:"availableForPhotoEdit,11" db:"availableForPhotoEdit" json:"availableForPhotoEdit"`
}

func NewStickerPropertyStruct() *StickerPropertyStruct {
  return &StickerPropertyStruct{}
}


func (p *StickerPropertyStruct) GetHasAnimation() bool {
  return p.HasAnimation
}

func (p *StickerPropertyStruct) GetHasSound() bool {
  return p.HasSound
}

func (p *StickerPropertyStruct) GetHasPopup() bool {
  return p.HasPopup
}

func (p *StickerPropertyStruct) GetStickerResourceType() StickerResourceEnum {
  return p.StickerResourceType
}

func (p *StickerPropertyStruct) GetStickerOptions() string {
  return p.StickerOptions
}

func (p *StickerPropertyStruct) GetCompactStickerOptions() int32 {
  return p.CompactStickerOptions
}

func (p *StickerPropertyStruct) GetStickerHash() string {
  return p.StickerHash
}

func (p *StickerPropertyStruct) GetStickerIds() []string {
  return p.StickerIds
}
var StickerPropertyStruct_NameTextProperty_DEFAULT *ImageTextPropertyStruct
func (p *StickerPropertyStruct) GetNameTextProperty() *ImageTextPropertyStruct {
  if !p.IsSetNameTextProperty() {
    return StickerPropertyStruct_NameTextProperty_DEFAULT
  }
return p.NameTextProperty
}

func (p *StickerPropertyStruct) GetAvailableForPhotoEdit() bool {
  return p.AvailableForPhotoEdit
}
func (p *StickerPropertyStruct) IsSetNameTextProperty() bool {
  return p.NameTextProperty != nil
}

func (p *StickerPropertyStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StickerPropertyStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.HasAnimation = v
}
  return nil
}

func (p *StickerPropertyStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HasSound = v
}
  return nil
}

func (p *StickerPropertyStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HasPopup = v
}
  return nil
}

func (p *StickerPropertyStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := StickerResourceEnum(v)
  p.StickerResourceType = temp
}
  return nil
}

func (p *StickerPropertyStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StickerOptions = v
}
  return nil
}

func (p *StickerPropertyStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CompactStickerOptions = v
}
  return nil
}

func (p *StickerPropertyStruct)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.StickerHash = v
}
  return nil
}

func (p *StickerPropertyStruct)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.StickerIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem32 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem32 = v
}
    p.StickerIds = append(p.StickerIds, _elem32)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StickerPropertyStruct)  ReadField10(iprot thrift.TProtocol) error {
  p.NameTextProperty = &ImageTextPropertyStruct{}
  if err := p.NameTextProperty.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NameTextProperty), err)
  }
  return nil
}

func (p *StickerPropertyStruct)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.AvailableForPhotoEdit = v
}
  return nil
}

func (p *StickerPropertyStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StickerPropertyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StickerPropertyStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hasAnimation", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hasAnimation: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasAnimation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasAnimation (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hasAnimation: ", p), err) }
  return err
}

func (p *StickerPropertyStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hasSound", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hasSound: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasSound)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasSound (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hasSound: ", p), err) }
  return err
}

func (p *StickerPropertyStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hasPopup", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hasPopup: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasPopup)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasPopup (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hasPopup: ", p), err) }
  return err
}

func (p *StickerPropertyStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stickerResourceType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stickerResourceType: ", p), err) }
  if err := oprot.WriteI32(int32(p.StickerResourceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stickerResourceType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stickerResourceType: ", p), err) }
  return err
}

func (p *StickerPropertyStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stickerOptions", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:stickerOptions: ", p), err) }
  if err := oprot.WriteString(string(p.StickerOptions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stickerOptions (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:stickerOptions: ", p), err) }
  return err
}

func (p *StickerPropertyStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("compactStickerOptions", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:compactStickerOptions: ", p), err) }
  if err := oprot.WriteI32(int32(p.CompactStickerOptions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.compactStickerOptions (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:compactStickerOptions: ", p), err) }
  return err
}

func (p *StickerPropertyStruct) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stickerHash", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:stickerHash: ", p), err) }
  if err := oprot.WriteString(string(p.StickerHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stickerHash (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:stickerHash: ", p), err) }
  return err
}

func (p *StickerPropertyStruct) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stickerIds", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:stickerIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.StickerIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.StickerIds {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:stickerIds: ", p), err) }
  return err
}

func (p *StickerPropertyStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nameTextProperty", thrift.STRUCT, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:nameTextProperty: ", p), err) }
  if err := p.NameTextProperty.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NameTextProperty), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:nameTextProperty: ", p), err) }
  return err
}

func (p *StickerPropertyStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("availableForPhotoEdit", thrift.BOOL, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:availableForPhotoEdit: ", p), err) }
  if err := oprot.WriteBool(bool(p.AvailableForPhotoEdit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.availableForPhotoEdit (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:availableForPhotoEdit: ", p), err) }
  return err
}

func (p *StickerPropertyStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StickerPropertyStruct(%+v)", *p)
}

// Attributes:
//  - ThumbnailUrl
//  - ThemeResourceType
type ThemePropertyStruct struct {
  ThumbnailUrl string `thrift:"thumbnailUrl,1" db:"thumbnailUrl" json:"thumbnailUrl"`
  ThemeResourceType ThemeResourceTypeEnum `thrift:"themeResourceType,2" db:"themeResourceType" json:"themeResourceType"`
}

func NewThemePropertyStruct() *ThemePropertyStruct {
  return &ThemePropertyStruct{}
}


func (p *ThemePropertyStruct) GetThumbnailUrl() string {
  return p.ThumbnailUrl
}

func (p *ThemePropertyStruct) GetThemeResourceType() ThemeResourceTypeEnum {
  return p.ThemeResourceType
}
func (p *ThemePropertyStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThemePropertyStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ThumbnailUrl = v
}
  return nil
}

func (p *ThemePropertyStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ThemeResourceTypeEnum(v)
  p.ThemeResourceType = temp
}
  return nil
}

func (p *ThemePropertyStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ThemePropertyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThemePropertyStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:thumbnailUrl: ", p), err) }
  if err := oprot.WriteString(string(p.ThumbnailUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:thumbnailUrl: ", p), err) }
  return err
}

func (p *ThemePropertyStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("themeResourceType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:themeResourceType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ThemeResourceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.themeResourceType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:themeResourceType: ", p), err) }
  return err
}

func (p *ThemePropertyStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThemePropertyStruct(%+v)", *p)
}

// Attributes:
//  - SticonIds
//  - AvailableForPhotoEdit
type SticonPropertyStruct struct {
  SticonIds []string `thrift:"sticonIds,1" db:"sticonIds" json:"sticonIds"`
  AvailableForPhotoEdit bool `thrift:"availableForPhotoEdit,2" db:"availableForPhotoEdit" json:"availableForPhotoEdit"`
}

func NewSticonPropertyStruct() *SticonPropertyStruct {
  return &SticonPropertyStruct{}
}


func (p *SticonPropertyStruct) GetSticonIds() []string {
  return p.SticonIds
}

func (p *SticonPropertyStruct) GetAvailableForPhotoEdit() bool {
  return p.AvailableForPhotoEdit
}
func (p *SticonPropertyStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SticonPropertyStruct)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.SticonIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem33 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem33 = v
}
    p.SticonIds = append(p.SticonIds, _elem33)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SticonPropertyStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AvailableForPhotoEdit = v
}
  return nil
}

func (p *SticonPropertyStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SticonPropertyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SticonPropertyStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sticonIds", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sticonIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.SticonIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SticonIds {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sticonIds: ", p), err) }
  return err
}

func (p *SticonPropertyStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("availableForPhotoEdit", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:availableForPhotoEdit: ", p), err) }
  if err := oprot.WriteBool(bool(p.AvailableForPhotoEdit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.availableForPhotoEdit (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:availableForPhotoEdit: ", p), err) }
  return err
}

func (p *SticonPropertyStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SticonPropertyStruct(%+v)", *p)
}

// Attributes:
//  - StickerProperty
//  - ThemeProperty
//  - SticonProperty
type PropertyStruct struct {
  StickerProperty *StickerPropertyStruct `thrift:"stickerProperty,1" db:"stickerProperty" json:"stickerProperty"`
  ThemeProperty *ThemePropertyStruct `thrift:"themeProperty,2" db:"themeProperty" json:"themeProperty"`
  SticonProperty *SticonPropertyStruct `thrift:"sticonProperty,3" db:"sticonProperty" json:"sticonProperty"`
}

func NewPropertyStruct() *PropertyStruct {
  return &PropertyStruct{}
}

var PropertyStruct_StickerProperty_DEFAULT *StickerPropertyStruct
func (p *PropertyStruct) GetStickerProperty() *StickerPropertyStruct {
  if !p.IsSetStickerProperty() {
    return PropertyStruct_StickerProperty_DEFAULT
  }
return p.StickerProperty
}
var PropertyStruct_ThemeProperty_DEFAULT *ThemePropertyStruct
func (p *PropertyStruct) GetThemeProperty() *ThemePropertyStruct {
  if !p.IsSetThemeProperty() {
    return PropertyStruct_ThemeProperty_DEFAULT
  }
return p.ThemeProperty
}
var PropertyStruct_SticonProperty_DEFAULT *SticonPropertyStruct
func (p *PropertyStruct) GetSticonProperty() *SticonPropertyStruct {
  if !p.IsSetSticonProperty() {
    return PropertyStruct_SticonProperty_DEFAULT
  }
return p.SticonProperty
}
func (p *PropertyStruct) IsSetStickerProperty() bool {
  return p.StickerProperty != nil
}

func (p *PropertyStruct) IsSetThemeProperty() bool {
  return p.ThemeProperty != nil
}

func (p *PropertyStruct) IsSetSticonProperty() bool {
  return p.SticonProperty != nil
}

func (p *PropertyStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PropertyStruct)  ReadField1(iprot thrift.TProtocol) error {
  p.StickerProperty = &StickerPropertyStruct{}
  if err := p.StickerProperty.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StickerProperty), err)
  }
  return nil
}

func (p *PropertyStruct)  ReadField2(iprot thrift.TProtocol) error {
  p.ThemeProperty = &ThemePropertyStruct{}
  if err := p.ThemeProperty.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ThemeProperty), err)
  }
  return nil
}

func (p *PropertyStruct)  ReadField3(iprot thrift.TProtocol) error {
  p.SticonProperty = &SticonPropertyStruct{}
  if err := p.SticonProperty.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SticonProperty), err)
  }
  return nil
}

func (p *PropertyStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PropertyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PropertyStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stickerProperty", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stickerProperty: ", p), err) }
  if err := p.StickerProperty.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StickerProperty), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stickerProperty: ", p), err) }
  return err
}

func (p *PropertyStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("themeProperty", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:themeProperty: ", p), err) }
  if err := p.ThemeProperty.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ThemeProperty), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:themeProperty: ", p), err) }
  return err
}

func (p *PropertyStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sticonProperty", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sticonProperty: ", p), err) }
  if err := p.SticonProperty.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SticonProperty), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sticonProperty: ", p), err) }
  return err
}

func (p *PropertyStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PropertyStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
//  - Name
//  - Author
//  - PromotionInfo
//  - Version
//  - NewFlag_
//  - PriceTier
//  - PriceInLineCoin
//  - Property
//  - SubType
//  - OnSale
//  - AvailableForPresent
//  - AvailableForPurchase
//  - ValidDays
//  - AuthorId
//  - BargainFlag
//  - Copyright
//  - Availability
type ProductSearchSummaryStruct struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  Type ProductTypeEnum `thrift:"type,2" db:"type" json:"type"`
  Name string `thrift:"name,3" db:"name" json:"name"`
  Author string `thrift:"author,4" db:"author" json:"author"`
  PromotionInfo *PromotionInfoStruct `thrift:"promotionInfo,5" db:"promotionInfo" json:"promotionInfo"`
  Version int64 `thrift:"version,6" db:"version" json:"version"`
  NewFlag_ bool `thrift:"newFlag,7" db:"newFlag" json:"newFlag"`
  PriceTier int32 `thrift:"priceTier,8" db:"priceTier" json:"priceTier"`
  PriceInLineCoin string `thrift:"priceInLineCoin,9" db:"priceInLineCoin" json:"priceInLineCoin"`
  Property *PropertyStruct `thrift:"property,10" db:"property" json:"property"`
  SubType SubTypeEnum `thrift:"subType,11" db:"subType" json:"subType"`
  OnSale bool `thrift:"onSale,12" db:"onSale" json:"onSale"`
  AvailableForPresent bool `thrift:"availableForPresent,13" db:"availableForPresent" json:"availableForPresent"`
  AvailableForPurchase bool `thrift:"availableForPurchase,14" db:"availableForPurchase" json:"availableForPurchase"`
  ValidDays int32 `thrift:"validDays,15" db:"validDays" json:"validDays"`
  AuthorId string `thrift:"authorId,16" db:"authorId" json:"authorId"`
  BargainFlag bool `thrift:"bargainFlag,17" db:"bargainFlag" json:"bargainFlag"`
  Copyright string `thrift:"copyright,18" db:"copyright" json:"copyright"`
  Availability AvailabilityEnum `thrift:"availability,19" db:"availability" json:"availability"`
}

func NewProductSearchSummaryStruct() *ProductSearchSummaryStruct {
  return &ProductSearchSummaryStruct{}
}


func (p *ProductSearchSummaryStruct) GetID() string {
  return p.ID
}

func (p *ProductSearchSummaryStruct) GetType() ProductTypeEnum {
  return p.Type
}

func (p *ProductSearchSummaryStruct) GetName() string {
  return p.Name
}

func (p *ProductSearchSummaryStruct) GetAuthor() string {
  return p.Author
}
var ProductSearchSummaryStruct_PromotionInfo_DEFAULT *PromotionInfoStruct
func (p *ProductSearchSummaryStruct) GetPromotionInfo() *PromotionInfoStruct {
  if !p.IsSetPromotionInfo() {
    return ProductSearchSummaryStruct_PromotionInfo_DEFAULT
  }
return p.PromotionInfo
}

func (p *ProductSearchSummaryStruct) GetVersion() int64 {
  return p.Version
}

func (p *ProductSearchSummaryStruct) GetNewFlag_() bool {
  return p.NewFlag_
}

func (p *ProductSearchSummaryStruct) GetPriceTier() int32 {
  return p.PriceTier
}

func (p *ProductSearchSummaryStruct) GetPriceInLineCoin() string {
  return p.PriceInLineCoin
}
var ProductSearchSummaryStruct_Property_DEFAULT *PropertyStruct
func (p *ProductSearchSummaryStruct) GetProperty() *PropertyStruct {
  if !p.IsSetProperty() {
    return ProductSearchSummaryStruct_Property_DEFAULT
  }
return p.Property
}

func (p *ProductSearchSummaryStruct) GetSubType() SubTypeEnum {
  return p.SubType
}

func (p *ProductSearchSummaryStruct) GetOnSale() bool {
  return p.OnSale
}

func (p *ProductSearchSummaryStruct) GetAvailableForPresent() bool {
  return p.AvailableForPresent
}

func (p *ProductSearchSummaryStruct) GetAvailableForPurchase() bool {
  return p.AvailableForPurchase
}

func (p *ProductSearchSummaryStruct) GetValidDays() int32 {
  return p.ValidDays
}

func (p *ProductSearchSummaryStruct) GetAuthorId() string {
  return p.AuthorId
}

func (p *ProductSearchSummaryStruct) GetBargainFlag() bool {
  return p.BargainFlag
}

func (p *ProductSearchSummaryStruct) GetCopyright() string {
  return p.Copyright
}

func (p *ProductSearchSummaryStruct) GetAvailability() AvailabilityEnum {
  return p.Availability
}
func (p *ProductSearchSummaryStruct) IsSetPromotionInfo() bool {
  return p.PromotionInfo != nil
}

func (p *ProductSearchSummaryStruct) IsSetProperty() bool {
  return p.Property != nil
}

func (p *ProductSearchSummaryStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ProductTypeEnum(v)
  p.Type = temp
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Author = v
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField5(iprot thrift.TProtocol) error {
  p.PromotionInfo = &PromotionInfoStruct{}
  if err := p.PromotionInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PromotionInfo), err)
  }
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NewFlag_ = v
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.PriceTier = v
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.PriceInLineCoin = v
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField10(iprot thrift.TProtocol) error {
  p.Property = &PropertyStruct{}
  if err := p.Property.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Property), err)
  }
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := SubTypeEnum(v)
  p.SubType = temp
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.OnSale = v
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.AvailableForPresent = v
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.AvailableForPurchase = v
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.ValidDays = v
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.AuthorId = v
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.BargainFlag = v
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.Copyright = v
}
  return nil
}

func (p *ProductSearchSummaryStruct)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  temp := AvailabilityEnum(v)
  p.Availability = temp
}
  return nil
}

func (p *ProductSearchSummaryStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProductSearchSummaryStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProductSearchSummaryStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("author", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:author: ", p), err) }
  if err := oprot.WriteString(string(p.Author)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.author (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:author: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("promotionInfo", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:promotionInfo: ", p), err) }
  if err := p.PromotionInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PromotionInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:promotionInfo: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:version: ", p), err) }
  if err := oprot.WriteI64(int64(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:version: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newFlag", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:newFlag: ", p), err) }
  if err := oprot.WriteBool(bool(p.NewFlag_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newFlag (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:newFlag: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("priceTier", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:priceTier: ", p), err) }
  if err := oprot.WriteI32(int32(p.PriceTier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priceTier (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:priceTier: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("priceInLineCoin", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:priceInLineCoin: ", p), err) }
  if err := oprot.WriteString(string(p.PriceInLineCoin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priceInLineCoin (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:priceInLineCoin: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("property", thrift.STRUCT, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:property: ", p), err) }
  if err := p.Property.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Property), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:property: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("subType", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:subType: ", p), err) }
  if err := oprot.WriteI32(int32(p.SubType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.subType (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:subType: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("onSale", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:onSale: ", p), err) }
  if err := oprot.WriteBool(bool(p.OnSale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.onSale (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:onSale: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("availableForPresent", thrift.BOOL, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:availableForPresent: ", p), err) }
  if err := oprot.WriteBool(bool(p.AvailableForPresent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.availableForPresent (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:availableForPresent: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("availableForPurchase", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:availableForPurchase: ", p), err) }
  if err := oprot.WriteBool(bool(p.AvailableForPurchase)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.availableForPurchase (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:availableForPurchase: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("validDays", thrift.I32, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:validDays: ", p), err) }
  if err := oprot.WriteI32(int32(p.ValidDays)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.validDays (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:validDays: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authorId", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:authorId: ", p), err) }
  if err := oprot.WriteString(string(p.AuthorId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authorId (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:authorId: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bargainFlag", thrift.BOOL, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:bargainFlag: ", p), err) }
  if err := oprot.WriteBool(bool(p.BargainFlag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bargainFlag (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:bargainFlag: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("copyright", thrift.STRING, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:copyright: ", p), err) }
  if err := oprot.WriteString(string(p.Copyright)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.copyright (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:copyright: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("availability", thrift.I32, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:availability: ", p), err) }
  if err := oprot.WriteI32(int32(p.Availability)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.availability (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:availability: ", p), err) }
  return err
}

func (p *ProductSearchSummaryStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductSearchSummaryStruct(%+v)", *p)
}

// Attributes:
//  - ProductType
//  - ShowcaseType
//  - SubType
//  - ContinuationToken
//  - Limit
type ShowcaseRequestStruct struct {
  ProductType ProductTypeEnum `thrift:"productType,1" db:"productType" json:"productType"`
  ShowcaseType ShowcaseTypeEnum `thrift:"showcaseType,2" db:"showcaseType" json:"showcaseType"`
  SubType SubTypeEnum `thrift:"subType,3" db:"subType" json:"subType"`
  ContinuationToken string `thrift:"continuationToken,4" db:"continuationToken" json:"continuationToken"`
  Limit int32 `thrift:"limit,5" db:"limit" json:"limit"`
}

func NewShowcaseRequestStruct() *ShowcaseRequestStruct {
  return &ShowcaseRequestStruct{}
}


func (p *ShowcaseRequestStruct) GetProductType() ProductTypeEnum {
  return p.ProductType
}

func (p *ShowcaseRequestStruct) GetShowcaseType() ShowcaseTypeEnum {
  return p.ShowcaseType
}

func (p *ShowcaseRequestStruct) GetSubType() SubTypeEnum {
  return p.SubType
}

func (p *ShowcaseRequestStruct) GetContinuationToken() string {
  return p.ContinuationToken
}

func (p *ShowcaseRequestStruct) GetLimit() int32 {
  return p.Limit
}
func (p *ShowcaseRequestStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShowcaseRequestStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ProductTypeEnum(v)
  p.ProductType = temp
}
  return nil
}

func (p *ShowcaseRequestStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ShowcaseTypeEnum(v)
  p.ShowcaseType = temp
}
  return nil
}

func (p *ShowcaseRequestStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SubTypeEnum(v)
  p.SubType = temp
}
  return nil
}

func (p *ShowcaseRequestStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ContinuationToken = v
}
  return nil
}

func (p *ShowcaseRequestStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Limit = v
}
  return nil
}

func (p *ShowcaseRequestStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ShowcaseRequestStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShowcaseRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:productType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProductType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:productType: ", p), err) }
  return err
}

func (p *ShowcaseRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("showcaseType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:showcaseType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ShowcaseType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.showcaseType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:showcaseType: ", p), err) }
  return err
}

func (p *ShowcaseRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("subType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:subType: ", p), err) }
  if err := oprot.WriteI32(int32(p.SubType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.subType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:subType: ", p), err) }
  return err
}

func (p *ShowcaseRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("continuationToken", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:continuationToken: ", p), err) }
  if err := oprot.WriteString(string(p.ContinuationToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.continuationToken (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:continuationToken: ", p), err) }
  return err
}

func (p *ShowcaseRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:limit: ", p), err) }
  if err := oprot.WriteI32(int32(p.Limit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:limit: ", p), err) }
  return err
}

func (p *ShowcaseRequestStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShowcaseRequestStruct(%+v)", *p)
}

// Attributes:
//  - ProductList
//  - ContinuationToken
//  - TotalSize
//  - ShowcaseType
//  - ProductType
//  - SubType
type ShowcaseV3Response struct {
  ProductList []*ProductSearchSummaryStruct `thrift:"productList,1" db:"productList" json:"productList"`
  ContinuationToken string `thrift:"continuationToken,2" db:"continuationToken" json:"continuationToken"`
  TotalSize int64 `thrift:"totalSize,3" db:"totalSize" json:"totalSize"`
  ShowcaseType ShowcaseTypeEnum `thrift:"showcaseType,4" db:"showcaseType" json:"showcaseType"`
  ProductType ProductTypeEnum `thrift:"productType,5" db:"productType" json:"productType"`
  SubType SubTypeEnum `thrift:"subType,6" db:"subType" json:"subType"`
}

func NewShowcaseV3Response() *ShowcaseV3Response {
  return &ShowcaseV3Response{}
}


func (p *ShowcaseV3Response) GetProductList() []*ProductSearchSummaryStruct {
  return p.ProductList
}

func (p *ShowcaseV3Response) GetContinuationToken() string {
  return p.ContinuationToken
}

func (p *ShowcaseV3Response) GetTotalSize() int64 {
  return p.TotalSize
}

func (p *ShowcaseV3Response) GetShowcaseType() ShowcaseTypeEnum {
  return p.ShowcaseType
}

func (p *ShowcaseV3Response) GetProductType() ProductTypeEnum {
  return p.ProductType
}

func (p *ShowcaseV3Response) GetSubType() SubTypeEnum {
  return p.SubType
}
func (p *ShowcaseV3Response) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShowcaseV3Response)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ProductSearchSummaryStruct, 0, size)
  p.ProductList =  tSlice
  for i := 0; i < size; i ++ {
    _elem34 := &ProductSearchSummaryStruct{}
    if err := _elem34.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem34), err)
    }
    p.ProductList = append(p.ProductList, _elem34)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ShowcaseV3Response)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ContinuationToken = v
}
  return nil
}

func (p *ShowcaseV3Response)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TotalSize = v
}
  return nil
}

func (p *ShowcaseV3Response)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := ShowcaseTypeEnum(v)
  p.ShowcaseType = temp
}
  return nil
}

func (p *ShowcaseV3Response)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := ProductTypeEnum(v)
  p.ProductType = temp
}
  return nil
}

func (p *ShowcaseV3Response)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := SubTypeEnum(v)
  p.SubType = temp
}
  return nil
}

func (p *ShowcaseV3Response) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ShowcaseV3Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShowcaseV3Response) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productList", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:productList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProductList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ProductList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:productList: ", p), err) }
  return err
}

func (p *ShowcaseV3Response) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("continuationToken", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:continuationToken: ", p), err) }
  if err := oprot.WriteString(string(p.ContinuationToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.continuationToken (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:continuationToken: ", p), err) }
  return err
}

func (p *ShowcaseV3Response) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalSize", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalSize: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalSize (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalSize: ", p), err) }
  return err
}

func (p *ShowcaseV3Response) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("showcaseType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:showcaseType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ShowcaseType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.showcaseType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:showcaseType: ", p), err) }
  return err
}

func (p *ShowcaseV3Response) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:productType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProductType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:productType: ", p), err) }
  return err
}

func (p *ShowcaseV3Response) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("subType", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:subType: ", p), err) }
  if err := oprot.WriteI32(int32(p.SubType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.subType (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:subType: ", p), err) }
  return err
}

func (p *ShowcaseV3Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShowcaseV3Response(%+v)", *p)
}

// Attributes:
//  - ID
//  - ExpirationTime
//  - MaxUseCount
type TicketStruct struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  // unused fields # 2 to 9
  ExpirationTime int64 `thrift:"expirationTime,10" db:"expirationTime" json:"expirationTime"`
  // unused fields # 11 to 20
  MaxUseCount int32 `thrift:"maxUseCount,21" db:"maxUseCount" json:"maxUseCount"`
}

func NewTicketStruct() *TicketStruct {
  return &TicketStruct{}
}


func (p *TicketStruct) GetID() string {
  return p.ID
}

func (p *TicketStruct) GetExpirationTime() int64 {
  return p.ExpirationTime
}

func (p *TicketStruct) GetMaxUseCount() int32 {
  return p.MaxUseCount
}
func (p *TicketStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TicketStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TicketStruct)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ExpirationTime = v
}
  return nil
}

func (p *TicketStruct)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.MaxUseCount = v
}
  return nil
}

func (p *TicketStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TicketStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TicketStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TicketStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expirationTime", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:expirationTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExpirationTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expirationTime (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:expirationTime: ", p), err) }
  return err
}

func (p *TicketStruct) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxUseCount", thrift.I32, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:maxUseCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxUseCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxUseCount (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:maxUseCount: ", p), err) }
  return err
}

func (p *TicketStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TicketStruct(%+v)", *p)
}

// Attributes:
//  - NotificationEnable
//  - NotificationMuteExpiration
//  - NotificationNewMessage
//  - NotificationGroupInvitation
//  - NotificationShowMessage
//  - NotificationIncomingCall
//  - NotificationSoundMessage
//  - NotificationSoundGroup
//  - NotificationDisabledWithSub
//  - PrivacySyncContacts
//  - PrivacySearchByPhoneNumber
//  - PrivacySearchByUserid
//  - PrivacySearchByEmail
//  - PrivacyAllowSecondaryDeviceLogin
//  - PrivacyProfileImagePostToMyhome
//  - PrivacyReceiveMessagesFromNotFriend
//  - PrivacyAgreeUseLineCoinToPaidCall
//  - PrivacyAgreeUsePaidCall
//  - PrivacyAllowFriendRequest
//  - ContactMyTicket
//  - IdentityProvider
//  - IdentityIdentifier
//  - SnsAccounts
//  - PhoneRegistration
//  - EmailConfirmationStatus
//  - AccountMigrationPincodeType
//  - EnforcedInputAccountMigrationPincode
//  - SecurityCenterSettingsType
//  - AllowUnregistrationSecondaryDevice
//  - PreferenceLocale
//  - CustomModes
//  - E2eeEnable
//  - HitokotoBackupRequested
//  - PrivacyProfileMusicPostToMyhome
//  - PrivacyAllowNearby
//  - AgreementNearbyTime
//  - AgreementSquareTime
//  - NotificationMention
//  - BotUseAgreementAcceptedAt
//  - AgreementShakeFunction
//  - AgreementMobileContactName
//  - NotificationThumbnail
//  - AgreementSoundToText
//  - PrivacyPolicyVersion
//  - AgreementAdByWebAccess
//  - AgreementPhoneNumberMatching
//  - AgreementCommunicationInfo
//  - PrivacySharePersonalInfoToFriends
//  - AgreementThingsWirelessCommunication
//  - AgreementGdpr
//  - PrivacyStatusMessageHistory
//  - AgreementProvideLocation
//  - AgreementBeacon
//  - PrivacyAllowProfileHistory
//  - AgreementContentsSuggest
//  - AgreementContentsSuggestDataCollection
//  - PrivacyAgeResult_
//  - PrivacyAgeResultReceived
type SettingsStruct struct {
  // unused fields # 1 to 9
  NotificationEnable bool `thrift:"notificationEnable,10" db:"notificationEnable" json:"notificationEnable"`
  NotificationMuteExpiration int64 `thrift:"notificationMuteExpiration,11" db:"notificationMuteExpiration" json:"notificationMuteExpiration"`
  NotificationNewMessage bool `thrift:"notificationNewMessage,12" db:"notificationNewMessage" json:"notificationNewMessage"`
  NotificationGroupInvitation bool `thrift:"notificationGroupInvitation,13" db:"notificationGroupInvitation" json:"notificationGroupInvitation"`
  NotificationShowMessage bool `thrift:"notificationShowMessage,14" db:"notificationShowMessage" json:"notificationShowMessage"`
  NotificationIncomingCall bool `thrift:"notificationIncomingCall,15" db:"notificationIncomingCall" json:"notificationIncomingCall"`
  NotificationSoundMessage string `thrift:"notificationSoundMessage,16" db:"notificationSoundMessage" json:"notificationSoundMessage"`
  NotificationSoundGroup string `thrift:"notificationSoundGroup,17" db:"notificationSoundGroup" json:"notificationSoundGroup"`
  NotificationDisabledWithSub bool `thrift:"notificationDisabledWithSub,18" db:"notificationDisabledWithSub" json:"notificationDisabledWithSub"`
  // unused field # 19
  PrivacySyncContacts bool `thrift:"privacySyncContacts,20" db:"privacySyncContacts" json:"privacySyncContacts"`
  PrivacySearchByPhoneNumber bool `thrift:"privacySearchByPhoneNumber,21" db:"privacySearchByPhoneNumber" json:"privacySearchByPhoneNumber"`
  PrivacySearchByUserid bool `thrift:"privacySearchByUserid,22" db:"privacySearchByUserid" json:"privacySearchByUserid"`
  PrivacySearchByEmail bool `thrift:"privacySearchByEmail,23" db:"privacySearchByEmail" json:"privacySearchByEmail"`
  PrivacyAllowSecondaryDeviceLogin bool `thrift:"privacyAllowSecondaryDeviceLogin,24" db:"privacyAllowSecondaryDeviceLogin" json:"privacyAllowSecondaryDeviceLogin"`
  PrivacyProfileImagePostToMyhome bool `thrift:"privacyProfileImagePostToMyhome,25" db:"privacyProfileImagePostToMyhome" json:"privacyProfileImagePostToMyhome"`
  PrivacyReceiveMessagesFromNotFriend bool `thrift:"privacyReceiveMessagesFromNotFriend,26" db:"privacyReceiveMessagesFromNotFriend" json:"privacyReceiveMessagesFromNotFriend"`
  PrivacyAgreeUseLineCoinToPaidCall bool `thrift:"privacyAgreeUseLineCoinToPaidCall,27" db:"privacyAgreeUseLineCoinToPaidCall" json:"privacyAgreeUseLineCoinToPaidCall"`
  PrivacyAgreeUsePaidCall bool `thrift:"privacyAgreeUsePaidCall,28" db:"privacyAgreeUsePaidCall" json:"privacyAgreeUsePaidCall"`
  PrivacyAllowFriendRequest bool `thrift:"privacyAllowFriendRequest,29" db:"privacyAllowFriendRequest" json:"privacyAllowFriendRequest"`
  ContactMyTicket string `thrift:"contactMyTicket,30" db:"contactMyTicket" json:"contactMyTicket"`
  // unused fields # 31 to 39
  IdentityProvider IdentityProviderEnum `thrift:"identityProvider,40" db:"identityProvider" json:"identityProvider"`
  IdentityIdentifier string `thrift:"identityIdentifier,41" db:"identityIdentifier" json:"identityIdentifier"`
  SnsAccounts map[SnsIdTypeEnum]string `thrift:"snsAccounts,42" db:"snsAccounts" json:"snsAccounts"`
  PhoneRegistration bool `thrift:"phoneRegistration,43" db:"phoneRegistration" json:"phoneRegistration"`
  EmailConfirmationStatus EmailConfirmationStatusEnum `thrift:"emailConfirmationStatus,44" db:"emailConfirmationStatus" json:"emailConfirmationStatus"`
  AccountMigrationPincodeType AccountMigrationPincodeTypeEnum `thrift:"accountMigrationPincodeType,45" db:"accountMigrationPincodeType" json:"accountMigrationPincodeType"`
  EnforcedInputAccountMigrationPincode bool `thrift:"enforcedInputAccountMigrationPincode,46" db:"enforcedInputAccountMigrationPincode" json:"enforcedInputAccountMigrationPincode"`
  SecurityCenterSettingsType SecurityCenterSettingsTypeEnum `thrift:"securityCenterSettingsType,47" db:"securityCenterSettingsType" json:"securityCenterSettingsType"`
  AllowUnregistrationSecondaryDevice bool `thrift:"allowUnregistrationSecondaryDevice,48" db:"allowUnregistrationSecondaryDevice" json:"allowUnregistrationSecondaryDevice"`
  // unused field # 49
  PreferenceLocale string `thrift:"preferenceLocale,50" db:"preferenceLocale" json:"preferenceLocale"`
  // unused fields # 51 to 59
  CustomModes map[CustomModesEnum]string `thrift:"customModes,60" db:"customModes" json:"customModes"`
  E2eeEnable bool `thrift:"e2eeEnable,61" db:"e2eeEnable" json:"e2eeEnable"`
  HitokotoBackupRequested bool `thrift:"hitokotoBackupRequested,62" db:"hitokotoBackupRequested" json:"hitokotoBackupRequested"`
  PrivacyProfileMusicPostToMyhome bool `thrift:"privacyProfileMusicPostToMyhome,63" db:"privacyProfileMusicPostToMyhome" json:"privacyProfileMusicPostToMyhome"`
  // unused field # 64
  PrivacyAllowNearby bool `thrift:"privacyAllowNearby,65" db:"privacyAllowNearby" json:"privacyAllowNearby"`
  AgreementNearbyTime int64 `thrift:"agreementNearbyTime,66" db:"agreementNearbyTime" json:"agreementNearbyTime"`
  AgreementSquareTime int64 `thrift:"agreementSquareTime,67" db:"agreementSquareTime" json:"agreementSquareTime"`
  NotificationMention bool `thrift:"notificationMention,68" db:"notificationMention" json:"notificationMention"`
  BotUseAgreementAcceptedAt int64 `thrift:"botUseAgreementAcceptedAt,69" db:"botUseAgreementAcceptedAt" json:"botUseAgreementAcceptedAt"`
  AgreementShakeFunction int64 `thrift:"agreementShakeFunction,70" db:"agreementShakeFunction" json:"agreementShakeFunction"`
  AgreementMobileContactName int64 `thrift:"agreementMobileContactName,71" db:"agreementMobileContactName" json:"agreementMobileContactName"`
  NotificationThumbnail bool `thrift:"notificationThumbnail,72" db:"notificationThumbnail" json:"notificationThumbnail"`
  AgreementSoundToText int64 `thrift:"agreementSoundToText,73" db:"agreementSoundToText" json:"agreementSoundToText"`
  PrivacyPolicyVersion string `thrift:"privacyPolicyVersion,74" db:"privacyPolicyVersion" json:"privacyPolicyVersion"`
  AgreementAdByWebAccess int64 `thrift:"agreementAdByWebAccess,75" db:"agreementAdByWebAccess" json:"agreementAdByWebAccess"`
  AgreementPhoneNumberMatching int64 `thrift:"agreementPhoneNumberMatching,76" db:"agreementPhoneNumberMatching" json:"agreementPhoneNumberMatching"`
  AgreementCommunicationInfo int64 `thrift:"agreementCommunicationInfo,77" db:"agreementCommunicationInfo" json:"agreementCommunicationInfo"`
  PrivacySharePersonalInfoToFriends SharePersonalInfoToFriendsEnum `thrift:"privacySharePersonalInfoToFriends,78" db:"privacySharePersonalInfoToFriends" json:"privacySharePersonalInfoToFriends"`
  AgreementThingsWirelessCommunication int64 `thrift:"agreementThingsWirelessCommunication,79" db:"agreementThingsWirelessCommunication" json:"agreementThingsWirelessCommunication"`
  AgreementGdpr int64 `thrift:"agreementGdpr,80" db:"agreementGdpr" json:"agreementGdpr"`
  PrivacyStatusMessageHistory StatusMessageHistoryEnum `thrift:"privacyStatusMessageHistory,81" db:"privacyStatusMessageHistory" json:"privacyStatusMessageHistory"`
  AgreementProvideLocation int64 `thrift:"agreementProvideLocation,82" db:"agreementProvideLocation" json:"agreementProvideLocation"`
  AgreementBeacon int64 `thrift:"agreementBeacon,83" db:"agreementBeacon" json:"agreementBeacon"`
  // unused field # 84
  PrivacyAllowProfileHistory AllowProfileHistoryEnum `thrift:"privacyAllowProfileHistory,85" db:"privacyAllowProfileHistory" json:"privacyAllowProfileHistory"`
  AgreementContentsSuggest int64 `thrift:"agreementContentsSuggest,86" db:"agreementContentsSuggest" json:"agreementContentsSuggest"`
  AgreementContentsSuggestDataCollection int64 `thrift:"agreementContentsSuggestDataCollection,87" db:"agreementContentsSuggestDataCollection" json:"agreementContentsSuggestDataCollection"`
  PrivacyAgeResult_ PrivacyAgeResultEnum `thrift:"privacyAgeResult,88" db:"privacyAgeResult" json:"privacyAgeResult"`
  PrivacyAgeResultReceived bool `thrift:"privacyAgeResultReceived,89" db:"privacyAgeResultReceived" json:"privacyAgeResultReceived"`
}

func NewSettingsStruct() *SettingsStruct {
  return &SettingsStruct{}
}


func (p *SettingsStruct) GetNotificationEnable() bool {
  return p.NotificationEnable
}

func (p *SettingsStruct) GetNotificationMuteExpiration() int64 {
  return p.NotificationMuteExpiration
}

func (p *SettingsStruct) GetNotificationNewMessage() bool {
  return p.NotificationNewMessage
}

func (p *SettingsStruct) GetNotificationGroupInvitation() bool {
  return p.NotificationGroupInvitation
}

func (p *SettingsStruct) GetNotificationShowMessage() bool {
  return p.NotificationShowMessage
}

func (p *SettingsStruct) GetNotificationIncomingCall() bool {
  return p.NotificationIncomingCall
}

func (p *SettingsStruct) GetNotificationSoundMessage() string {
  return p.NotificationSoundMessage
}

func (p *SettingsStruct) GetNotificationSoundGroup() string {
  return p.NotificationSoundGroup
}

func (p *SettingsStruct) GetNotificationDisabledWithSub() bool {
  return p.NotificationDisabledWithSub
}

func (p *SettingsStruct) GetPrivacySyncContacts() bool {
  return p.PrivacySyncContacts
}

func (p *SettingsStruct) GetPrivacySearchByPhoneNumber() bool {
  return p.PrivacySearchByPhoneNumber
}

func (p *SettingsStruct) GetPrivacySearchByUserid() bool {
  return p.PrivacySearchByUserid
}

func (p *SettingsStruct) GetPrivacySearchByEmail() bool {
  return p.PrivacySearchByEmail
}

func (p *SettingsStruct) GetPrivacyAllowSecondaryDeviceLogin() bool {
  return p.PrivacyAllowSecondaryDeviceLogin
}

func (p *SettingsStruct) GetPrivacyProfileImagePostToMyhome() bool {
  return p.PrivacyProfileImagePostToMyhome
}

func (p *SettingsStruct) GetPrivacyReceiveMessagesFromNotFriend() bool {
  return p.PrivacyReceiveMessagesFromNotFriend
}

func (p *SettingsStruct) GetPrivacyAgreeUseLineCoinToPaidCall() bool {
  return p.PrivacyAgreeUseLineCoinToPaidCall
}

func (p *SettingsStruct) GetPrivacyAgreeUsePaidCall() bool {
  return p.PrivacyAgreeUsePaidCall
}

func (p *SettingsStruct) GetPrivacyAllowFriendRequest() bool {
  return p.PrivacyAllowFriendRequest
}

func (p *SettingsStruct) GetContactMyTicket() string {
  return p.ContactMyTicket
}

func (p *SettingsStruct) GetIdentityProvider() IdentityProviderEnum {
  return p.IdentityProvider
}

func (p *SettingsStruct) GetIdentityIdentifier() string {
  return p.IdentityIdentifier
}

func (p *SettingsStruct) GetSnsAccounts() map[SnsIdTypeEnum]string {
  return p.SnsAccounts
}

func (p *SettingsStruct) GetPhoneRegistration() bool {
  return p.PhoneRegistration
}

func (p *SettingsStruct) GetEmailConfirmationStatus() EmailConfirmationStatusEnum {
  return p.EmailConfirmationStatus
}

func (p *SettingsStruct) GetAccountMigrationPincodeType() AccountMigrationPincodeTypeEnum {
  return p.AccountMigrationPincodeType
}

func (p *SettingsStruct) GetEnforcedInputAccountMigrationPincode() bool {
  return p.EnforcedInputAccountMigrationPincode
}

func (p *SettingsStruct) GetSecurityCenterSettingsType() SecurityCenterSettingsTypeEnum {
  return p.SecurityCenterSettingsType
}

func (p *SettingsStruct) GetAllowUnregistrationSecondaryDevice() bool {
  return p.AllowUnregistrationSecondaryDevice
}

func (p *SettingsStruct) GetPreferenceLocale() string {
  return p.PreferenceLocale
}

func (p *SettingsStruct) GetCustomModes() map[CustomModesEnum]string {
  return p.CustomModes
}

func (p *SettingsStruct) GetE2eeEnable() bool {
  return p.E2eeEnable
}

func (p *SettingsStruct) GetHitokotoBackupRequested() bool {
  return p.HitokotoBackupRequested
}

func (p *SettingsStruct) GetPrivacyProfileMusicPostToMyhome() bool {
  return p.PrivacyProfileMusicPostToMyhome
}

func (p *SettingsStruct) GetPrivacyAllowNearby() bool {
  return p.PrivacyAllowNearby
}

func (p *SettingsStruct) GetAgreementNearbyTime() int64 {
  return p.AgreementNearbyTime
}

func (p *SettingsStruct) GetAgreementSquareTime() int64 {
  return p.AgreementSquareTime
}

func (p *SettingsStruct) GetNotificationMention() bool {
  return p.NotificationMention
}

func (p *SettingsStruct) GetBotUseAgreementAcceptedAt() int64 {
  return p.BotUseAgreementAcceptedAt
}

func (p *SettingsStruct) GetAgreementShakeFunction() int64 {
  return p.AgreementShakeFunction
}

func (p *SettingsStruct) GetAgreementMobileContactName() int64 {
  return p.AgreementMobileContactName
}

func (p *SettingsStruct) GetNotificationThumbnail() bool {
  return p.NotificationThumbnail
}

func (p *SettingsStruct) GetAgreementSoundToText() int64 {
  return p.AgreementSoundToText
}

func (p *SettingsStruct) GetPrivacyPolicyVersion() string {
  return p.PrivacyPolicyVersion
}

func (p *SettingsStruct) GetAgreementAdByWebAccess() int64 {
  return p.AgreementAdByWebAccess
}

func (p *SettingsStruct) GetAgreementPhoneNumberMatching() int64 {
  return p.AgreementPhoneNumberMatching
}

func (p *SettingsStruct) GetAgreementCommunicationInfo() int64 {
  return p.AgreementCommunicationInfo
}

func (p *SettingsStruct) GetPrivacySharePersonalInfoToFriends() SharePersonalInfoToFriendsEnum {
  return p.PrivacySharePersonalInfoToFriends
}

func (p *SettingsStruct) GetAgreementThingsWirelessCommunication() int64 {
  return p.AgreementThingsWirelessCommunication
}

func (p *SettingsStruct) GetAgreementGdpr() int64 {
  return p.AgreementGdpr
}

func (p *SettingsStruct) GetPrivacyStatusMessageHistory() StatusMessageHistoryEnum {
  return p.PrivacyStatusMessageHistory
}

func (p *SettingsStruct) GetAgreementProvideLocation() int64 {
  return p.AgreementProvideLocation
}

func (p *SettingsStruct) GetAgreementBeacon() int64 {
  return p.AgreementBeacon
}

func (p *SettingsStruct) GetPrivacyAllowProfileHistory() AllowProfileHistoryEnum {
  return p.PrivacyAllowProfileHistory
}

func (p *SettingsStruct) GetAgreementContentsSuggest() int64 {
  return p.AgreementContentsSuggest
}

func (p *SettingsStruct) GetAgreementContentsSuggestDataCollection() int64 {
  return p.AgreementContentsSuggestDataCollection
}

func (p *SettingsStruct) GetPrivacyAgeResult_() PrivacyAgeResultEnum {
  return p.PrivacyAgeResult_
}

func (p *SettingsStruct) GetPrivacyAgeResultReceived() bool {
  return p.PrivacyAgeResultReceived
}
func (p *SettingsStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField27(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField28(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField29(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField30(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField40(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField41(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField42(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField43(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField44(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 45:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField45(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 46:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField46(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 47:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField47(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 48:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField48(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 50:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField50(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 60:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField60(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 61:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField61(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 62:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField62(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 63:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField63(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 65:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField65(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 66:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField66(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 67:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField67(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 68:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField68(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 69:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField69(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 70:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField70(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 71:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField71(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 72:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField72(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 73:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField73(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 74:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField74(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 75:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField75(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 76:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField76(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 77:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField77(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 78:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField78(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 79:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField79(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 80:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField80(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 81:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField81(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 82:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField82(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 83:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField83(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 85:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField85(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 86:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField86(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 87:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField87(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 88:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField88(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 89:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField89(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SettingsStruct)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NotificationEnable = v
}
  return nil
}

func (p *SettingsStruct)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.NotificationMuteExpiration = v
}
  return nil
}

func (p *SettingsStruct)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.NotificationNewMessage = v
}
  return nil
}

func (p *SettingsStruct)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.NotificationGroupInvitation = v
}
  return nil
}

func (p *SettingsStruct)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.NotificationShowMessage = v
}
  return nil
}

func (p *SettingsStruct)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.NotificationIncomingCall = v
}
  return nil
}

func (p *SettingsStruct)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.NotificationSoundMessage = v
}
  return nil
}

func (p *SettingsStruct)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.NotificationSoundGroup = v
}
  return nil
}

func (p *SettingsStruct)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.NotificationDisabledWithSub = v
}
  return nil
}

func (p *SettingsStruct)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.PrivacySyncContacts = v
}
  return nil
}

func (p *SettingsStruct)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.PrivacySearchByPhoneNumber = v
}
  return nil
}

func (p *SettingsStruct)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.PrivacySearchByUserid = v
}
  return nil
}

func (p *SettingsStruct)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.PrivacySearchByEmail = v
}
  return nil
}

func (p *SettingsStruct)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.PrivacyAllowSecondaryDeviceLogin = v
}
  return nil
}

func (p *SettingsStruct)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.PrivacyProfileImagePostToMyhome = v
}
  return nil
}

func (p *SettingsStruct)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.PrivacyReceiveMessagesFromNotFriend = v
}
  return nil
}

func (p *SettingsStruct)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.PrivacyAgreeUseLineCoinToPaidCall = v
}
  return nil
}

func (p *SettingsStruct)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.PrivacyAgreeUsePaidCall = v
}
  return nil
}

func (p *SettingsStruct)  ReadField29(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.PrivacyAllowFriendRequest = v
}
  return nil
}

func (p *SettingsStruct)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.ContactMyTicket = v
}
  return nil
}

func (p *SettingsStruct)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  temp := IdentityProviderEnum(v)
  p.IdentityProvider = temp
}
  return nil
}

func (p *SettingsStruct)  ReadField41(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.IdentityIdentifier = v
}
  return nil
}

func (p *SettingsStruct)  ReadField42(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[SnsIdTypeEnum]string, size)
  p.SnsAccounts =  tMap
  for i := 0; i < size; i ++ {
var _key35 SnsIdTypeEnum
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SnsIdTypeEnum(v)
    _key35 = temp
}
var _val36 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val36 = v
}
    p.SnsAccounts[_key35] = _val36
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SettingsStruct)  ReadField43(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 43: ", err)
} else {
  p.PhoneRegistration = v
}
  return nil
}

func (p *SettingsStruct)  ReadField44(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 44: ", err)
} else {
  temp := EmailConfirmationStatusEnum(v)
  p.EmailConfirmationStatus = temp
}
  return nil
}

func (p *SettingsStruct)  ReadField45(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  temp := AccountMigrationPincodeTypeEnum(v)
  p.AccountMigrationPincodeType = temp
}
  return nil
}

func (p *SettingsStruct)  ReadField46(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 46: ", err)
} else {
  p.EnforcedInputAccountMigrationPincode = v
}
  return nil
}

func (p *SettingsStruct)  ReadField47(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 47: ", err)
} else {
  temp := SecurityCenterSettingsTypeEnum(v)
  p.SecurityCenterSettingsType = temp
}
  return nil
}

func (p *SettingsStruct)  ReadField48(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 48: ", err)
} else {
  p.AllowUnregistrationSecondaryDevice = v
}
  return nil
}

func (p *SettingsStruct)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.PreferenceLocale = v
}
  return nil
}

func (p *SettingsStruct)  ReadField60(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[CustomModesEnum]string, size)
  p.CustomModes =  tMap
  for i := 0; i < size; i ++ {
var _key37 CustomModesEnum
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := CustomModesEnum(v)
    _key37 = temp
}
var _val38 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val38 = v
}
    p.CustomModes[_key37] = _val38
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *SettingsStruct)  ReadField61(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 61: ", err)
} else {
  p.E2eeEnable = v
}
  return nil
}

func (p *SettingsStruct)  ReadField62(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 62: ", err)
} else {
  p.HitokotoBackupRequested = v
}
  return nil
}

func (p *SettingsStruct)  ReadField63(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 63: ", err)
} else {
  p.PrivacyProfileMusicPostToMyhome = v
}
  return nil
}

func (p *SettingsStruct)  ReadField65(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 65: ", err)
} else {
  p.PrivacyAllowNearby = v
}
  return nil
}

func (p *SettingsStruct)  ReadField66(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 66: ", err)
} else {
  p.AgreementNearbyTime = v
}
  return nil
}

func (p *SettingsStruct)  ReadField67(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 67: ", err)
} else {
  p.AgreementSquareTime = v
}
  return nil
}

func (p *SettingsStruct)  ReadField68(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 68: ", err)
} else {
  p.NotificationMention = v
}
  return nil
}

func (p *SettingsStruct)  ReadField69(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 69: ", err)
} else {
  p.BotUseAgreementAcceptedAt = v
}
  return nil
}

func (p *SettingsStruct)  ReadField70(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 70: ", err)
} else {
  p.AgreementShakeFunction = v
}
  return nil
}

func (p *SettingsStruct)  ReadField71(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 71: ", err)
} else {
  p.AgreementMobileContactName = v
}
  return nil
}

func (p *SettingsStruct)  ReadField72(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 72: ", err)
} else {
  p.NotificationThumbnail = v
}
  return nil
}

func (p *SettingsStruct)  ReadField73(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 73: ", err)
} else {
  p.AgreementSoundToText = v
}
  return nil
}

func (p *SettingsStruct)  ReadField74(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 74: ", err)
} else {
  p.PrivacyPolicyVersion = v
}
  return nil
}

func (p *SettingsStruct)  ReadField75(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 75: ", err)
} else {
  p.AgreementAdByWebAccess = v
}
  return nil
}

func (p *SettingsStruct)  ReadField76(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 76: ", err)
} else {
  p.AgreementPhoneNumberMatching = v
}
  return nil
}

func (p *SettingsStruct)  ReadField77(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 77: ", err)
} else {
  p.AgreementCommunicationInfo = v
}
  return nil
}

func (p *SettingsStruct)  ReadField78(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 78: ", err)
} else {
  temp := SharePersonalInfoToFriendsEnum(v)
  p.PrivacySharePersonalInfoToFriends = temp
}
  return nil
}

func (p *SettingsStruct)  ReadField79(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 79: ", err)
} else {
  p.AgreementThingsWirelessCommunication = v
}
  return nil
}

func (p *SettingsStruct)  ReadField80(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 80: ", err)
} else {
  p.AgreementGdpr = v
}
  return nil
}

func (p *SettingsStruct)  ReadField81(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 81: ", err)
} else {
  temp := StatusMessageHistoryEnum(v)
  p.PrivacyStatusMessageHistory = temp
}
  return nil
}

func (p *SettingsStruct)  ReadField82(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 82: ", err)
} else {
  p.AgreementProvideLocation = v
}
  return nil
}

func (p *SettingsStruct)  ReadField83(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 83: ", err)
} else {
  p.AgreementBeacon = v
}
  return nil
}

func (p *SettingsStruct)  ReadField85(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 85: ", err)
} else {
  temp := AllowProfileHistoryEnum(v)
  p.PrivacyAllowProfileHistory = temp
}
  return nil
}

func (p *SettingsStruct)  ReadField86(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 86: ", err)
} else {
  p.AgreementContentsSuggest = v
}
  return nil
}

func (p *SettingsStruct)  ReadField87(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 87: ", err)
} else {
  p.AgreementContentsSuggestDataCollection = v
}
  return nil
}

func (p *SettingsStruct)  ReadField88(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 88: ", err)
} else {
  temp := PrivacyAgeResultEnum(v)
  p.PrivacyAgeResult_ = temp
}
  return nil
}

func (p *SettingsStruct)  ReadField89(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 89: ", err)
} else {
  p.PrivacyAgeResultReceived = v
}
  return nil
}

func (p *SettingsStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SettingsStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
    if err := p.writeField29(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField41(oprot); err != nil { return err }
    if err := p.writeField42(oprot); err != nil { return err }
    if err := p.writeField43(oprot); err != nil { return err }
    if err := p.writeField44(oprot); err != nil { return err }
    if err := p.writeField45(oprot); err != nil { return err }
    if err := p.writeField46(oprot); err != nil { return err }
    if err := p.writeField47(oprot); err != nil { return err }
    if err := p.writeField48(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
    if err := p.writeField60(oprot); err != nil { return err }
    if err := p.writeField61(oprot); err != nil { return err }
    if err := p.writeField62(oprot); err != nil { return err }
    if err := p.writeField63(oprot); err != nil { return err }
    if err := p.writeField65(oprot); err != nil { return err }
    if err := p.writeField66(oprot); err != nil { return err }
    if err := p.writeField67(oprot); err != nil { return err }
    if err := p.writeField68(oprot); err != nil { return err }
    if err := p.writeField69(oprot); err != nil { return err }
    if err := p.writeField70(oprot); err != nil { return err }
    if err := p.writeField71(oprot); err != nil { return err }
    if err := p.writeField72(oprot); err != nil { return err }
    if err := p.writeField73(oprot); err != nil { return err }
    if err := p.writeField74(oprot); err != nil { return err }
    if err := p.writeField75(oprot); err != nil { return err }
    if err := p.writeField76(oprot); err != nil { return err }
    if err := p.writeField77(oprot); err != nil { return err }
    if err := p.writeField78(oprot); err != nil { return err }
    if err := p.writeField79(oprot); err != nil { return err }
    if err := p.writeField80(oprot); err != nil { return err }
    if err := p.writeField81(oprot); err != nil { return err }
    if err := p.writeField82(oprot); err != nil { return err }
    if err := p.writeField83(oprot); err != nil { return err }
    if err := p.writeField85(oprot); err != nil { return err }
    if err := p.writeField86(oprot); err != nil { return err }
    if err := p.writeField87(oprot); err != nil { return err }
    if err := p.writeField88(oprot); err != nil { return err }
    if err := p.writeField89(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SettingsStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationEnable", thrift.BOOL, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:notificationEnable: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationEnable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationEnable (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:notificationEnable: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationMuteExpiration", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:notificationMuteExpiration: ", p), err) }
  if err := oprot.WriteI64(int64(p.NotificationMuteExpiration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationMuteExpiration (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:notificationMuteExpiration: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationNewMessage", thrift.BOOL, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:notificationNewMessage: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationNewMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationNewMessage (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:notificationNewMessage: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationGroupInvitation", thrift.BOOL, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:notificationGroupInvitation: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationGroupInvitation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationGroupInvitation (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:notificationGroupInvitation: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationShowMessage", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:notificationShowMessage: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationShowMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationShowMessage (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:notificationShowMessage: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationIncomingCall", thrift.BOOL, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:notificationIncomingCall: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationIncomingCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationIncomingCall (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:notificationIncomingCall: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationSoundMessage", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:notificationSoundMessage: ", p), err) }
  if err := oprot.WriteString(string(p.NotificationSoundMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationSoundMessage (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:notificationSoundMessage: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationSoundGroup", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:notificationSoundGroup: ", p), err) }
  if err := oprot.WriteString(string(p.NotificationSoundGroup)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationSoundGroup (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:notificationSoundGroup: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationDisabledWithSub", thrift.BOOL, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:notificationDisabledWithSub: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationDisabledWithSub)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabledWithSub (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:notificationDisabledWithSub: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacySyncContacts", thrift.BOOL, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:privacySyncContacts: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacySyncContacts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySyncContacts (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:privacySyncContacts: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacySearchByPhoneNumber", thrift.BOOL, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:privacySearchByPhoneNumber: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacySearchByPhoneNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySearchByPhoneNumber (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:privacySearchByPhoneNumber: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacySearchByUserid", thrift.BOOL, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:privacySearchByUserid: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacySearchByUserid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySearchByUserid (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:privacySearchByUserid: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacySearchByEmail", thrift.BOOL, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:privacySearchByEmail: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacySearchByEmail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySearchByEmail (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:privacySearchByEmail: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAllowSecondaryDeviceLogin", thrift.BOOL, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:privacyAllowSecondaryDeviceLogin: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyAllowSecondaryDeviceLogin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowSecondaryDeviceLogin (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:privacyAllowSecondaryDeviceLogin: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyProfileImagePostToMyhome", thrift.BOOL, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:privacyProfileImagePostToMyhome: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyProfileImagePostToMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyProfileImagePostToMyhome (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:privacyProfileImagePostToMyhome: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyReceiveMessagesFromNotFriend", thrift.BOOL, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:privacyReceiveMessagesFromNotFriend: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyReceiveMessagesFromNotFriend)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyReceiveMessagesFromNotFriend (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:privacyReceiveMessagesFromNotFriend: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField27(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAgreeUseLineCoinToPaidCall", thrift.BOOL, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:privacyAgreeUseLineCoinToPaidCall: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyAgreeUseLineCoinToPaidCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgreeUseLineCoinToPaidCall (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:privacyAgreeUseLineCoinToPaidCall: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField28(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAgreeUsePaidCall", thrift.BOOL, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:privacyAgreeUsePaidCall: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyAgreeUsePaidCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgreeUsePaidCall (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:privacyAgreeUsePaidCall: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField29(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAllowFriendRequest", thrift.BOOL, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:privacyAllowFriendRequest: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyAllowFriendRequest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowFriendRequest (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:privacyAllowFriendRequest: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField30(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contactMyTicket", thrift.STRING, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:contactMyTicket: ", p), err) }
  if err := oprot.WriteString(string(p.ContactMyTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactMyTicket (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:contactMyTicket: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField40(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identityProvider", thrift.I32, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:identityProvider: ", p), err) }
  if err := oprot.WriteI32(int32(p.IdentityProvider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityProvider (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:identityProvider: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField41(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identityIdentifier", thrift.STRING, 41); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:identityIdentifier: ", p), err) }
  if err := oprot.WriteString(string(p.IdentityIdentifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityIdentifier (41) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 41:identityIdentifier: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField42(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("snsAccounts", thrift.MAP, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:snsAccounts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.SnsAccounts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.SnsAccounts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:snsAccounts: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField43(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phoneRegistration", thrift.BOOL, 43); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:phoneRegistration: ", p), err) }
  if err := oprot.WriteBool(bool(p.PhoneRegistration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneRegistration (43) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 43:phoneRegistration: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField44(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("emailConfirmationStatus", thrift.I32, 44); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:emailConfirmationStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.EmailConfirmationStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.emailConfirmationStatus (44) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 44:emailConfirmationStatus: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField45(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountMigrationPincodeType", thrift.I32, 45); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:accountMigrationPincodeType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AccountMigrationPincodeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationPincodeType (45) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 45:accountMigrationPincodeType: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField46(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("enforcedInputAccountMigrationPincode", thrift.BOOL, 46); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:enforcedInputAccountMigrationPincode: ", p), err) }
  if err := oprot.WriteBool(bool(p.EnforcedInputAccountMigrationPincode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enforcedInputAccountMigrationPincode (46) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 46:enforcedInputAccountMigrationPincode: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField47(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("securityCenterSettingsType", thrift.I32, 47); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:securityCenterSettingsType: ", p), err) }
  if err := oprot.WriteI32(int32(p.SecurityCenterSettingsType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.securityCenterSettingsType (47) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 47:securityCenterSettingsType: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField48(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allowUnregistrationSecondaryDevice", thrift.BOOL, 48); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 48:allowUnregistrationSecondaryDevice: ", p), err) }
  if err := oprot.WriteBool(bool(p.AllowUnregistrationSecondaryDevice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowUnregistrationSecondaryDevice (48) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 48:allowUnregistrationSecondaryDevice: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField50(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("preferenceLocale", thrift.STRING, 50); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:preferenceLocale: ", p), err) }
  if err := oprot.WriteString(string(p.PreferenceLocale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preferenceLocale (50) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 50:preferenceLocale: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField60(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("customModes", thrift.MAP, 60); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:customModes: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.CustomModes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.CustomModes {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 60:customModes: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField61(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("e2eeEnable", thrift.BOOL, 61); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 61:e2eeEnable: ", p), err) }
  if err := oprot.WriteBool(bool(p.E2eeEnable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.e2eeEnable (61) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 61:e2eeEnable: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField62(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hitokotoBackupRequested", thrift.BOOL, 62); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 62:hitokotoBackupRequested: ", p), err) }
  if err := oprot.WriteBool(bool(p.HitokotoBackupRequested)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hitokotoBackupRequested (62) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 62:hitokotoBackupRequested: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField63(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyProfileMusicPostToMyhome", thrift.BOOL, 63); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 63:privacyProfileMusicPostToMyhome: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyProfileMusicPostToMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyProfileMusicPostToMyhome (63) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 63:privacyProfileMusicPostToMyhome: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField65(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAllowNearby", thrift.BOOL, 65); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 65:privacyAllowNearby: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyAllowNearby)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowNearby (65) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 65:privacyAllowNearby: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField66(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementNearbyTime", thrift.I64, 66); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 66:agreementNearbyTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementNearbyTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementNearbyTime (66) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 66:agreementNearbyTime: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField67(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementSquareTime", thrift.I64, 67); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 67:agreementSquareTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementSquareTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementSquareTime (67) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 67:agreementSquareTime: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField68(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationMention", thrift.BOOL, 68); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 68:notificationMention: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationMention)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationMention (68) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 68:notificationMention: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField69(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("botUseAgreementAcceptedAt", thrift.I64, 69); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 69:botUseAgreementAcceptedAt: ", p), err) }
  if err := oprot.WriteI64(int64(p.BotUseAgreementAcceptedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.botUseAgreementAcceptedAt (69) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 69:botUseAgreementAcceptedAt: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField70(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementShakeFunction", thrift.I64, 70); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 70:agreementShakeFunction: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementShakeFunction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementShakeFunction (70) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 70:agreementShakeFunction: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField71(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementMobileContactName", thrift.I64, 71); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 71:agreementMobileContactName: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementMobileContactName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementMobileContactName (71) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 71:agreementMobileContactName: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField72(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationThumbnail", thrift.BOOL, 72); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 72:notificationThumbnail: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationThumbnail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationThumbnail (72) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 72:notificationThumbnail: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField73(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementSoundToText", thrift.I64, 73); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 73:agreementSoundToText: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementSoundToText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementSoundToText (73) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 73:agreementSoundToText: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField74(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyPolicyVersion", thrift.STRING, 74); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 74:privacyPolicyVersion: ", p), err) }
  if err := oprot.WriteString(string(p.PrivacyPolicyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyPolicyVersion (74) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 74:privacyPolicyVersion: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField75(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementAdByWebAccess", thrift.I64, 75); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 75:agreementAdByWebAccess: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementAdByWebAccess)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementAdByWebAccess (75) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 75:agreementAdByWebAccess: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField76(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementPhoneNumberMatching", thrift.I64, 76); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 76:agreementPhoneNumberMatching: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementPhoneNumberMatching)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementPhoneNumberMatching (76) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 76:agreementPhoneNumberMatching: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField77(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementCommunicationInfo", thrift.I64, 77); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 77:agreementCommunicationInfo: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementCommunicationInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementCommunicationInfo (77) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 77:agreementCommunicationInfo: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField78(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacySharePersonalInfoToFriends", thrift.I32, 78); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 78:privacySharePersonalInfoToFriends: ", p), err) }
  if err := oprot.WriteI32(int32(p.PrivacySharePersonalInfoToFriends)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySharePersonalInfoToFriends (78) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 78:privacySharePersonalInfoToFriends: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField79(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementThingsWirelessCommunication", thrift.I64, 79); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 79:agreementThingsWirelessCommunication: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementThingsWirelessCommunication)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementThingsWirelessCommunication (79) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 79:agreementThingsWirelessCommunication: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField80(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementGdpr", thrift.I64, 80); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 80:agreementGdpr: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementGdpr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementGdpr (80) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 80:agreementGdpr: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField81(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyStatusMessageHistory", thrift.I32, 81); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 81:privacyStatusMessageHistory: ", p), err) }
  if err := oprot.WriteI32(int32(p.PrivacyStatusMessageHistory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyStatusMessageHistory (81) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 81:privacyStatusMessageHistory: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField82(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementProvideLocation", thrift.I64, 82); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 82:agreementProvideLocation: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementProvideLocation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementProvideLocation (82) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 82:agreementProvideLocation: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField83(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementBeacon", thrift.I64, 83); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 83:agreementBeacon: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementBeacon)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementBeacon (83) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 83:agreementBeacon: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField85(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAllowProfileHistory", thrift.I32, 85); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 85:privacyAllowProfileHistory: ", p), err) }
  if err := oprot.WriteI32(int32(p.PrivacyAllowProfileHistory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowProfileHistory (85) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 85:privacyAllowProfileHistory: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField86(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementContentsSuggest", thrift.I64, 86); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 86:agreementContentsSuggest: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementContentsSuggest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementContentsSuggest (86) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 86:agreementContentsSuggest: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField87(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementContentsSuggestDataCollection", thrift.I64, 87); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 87:agreementContentsSuggestDataCollection: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementContentsSuggestDataCollection)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementContentsSuggestDataCollection (87) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 87:agreementContentsSuggestDataCollection: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField88(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAgeResult", thrift.I32, 88); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 88:privacyAgeResult: ", p), err) }
  if err := oprot.WriteI32(int32(p.PrivacyAgeResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgeResult (88) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 88:privacyAgeResult: ", p), err) }
  return err
}

func (p *SettingsStruct) writeField89(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAgeResultReceived", thrift.BOOL, 89); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 89:privacyAgeResultReceived: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyAgeResultReceived)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgeResultReceived (89) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 89:privacyAgeResultReceived: ", p), err) }
  return err
}

func (p *SettingsStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SettingsStruct(%+v)", *p)
}

// Attributes:
//  - Code
//  - AlertMessage
//  - WebAuthDetails
type AuthException struct {
  Code AuthEnum `thrift:"code,1" db:"code" json:"code"`
  AlertMessage string `thrift:"alertMessage,2" db:"alertMessage" json:"alertMessage"`
  // unused fields # 3 to 10
  WebAuthDetails *WebAuthStuct `thrift:"webAuthDetails,11" db:"webAuthDetails" json:"webAuthDetails"`
}

func NewAuthException() *AuthException {
  return &AuthException{}
}


func (p *AuthException) GetCode() AuthEnum {
  return p.Code
}

func (p *AuthException) GetAlertMessage() string {
  return p.AlertMessage
}
var AuthException_WebAuthDetails_DEFAULT *WebAuthStuct
func (p *AuthException) GetWebAuthDetails() *WebAuthStuct {
  if !p.IsSetWebAuthDetails() {
    return AuthException_WebAuthDetails_DEFAULT
  }
return p.WebAuthDetails
}
func (p *AuthException) IsSetWebAuthDetails() bool {
  return p.WebAuthDetails != nil
}

func (p *AuthException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := AuthEnum(v)
  p.Code = temp
}
  return nil
}

func (p *AuthException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AlertMessage = v
}
  return nil
}

func (p *AuthException)  ReadField11(iprot thrift.TProtocol) error {
  p.WebAuthDetails = &WebAuthStuct{}
  if err := p.WebAuthDetails.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WebAuthDetails), err)
  }
  return nil
}

func (p *AuthException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AuthException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *AuthException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("alertMessage", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:alertMessage: ", p), err) }
  if err := oprot.WriteString(string(p.AlertMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.alertMessage (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:alertMessage: ", p), err) }
  return err
}

func (p *AuthException) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("webAuthDetails", thrift.STRUCT, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:webAuthDetails: ", p), err) }
  if err := p.WebAuthDetails.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WebAuthDetails), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:webAuthDetails: ", p), err) }
  return err
}

func (p *AuthException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthException(%+v)", *p)
}

func (p *AuthException) Error() string {
  return p.String()
}

// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type ChannelException struct {
  Code ChannelEnum `thrift:"code,1" db:"code" json:"code"`
  Reason string `thrift:"reason,2" db:"reason" json:"reason"`
  ParameterMap map[string]string `thrift:"parameterMap,3" db:"parameterMap" json:"parameterMap"`
}

func NewChannelException() *ChannelException {
  return &ChannelException{}
}


func (p *ChannelException) GetCode() ChannelEnum {
  return p.Code
}

func (p *ChannelException) GetReason() string {
  return p.Reason
}

func (p *ChannelException) GetParameterMap() map[string]string {
  return p.ParameterMap
}
func (p *ChannelException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChannelException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ChannelEnum(v)
  p.Code = temp
}
  return nil
}

func (p *ChannelException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *ChannelException)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ParameterMap =  tMap
  for i := 0; i < size; i ++ {
var _key39 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key39 = v
}
var _val40 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val40 = v
}
    p.ParameterMap[_key39] = _val40
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ChannelException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChannelException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChannelException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ChannelException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reason", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err) }
  if err := oprot.WriteString(string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err) }
  return err
}

func (p *ChannelException) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parameterMap", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParameterMap {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err) }
  return err
}

func (p *ChannelException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChannelException(%+v)", *p)
}

func (p *ChannelException) Error() string {
  return p.String()
}

// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type TalkException struct {
  Code TalkEnum `thrift:"code,1" db:"code" json:"code"`
  Reason string `thrift:"reason,2" db:"reason" json:"reason"`
  // unused fields # 3 to 10
  ParameterMap map[string]string `thrift:"parameterMap,11" db:"parameterMap" json:"parameterMap"`
}

func NewTalkException() *TalkException {
  return &TalkException{}
}


func (p *TalkException) GetCode() TalkEnum {
  return p.Code
}

func (p *TalkException) GetReason() string {
  return p.Reason
}

func (p *TalkException) GetParameterMap() map[string]string {
  return p.ParameterMap
}
func (p *TalkException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TalkEnum(v)
  p.Code = temp
}
  return nil
}

func (p *TalkException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *TalkException)  ReadField11(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ParameterMap =  tMap
  for i := 0; i < size; i ++ {
var _key41 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key41 = v
}
var _val42 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val42 = v
}
    p.ParameterMap[_key41] = _val42
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TalkException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TalkException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reason", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err) }
  if err := oprot.WriteString(string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err) }
  return err
}

func (p *TalkException) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parameterMap", thrift.MAP, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:parameterMap: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParameterMap {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:parameterMap: ", p), err) }
  return err
}

func (p *TalkException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkException(%+v)", *p)
}

func (p *TalkException) Error() string {
  return p.String()
}

// Attributes:
//  - Code
//  - Message
type LiffException struct {
  Code LiffEnum `thrift:"code,1" db:"code" json:"code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewLiffException() *LiffException {
  return &LiffException{}
}


func (p *LiffException) GetCode() LiffEnum {
  return p.Code
}

func (p *LiffException) GetMessage() string {
  return p.Message
}
func (p *LiffException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LiffException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := LiffEnum(v)
  p.Code = temp
}
  return nil
}

func (p *LiffException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *LiffException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LiffException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LiffException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *LiffException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *LiffException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LiffException(%+v)", *p)
}

func (p *LiffException) Error() string {
  return p.String()
}

// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type ShopExecption struct {
  Code ShopEnum `thrift:"code,1" db:"code" json:"code"`
  Reason string `thrift:"reason,2" db:"reason" json:"reason"`
  ParameterMap map[string]string `thrift:"parameterMap,3" db:"parameterMap" json:"parameterMap"`
}

func NewShopExecption() *ShopExecption {
  return &ShopExecption{}
}


func (p *ShopExecption) GetCode() ShopEnum {
  return p.Code
}

func (p *ShopExecption) GetReason() string {
  return p.Reason
}

func (p *ShopExecption) GetParameterMap() map[string]string {
  return p.ParameterMap
}
func (p *ShopExecption) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShopExecption)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ShopEnum(v)
  p.Code = temp
}
  return nil
}

func (p *ShopExecption)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *ShopExecption)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ParameterMap =  tMap
  for i := 0; i < size; i ++ {
var _key43 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key43 = v
}
var _val44 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val44 = v
}
    p.ParameterMap[_key43] = _val44
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ShopExecption) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ShopExecption"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShopExecption) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ShopExecption) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reason", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err) }
  if err := oprot.WriteString(string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err) }
  return err
}

func (p *ShopExecption) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parameterMap", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParameterMap {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err) }
  return err
}

func (p *ShopExecption) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShopExecption(%+v)", *p)
}

func (p *ShopExecption) Error() string {
  return p.String()
}

type BoteaterService interface {
  // Parameters:
  //  - Seq
  //  - Message
  SendMessage(ctx context.Context, seq int32, message *MessageStruct) (r *MessageStruct, err error)
  // Parameters:
  //  - Seq
  //  - ChatMid
  //  - LastMessageId
  SendChatChecked(ctx context.Context, seq int32, chatMid string, lastMessageId string) (err error)
  // Parameters:
  //  - Seq
  //  - LastMessageId
  RemoveAllMessages(ctx context.Context, seq int32, lastMessageId string) (err error)
  // Parameters:
  //  - Seq
  //  - ChatMid
  //  - LastMessageId
  //  - SessionId
  SendChatRemoved(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int64) (err error)
  // Parameters:
  //  - GroupId
  GetGroupWithoutMembers(ctx context.Context, groupId string) (r *GroupStruct, err error)
  // Parameters:
  //  - GroupId
  GetGroupsV2(ctx context.Context, groupId string) (r *GroupStruct, err error)
  // Parameters:
  //  - GroupId
  GetGroup(ctx context.Context, groupId string) (r *GroupStruct, err error)
  // Parameters:
  //  - Seq
  //  - Name
  //  - ContactIds
  CreateGroupV2(ctx context.Context, seq int32, name string, contactIds []string) (r *GroupStruct, err error)
  // Parameters:
  //  - GroupId
  GetCompactGroup(ctx context.Context, groupId string) (r *GroupStruct, err error)
  GetGroupIdsInvited(ctx context.Context) (r []string, err error)
  GetGroupIdsJoined(ctx context.Context) (r []string, err error)
  // Parameters:
  //  - ChatMid
  GetGroupCall(ctx context.Context, chatMid string) (r *GroupCallStruct, err error)
  // Parameters:
  //  - ChatMid
  //  - MediaType
  //  - IsInitialHost
  //  - Capabilities
  AcquireGroupCallRoute(ctx context.Context, chatMid string, mediaType GroupCallMediaTypeEnum, isInitialHost bool, capabilities []string) (r *GroupCallRouteStruct, err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupId
  //  - ContactIds
  InviteIntoGroup(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupMid
  //  - TicketId
  AcceptGroupInvitationByTicket(ctx context.Context, reqSeq int32, groupMid string, ticketId string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupId
  RejectGroupInvitation(ctx context.Context, reqSeq int32, groupId string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupId
  AcceptGroupInvitation(ctx context.Context, reqSeq int32, groupId string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupId
  //  - ContactIds
  CancelGroupInvitation(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (err error)
  // Parameters:
  //  - TicketId
  FindGroupByTicket(ctx context.Context, ticketId string) (r *GroupStruct, err error)
  // Parameters:
  //  - GroupMid
  ReissueGroupTicket(ctx context.Context, groupMid string) (r string, err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupId
  //  - ContactIds
  KickoutFromGroup(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (err error)
  // Parameters:
  //  - ChatMid
  //  - MemberMids
  //  - MediaType
  InviteIntoGroupCall(ctx context.Context, chatMid string, memberMids []string, mediaType GroupCallMediaTypeEnum) (err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupMid
  //  - UpdatedAttrs
  UpdateGroupPreferenceAttribute(ctx context.Context, reqSeq int32, groupMid string, updatedAttrs map[GroupPreferenceAttributeEnum]string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - Group
  UpdateGroup(ctx context.Context, reqSeq int32, group *GroupStruct) (err error)
  // Parameters:
  //  - ReqSeq
  //  - GroupId
  LeaveGroup(ctx context.Context, reqSeq int32, groupId string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - Mid
  //  - Type
  //  - Reference
  FindAndAddContactsByMid(ctx context.Context, reqSeq int32, mid string, type_a1 ContactTypeEnum, reference string) (r map[string]*ContactStruct, err error)
  // Parameters:
  //  - ReqSeq
  //  - SearchId
  FindAndAddContactsByUserid(ctx context.Context, reqSeq int32, searchId string) (r map[string]*ContactStruct, err error)
  // Parameters:
  //  - ReqSeq
  //  - Phones
  FindAndAddContactsByPhone(ctx context.Context, reqSeq int32, phones []string) (r map[string]*ContactStruct, err error)
  // Parameters:
  //  - ID
  GetContact(ctx context.Context, id string) (r *ContactStruct, err error)
  // Parameters:
  //  - ReqSeq
  //  - Mid
  //  - Flag
  //  - Value
  UpdateContactSetting(ctx context.Context, reqSeq int32, mid string, flag ContactSettingEnum, value string) (err error)
  GetAllContactIds(ctx context.Context) (r []string, err error)
  GetProfile(ctx context.Context) (r *ProfileStruct, err error)
  // Parameters:
  //  - ReqSeq
  //  - Attr
  //  - Value
  UpdateProfileAttribute(ctx context.Context, reqSeq int32, attr ProfileAttributeEnum, value string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - Profile
  UpdateProfile(ctx context.Context, reqSeq int32, profile *ProfileStruct) (err error)
  GetBlockedContactIds(ctx context.Context) (r []string, err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  //  - Reference
  UnblockContact(ctx context.Context, reqSeq int32, id string, reference string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  BlockContact(ctx context.Context, reqSeq int32, id string) (err error)
  GetSettings(ctx context.Context) (r *SettingsStruct, err error)
  // Parameters:
  //  - LocalRev
  //  - Count
  //  - GlobalRev
  //  - IndividualRev
  FetchOps(ctx context.Context, localRev int64, count int32, globalRev int64, individualRev int64) (r []*OperationStruct, err error)
  GetLastOpRevision(ctx context.Context) (r int64, err error)
  // Parameters:
  //  - ChannelId
  IssueChannelToken(ctx context.Context, channelId string) (r *ChannelTokenStruct, err error)
  // Parameters:
  //  - ChannelId
  //  - Locale
  GetChannelInfo(ctx context.Context, channelId string, locale string) (r *ChannelInfoStruct, err error)
  // Parameters:
  //  - Request
  IssueLiffView(ctx context.Context, request *LiffViewRequestStruct) (r *LiffViewStruct, err error)
  // Parameters:
  //  - Direction
  //  - LastSeenSeqId
  GetFriendRequests(ctx context.Context, direction FriendDirectionEnum, lastSeenSeqId int64) (r []*FriendRequestStruct, err error)
  // Parameters:
  //  - Direction
  //  - MidOrEMid
  RemoveFriendRequest(ctx context.Context, direction FriendDirectionEnum, midOrEMid string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - Attr
  //  - Value
  UpdateSettingsAttribute(ctx context.Context, reqSeq int32, attr SettingsAttributeEnum, value string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - AttributesToUpdate
  //  - Settings
  UpdateSettingsAttributes2(ctx context.Context, reqSeq int32, attributesToUpdate []string, settings *SettingsStruct) (r []SettingsAttributes2Enum, err error)
  // Parameters:
  //  - AttributesToRetrieve
  GetSettingsAttributes2(ctx context.Context, attributesToRetrieve []SettingsAttributes2Enum) (r *SettingsStruct, err error)
  // Parameters:
  //  - AttrBitset
  GetSettingsAttributes(ctx context.Context, attrBitset int32) (r *SettingsStruct, err error)
  // Parameters:
  //  - Request
  GetProductV2(ctx context.Context, request *GetProductRequestStruct) (r *GetProductStructV2, err error)
  // Parameters:
  //  - ShopId
  //  - ProductId
  //  - Locale
  GetProduct(ctx context.Context, shopId string, productId string, locale *LocaleStruct) (r *GetProductStruct, err error)
  // Parameters:
  //  - PurchaseOrder
  PlacePurchaseOrderForFreeProduct(ctx context.Context, purchaseOrder *PurchaseOrderStruct) (r *PurchaseOrderResponseStruct, err error)
  // Parameters:
  //  - PurchaseOrder
  PlacePurchaseOrderWithLineCoin(ctx context.Context, purchaseOrder *PurchaseOrderStruct) (r *PurchaseOrderResponseStruct, err error)
  // Parameters:
  //  - ShowcaseRequest
  GetShowcaseV3(ctx context.Context, showcaseRequest *ShowcaseRequestStruct) (r *ShowcaseV3Response, err error)
  // Parameters:
  //  - KeepLoggedIn
  //  - SystemName
  //  - ReturnCallbackUrl
  GetAuthQrcode(ctx context.Context, keepLoggedIn bool, systemName string, returnCallbackUrl bool) (r *AuthQrcodeStruct, err error)
  // Parameters:
  //  - LoginRequest
  LoginZ(ctx context.Context, loginRequest *LoginRequestStruct) (r *LoginResultStruct, err error)
  // Parameters:
  //  - FeatureType
  AcquireEncryptedAccessToken(ctx context.Context, featureType FeatureTypeEnum) (r string, err error)
  // Parameters:
  //  - ExpirationTime
  //  - MaxUseCount
  GenerateUserTicket(ctx context.Context, expirationTime int64, maxUseCount int32) (r *TicketStruct, err error)
  // Parameters:
  //  - Seq
  //  - MessageId
  UnsendMessage(ctx context.Context, seq int32, messageId string) (err error)
  // Parameters:
  //  - SyncOpRevision
  //  - Category
  //  - Report
  Report(ctx context.Context, syncOpRevision int64, category CategoryEnum, report string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - ContactIds
  CreateRoomV2(ctx context.Context, reqSeq int32, contactIds []string) (r *RoomStruct, err error)
  // Parameters:
  //  - RoomIds
  GetRoomsV2(ctx context.Context, roomIds []string) (r []*RoomStruct, err error)
  // Parameters:
  //  - ReqSeq
  //  - RoomId
  //  - ContactIds
  InviteIntoRoom(ctx context.Context, reqSeq int32, roomId string, contactIds []string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - RoomId
  LeaveRoom(ctx context.Context, reqSeq int32, roomId string) (err error)
}

type BoteaterServiceClient struct {
  c thrift.TClient
}

func NewBoteaterServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BoteaterServiceClient {
  return &BoteaterServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBoteaterServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BoteaterServiceClient {
  return &BoteaterServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBoteaterServiceClient(c thrift.TClient) *BoteaterServiceClient {
  return &BoteaterServiceClient{
    c: c,
  }
}

func (p *BoteaterServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Seq
//  - Message
func (p *BoteaterServiceClient) SendMessage(ctx context.Context, seq int32, message *MessageStruct) (r *MessageStruct, err error) {
  var _args45 BoteaterServiceSendMessageArgs
  _args45.Seq = seq
  _args45.Message = message
  var _result46 BoteaterServiceSendMessageResult
  if err = p.Client_().Call(ctx, "sendMessage", &_args45, &_result46); err != nil {
    return
  }
  switch {
  case _result46.E!= nil:
    return r, _result46.E
  }

  return _result46.GetSuccess(), nil
}

// Parameters:
//  - Seq
//  - ChatMid
//  - LastMessageId
func (p *BoteaterServiceClient) SendChatChecked(ctx context.Context, seq int32, chatMid string, lastMessageId string) (err error) {
  var _args47 BoteaterServiceSendChatCheckedArgs
  _args47.Seq = seq
  _args47.ChatMid = chatMid
  _args47.LastMessageId = lastMessageId
  var _result48 BoteaterServiceSendChatCheckedResult
  if err = p.Client_().Call(ctx, "sendChatChecked", &_args47, &_result48); err != nil {
    return
  }
  switch {
  case _result48.E!= nil:
    return _result48.E
  }

  return nil
}

// Parameters:
//  - Seq
//  - LastMessageId
func (p *BoteaterServiceClient) RemoveAllMessages(ctx context.Context, seq int32, lastMessageId string) (err error) {
  var _args49 BoteaterServiceRemoveAllMessagesArgs
  _args49.Seq = seq
  _args49.LastMessageId = lastMessageId
  var _result50 BoteaterServiceRemoveAllMessagesResult
  if err = p.Client_().Call(ctx, "removeAllMessages", &_args49, &_result50); err != nil {
    return
  }
  switch {
  case _result50.E!= nil:
    return _result50.E
  }

  return nil
}

// Parameters:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
func (p *BoteaterServiceClient) SendChatRemoved(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int64) (err error) {
  var _args51 BoteaterServiceSendChatRemovedArgs
  _args51.Seq = seq
  _args51.ChatMid = chatMid
  _args51.LastMessageId = lastMessageId
  _args51.SessionId = sessionId
  var _result52 BoteaterServiceSendChatRemovedResult
  if err = p.Client_().Call(ctx, "sendChatRemoved", &_args51, &_result52); err != nil {
    return
  }
  switch {
  case _result52.E!= nil:
    return _result52.E
  }

  return nil
}

// Parameters:
//  - GroupId
func (p *BoteaterServiceClient) GetGroupWithoutMembers(ctx context.Context, groupId string) (r *GroupStruct, err error) {
  var _args53 BoteaterServiceGetGroupWithoutMembersArgs
  _args53.GroupId = groupId
  var _result54 BoteaterServiceGetGroupWithoutMembersResult
  if err = p.Client_().Call(ctx, "getGroupWithoutMembers", &_args53, &_result54); err != nil {
    return
  }
  switch {
  case _result54.E!= nil:
    return r, _result54.E
  }

  return _result54.GetSuccess(), nil
}

// Parameters:
//  - GroupId
func (p *BoteaterServiceClient) GetGroupsV2(ctx context.Context, groupId string) (r *GroupStruct, err error) {
  var _args55 BoteaterServiceGetGroupsV2Args
  _args55.GroupId = groupId
  var _result56 BoteaterServiceGetGroupsV2Result
  if err = p.Client_().Call(ctx, "getGroupsV2", &_args55, &_result56); err != nil {
    return
  }
  switch {
  case _result56.E!= nil:
    return r, _result56.E
  }

  return _result56.GetSuccess(), nil
}

// Parameters:
//  - GroupId
func (p *BoteaterServiceClient) GetGroup(ctx context.Context, groupId string) (r *GroupStruct, err error) {
  var _args57 BoteaterServiceGetGroupArgs
  _args57.GroupId = groupId
  var _result58 BoteaterServiceGetGroupResult
  if err = p.Client_().Call(ctx, "getGroup", &_args57, &_result58); err != nil {
    return
  }
  switch {
  case _result58.E!= nil:
    return r, _result58.E
  }

  return _result58.GetSuccess(), nil
}

// Parameters:
//  - Seq
//  - Name
//  - ContactIds
func (p *BoteaterServiceClient) CreateGroupV2(ctx context.Context, seq int32, name string, contactIds []string) (r *GroupStruct, err error) {
  var _args59 BoteaterServiceCreateGroupV2Args
  _args59.Seq = seq
  _args59.Name = name
  _args59.ContactIds = contactIds
  var _result60 BoteaterServiceCreateGroupV2Result
  if err = p.Client_().Call(ctx, "createGroupV2", &_args59, &_result60); err != nil {
    return
  }
  switch {
  case _result60.E!= nil:
    return r, _result60.E
  }

  return _result60.GetSuccess(), nil
}

// Parameters:
//  - GroupId
func (p *BoteaterServiceClient) GetCompactGroup(ctx context.Context, groupId string) (r *GroupStruct, err error) {
  var _args61 BoteaterServiceGetCompactGroupArgs
  _args61.GroupId = groupId
  var _result62 BoteaterServiceGetCompactGroupResult
  if err = p.Client_().Call(ctx, "getCompactGroup", &_args61, &_result62); err != nil {
    return
  }
  switch {
  case _result62.E!= nil:
    return r, _result62.E
  }

  return _result62.GetSuccess(), nil
}

func (p *BoteaterServiceClient) GetGroupIdsInvited(ctx context.Context) (r []string, err error) {
  var _args63 BoteaterServiceGetGroupIdsInvitedArgs
  var _result64 BoteaterServiceGetGroupIdsInvitedResult
  if err = p.Client_().Call(ctx, "getGroupIdsInvited", &_args63, &_result64); err != nil {
    return
  }
  switch {
  case _result64.E!= nil:
    return r, _result64.E
  }

  return _result64.GetSuccess(), nil
}

func (p *BoteaterServiceClient) GetGroupIdsJoined(ctx context.Context) (r []string, err error) {
  var _args65 BoteaterServiceGetGroupIdsJoinedArgs
  var _result66 BoteaterServiceGetGroupIdsJoinedResult
  if err = p.Client_().Call(ctx, "getGroupIdsJoined", &_args65, &_result66); err != nil {
    return
  }
  switch {
  case _result66.E!= nil:
    return r, _result66.E
  }

  return _result66.GetSuccess(), nil
}

// Parameters:
//  - ChatMid
func (p *BoteaterServiceClient) GetGroupCall(ctx context.Context, chatMid string) (r *GroupCallStruct, err error) {
  var _args67 BoteaterServiceGetGroupCallArgs
  _args67.ChatMid = chatMid
  var _result68 BoteaterServiceGetGroupCallResult
  if err = p.Client_().Call(ctx, "getGroupCall", &_args67, &_result68); err != nil {
    return
  }
  switch {
  case _result68.E!= nil:
    return r, _result68.E
  }

  return _result68.GetSuccess(), nil
}

// Parameters:
//  - ChatMid
//  - MediaType
//  - IsInitialHost
//  - Capabilities
func (p *BoteaterServiceClient) AcquireGroupCallRoute(ctx context.Context, chatMid string, mediaType GroupCallMediaTypeEnum, isInitialHost bool, capabilities []string) (r *GroupCallRouteStruct, err error) {
  var _args69 BoteaterServiceAcquireGroupCallRouteArgs
  _args69.ChatMid = chatMid
  _args69.MediaType = mediaType
  _args69.IsInitialHost = isInitialHost
  _args69.Capabilities = capabilities
  var _result70 BoteaterServiceAcquireGroupCallRouteResult
  if err = p.Client_().Call(ctx, "acquireGroupCallRoute", &_args69, &_result70); err != nil {
    return
  }
  switch {
  case _result70.E!= nil:
    return r, _result70.E
  }

  return _result70.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - ContactIds
func (p *BoteaterServiceClient) InviteIntoGroup(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (err error) {
  var _args71 BoteaterServiceInviteIntoGroupArgs
  _args71.ReqSeq = reqSeq
  _args71.GroupId = groupId
  _args71.ContactIds = contactIds
  var _result72 BoteaterServiceInviteIntoGroupResult
  if err = p.Client_().Call(ctx, "inviteIntoGroup", &_args71, &_result72); err != nil {
    return
  }
  switch {
  case _result72.E!= nil:
    return _result72.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - GroupMid
//  - TicketId
func (p *BoteaterServiceClient) AcceptGroupInvitationByTicket(ctx context.Context, reqSeq int32, groupMid string, ticketId string) (err error) {
  var _args73 BoteaterServiceAcceptGroupInvitationByTicketArgs
  _args73.ReqSeq = reqSeq
  _args73.GroupMid = groupMid
  _args73.TicketId = ticketId
  var _result74 BoteaterServiceAcceptGroupInvitationByTicketResult
  if err = p.Client_().Call(ctx, "acceptGroupInvitationByTicket", &_args73, &_result74); err != nil {
    return
  }
  switch {
  case _result74.E!= nil:
    return _result74.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *BoteaterServiceClient) RejectGroupInvitation(ctx context.Context, reqSeq int32, groupId string) (err error) {
  var _args75 BoteaterServiceRejectGroupInvitationArgs
  _args75.ReqSeq = reqSeq
  _args75.GroupId = groupId
  var _result76 BoteaterServiceRejectGroupInvitationResult
  if err = p.Client_().Call(ctx, "rejectGroupInvitation", &_args75, &_result76); err != nil {
    return
  }
  switch {
  case _result76.E!= nil:
    return _result76.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *BoteaterServiceClient) AcceptGroupInvitation(ctx context.Context, reqSeq int32, groupId string) (err error) {
  var _args77 BoteaterServiceAcceptGroupInvitationArgs
  _args77.ReqSeq = reqSeq
  _args77.GroupId = groupId
  var _result78 BoteaterServiceAcceptGroupInvitationResult
  if err = p.Client_().Call(ctx, "acceptGroupInvitation", &_args77, &_result78); err != nil {
    return
  }
  switch {
  case _result78.E!= nil:
    return _result78.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - ContactIds
func (p *BoteaterServiceClient) CancelGroupInvitation(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (err error) {
  var _args79 BoteaterServiceCancelGroupInvitationArgs
  _args79.ReqSeq = reqSeq
  _args79.GroupId = groupId
  _args79.ContactIds = contactIds
  var _result80 BoteaterServiceCancelGroupInvitationResult
  if err = p.Client_().Call(ctx, "cancelGroupInvitation", &_args79, &_result80); err != nil {
    return
  }
  switch {
  case _result80.E!= nil:
    return _result80.E
  }

  return nil
}

// Parameters:
//  - TicketId
func (p *BoteaterServiceClient) FindGroupByTicket(ctx context.Context, ticketId string) (r *GroupStruct, err error) {
  var _args81 BoteaterServiceFindGroupByTicketArgs
  _args81.TicketId = ticketId
  var _result82 BoteaterServiceFindGroupByTicketResult
  if err = p.Client_().Call(ctx, "findGroupByTicket", &_args81, &_result82); err != nil {
    return
  }
  switch {
  case _result82.E!= nil:
    return r, _result82.E
  }

  return _result82.GetSuccess(), nil
}

// Parameters:
//  - GroupMid
func (p *BoteaterServiceClient) ReissueGroupTicket(ctx context.Context, groupMid string) (r string, err error) {
  var _args83 BoteaterServiceReissueGroupTicketArgs
  _args83.GroupMid = groupMid
  var _result84 BoteaterServiceReissueGroupTicketResult
  if err = p.Client_().Call(ctx, "reissueGroupTicket", &_args83, &_result84); err != nil {
    return
  }
  switch {
  case _result84.E!= nil:
    return r, _result84.E
  }

  return _result84.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
//  - ContactIds
func (p *BoteaterServiceClient) KickoutFromGroup(ctx context.Context, reqSeq int32, groupId string, contactIds []string) (err error) {
  var _args85 BoteaterServiceKickoutFromGroupArgs
  _args85.ReqSeq = reqSeq
  _args85.GroupId = groupId
  _args85.ContactIds = contactIds
  var _result86 BoteaterServiceKickoutFromGroupResult
  if err = p.Client_().Call(ctx, "kickoutFromGroup", &_args85, &_result86); err != nil {
    return
  }
  switch {
  case _result86.E!= nil:
    return _result86.E
  }

  return nil
}

// Parameters:
//  - ChatMid
//  - MemberMids
//  - MediaType
func (p *BoteaterServiceClient) InviteIntoGroupCall(ctx context.Context, chatMid string, memberMids []string, mediaType GroupCallMediaTypeEnum) (err error) {
  var _args87 BoteaterServiceInviteIntoGroupCallArgs
  _args87.ChatMid = chatMid
  _args87.MemberMids = memberMids
  _args87.MediaType = mediaType
  var _result88 BoteaterServiceInviteIntoGroupCallResult
  if err = p.Client_().Call(ctx, "inviteIntoGroupCall", &_args87, &_result88); err != nil {
    return
  }
  switch {
  case _result88.E!= nil:
    return _result88.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - GroupMid
//  - UpdatedAttrs
func (p *BoteaterServiceClient) UpdateGroupPreferenceAttribute(ctx context.Context, reqSeq int32, groupMid string, updatedAttrs map[GroupPreferenceAttributeEnum]string) (err error) {
  var _args89 BoteaterServiceUpdateGroupPreferenceAttributeArgs
  _args89.ReqSeq = reqSeq
  _args89.GroupMid = groupMid
  _args89.UpdatedAttrs = updatedAttrs
  var _result90 BoteaterServiceUpdateGroupPreferenceAttributeResult
  if err = p.Client_().Call(ctx, "updateGroupPreferenceAttribute", &_args89, &_result90); err != nil {
    return
  }
  switch {
  case _result90.E!= nil:
    return _result90.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Group
func (p *BoteaterServiceClient) UpdateGroup(ctx context.Context, reqSeq int32, group *GroupStruct) (err error) {
  var _args91 BoteaterServiceUpdateGroupArgs
  _args91.ReqSeq = reqSeq
  _args91.Group = group
  var _result92 BoteaterServiceUpdateGroupResult
  if err = p.Client_().Call(ctx, "updateGroup", &_args91, &_result92); err != nil {
    return
  }
  switch {
  case _result92.E!= nil:
    return _result92.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - GroupId
func (p *BoteaterServiceClient) LeaveGroup(ctx context.Context, reqSeq int32, groupId string) (err error) {
  var _args93 BoteaterServiceLeaveGroupArgs
  _args93.ReqSeq = reqSeq
  _args93.GroupId = groupId
  var _result94 BoteaterServiceLeaveGroupResult
  if err = p.Client_().Call(ctx, "leaveGroup", &_args93, &_result94); err != nil {
    return
  }
  switch {
  case _result94.E!= nil:
    return _result94.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Mid
//  - Type
//  - Reference
func (p *BoteaterServiceClient) FindAndAddContactsByMid(ctx context.Context, reqSeq int32, mid string, type_a1 ContactTypeEnum, reference string) (r map[string]*ContactStruct, err error) {
  var _args95 BoteaterServiceFindAndAddContactsByMidArgs
  _args95.ReqSeq = reqSeq
  _args95.Mid = mid
  _args95.Type = type_a1
  _args95.Reference = reference
  var _result96 BoteaterServiceFindAndAddContactsByMidResult
  if err = p.Client_().Call(ctx, "findAndAddContactsByMid", &_args95, &_result96); err != nil {
    return
  }
  switch {
  case _result96.E!= nil:
    return r, _result96.E
  }

  return _result96.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - SearchId
func (p *BoteaterServiceClient) FindAndAddContactsByUserid(ctx context.Context, reqSeq int32, searchId string) (r map[string]*ContactStruct, err error) {
  var _args97 BoteaterServiceFindAndAddContactsByUseridArgs
  _args97.ReqSeq = reqSeq
  _args97.SearchId = searchId
  var _result98 BoteaterServiceFindAndAddContactsByUseridResult
  if err = p.Client_().Call(ctx, "findAndAddContactsByUserid", &_args97, &_result98); err != nil {
    return
  }
  switch {
  case _result98.E!= nil:
    return r, _result98.E
  }

  return _result98.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Phones
func (p *BoteaterServiceClient) FindAndAddContactsByPhone(ctx context.Context, reqSeq int32, phones []string) (r map[string]*ContactStruct, err error) {
  var _args99 BoteaterServiceFindAndAddContactsByPhoneArgs
  _args99.ReqSeq = reqSeq
  _args99.Phones = phones
  var _result100 BoteaterServiceFindAndAddContactsByPhoneResult
  if err = p.Client_().Call(ctx, "findAndAddContactsByPhone", &_args99, &_result100); err != nil {
    return
  }
  switch {
  case _result100.E!= nil:
    return r, _result100.E
  }

  return _result100.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *BoteaterServiceClient) GetContact(ctx context.Context, id string) (r *ContactStruct, err error) {
  var _args101 BoteaterServiceGetContactArgs
  _args101.ID = id
  var _result102 BoteaterServiceGetContactResult
  if err = p.Client_().Call(ctx, "getContact", &_args101, &_result102); err != nil {
    return
  }
  switch {
  case _result102.E!= nil:
    return r, _result102.E
  }

  return _result102.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Mid
//  - Flag
//  - Value
func (p *BoteaterServiceClient) UpdateContactSetting(ctx context.Context, reqSeq int32, mid string, flag ContactSettingEnum, value string) (err error) {
  var _args103 BoteaterServiceUpdateContactSettingArgs
  _args103.ReqSeq = reqSeq
  _args103.Mid = mid
  _args103.Flag = flag
  _args103.Value = value
  var _result104 BoteaterServiceUpdateContactSettingResult
  if err = p.Client_().Call(ctx, "updateContactSetting", &_args103, &_result104); err != nil {
    return
  }
  switch {
  case _result104.E!= nil:
    return _result104.E
  }

  return nil
}

func (p *BoteaterServiceClient) GetAllContactIds(ctx context.Context) (r []string, err error) {
  var _args105 BoteaterServiceGetAllContactIdsArgs
  var _result106 BoteaterServiceGetAllContactIdsResult
  if err = p.Client_().Call(ctx, "getAllContactIds", &_args105, &_result106); err != nil {
    return
  }
  switch {
  case _result106.E!= nil:
    return r, _result106.E
  }

  return _result106.GetSuccess(), nil
}

func (p *BoteaterServiceClient) GetProfile(ctx context.Context) (r *ProfileStruct, err error) {
  var _args107 BoteaterServiceGetProfileArgs
  var _result108 BoteaterServiceGetProfileResult
  if err = p.Client_().Call(ctx, "getProfile", &_args107, &_result108); err != nil {
    return
  }
  switch {
  case _result108.E!= nil:
    return r, _result108.E
  }

  return _result108.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Attr
//  - Value
func (p *BoteaterServiceClient) UpdateProfileAttribute(ctx context.Context, reqSeq int32, attr ProfileAttributeEnum, value string) (err error) {
  var _args109 BoteaterServiceUpdateProfileAttributeArgs
  _args109.ReqSeq = reqSeq
  _args109.Attr = attr
  _args109.Value = value
  var _result110 BoteaterServiceUpdateProfileAttributeResult
  if err = p.Client_().Call(ctx, "updateProfileAttribute", &_args109, &_result110); err != nil {
    return
  }
  switch {
  case _result110.E!= nil:
    return _result110.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Profile
func (p *BoteaterServiceClient) UpdateProfile(ctx context.Context, reqSeq int32, profile *ProfileStruct) (err error) {
  var _args111 BoteaterServiceUpdateProfileArgs
  _args111.ReqSeq = reqSeq
  _args111.Profile = profile
  var _result112 BoteaterServiceUpdateProfileResult
  if err = p.Client_().Call(ctx, "updateProfile", &_args111, &_result112); err != nil {
    return
  }
  switch {
  case _result112.E!= nil:
    return _result112.E
  }

  return nil
}

func (p *BoteaterServiceClient) GetBlockedContactIds(ctx context.Context) (r []string, err error) {
  var _args113 BoteaterServiceGetBlockedContactIdsArgs
  var _result114 BoteaterServiceGetBlockedContactIdsResult
  if err = p.Client_().Call(ctx, "getBlockedContactIds", &_args113, &_result114); err != nil {
    return
  }
  switch {
  case _result114.E!= nil:
    return r, _result114.E
  }

  return _result114.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - ID
//  - Reference
func (p *BoteaterServiceClient) UnblockContact(ctx context.Context, reqSeq int32, id string, reference string) (err error) {
  var _args115 BoteaterServiceUnblockContactArgs
  _args115.ReqSeq = reqSeq
  _args115.ID = id
  _args115.Reference = reference
  var _result116 BoteaterServiceUnblockContactResult
  if err = p.Client_().Call(ctx, "unblockContact", &_args115, &_result116); err != nil {
    return
  }
  switch {
  case _result116.E!= nil:
    return _result116.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *BoteaterServiceClient) BlockContact(ctx context.Context, reqSeq int32, id string) (err error) {
  var _args117 BoteaterServiceBlockContactArgs
  _args117.ReqSeq = reqSeq
  _args117.ID = id
  var _result118 BoteaterServiceBlockContactResult
  if err = p.Client_().Call(ctx, "blockContact", &_args117, &_result118); err != nil {
    return
  }
  switch {
  case _result118.E!= nil:
    return _result118.E
  }

  return nil
}

func (p *BoteaterServiceClient) GetSettings(ctx context.Context) (r *SettingsStruct, err error) {
  var _args119 BoteaterServiceGetSettingsArgs
  var _result120 BoteaterServiceGetSettingsResult
  if err = p.Client_().Call(ctx, "getSettings", &_args119, &_result120); err != nil {
    return
  }
  switch {
  case _result120.E!= nil:
    return r, _result120.E
  }

  return _result120.GetSuccess(), nil
}

// Parameters:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
func (p *BoteaterServiceClient) FetchOps(ctx context.Context, localRev int64, count int32, globalRev int64, individualRev int64) (r []*OperationStruct, err error) {
  var _args121 BoteaterServiceFetchOpsArgs
  _args121.LocalRev = localRev
  _args121.Count = count
  _args121.GlobalRev = globalRev
  _args121.IndividualRev = individualRev
  var _result122 BoteaterServiceFetchOpsResult
  if err = p.Client_().Call(ctx, "fetchOps", &_args121, &_result122); err != nil {
    return
  }
  switch {
  case _result122.E!= nil:
    return r, _result122.E
  }

  return _result122.GetSuccess(), nil
}

func (p *BoteaterServiceClient) GetLastOpRevision(ctx context.Context) (r int64, err error) {
  var _args123 BoteaterServiceGetLastOpRevisionArgs
  var _result124 BoteaterServiceGetLastOpRevisionResult
  if err = p.Client_().Call(ctx, "getLastOpRevision", &_args123, &_result124); err != nil {
    return
  }
  switch {
  case _result124.E!= nil:
    return r, _result124.E
  }

  return _result124.GetSuccess(), nil
}

// Parameters:
//  - ChannelId
func (p *BoteaterServiceClient) IssueChannelToken(ctx context.Context, channelId string) (r *ChannelTokenStruct, err error) {
  var _args125 BoteaterServiceIssueChannelTokenArgs
  _args125.ChannelId = channelId
  var _result126 BoteaterServiceIssueChannelTokenResult
  if err = p.Client_().Call(ctx, "issueChannelToken", &_args125, &_result126); err != nil {
    return
  }
  switch {
  case _result126.E!= nil:
    return r, _result126.E
  }

  return _result126.GetSuccess(), nil
}

// Parameters:
//  - ChannelId
//  - Locale
func (p *BoteaterServiceClient) GetChannelInfo(ctx context.Context, channelId string, locale string) (r *ChannelInfoStruct, err error) {
  var _args127 BoteaterServiceGetChannelInfoArgs
  _args127.ChannelId = channelId
  _args127.Locale = locale
  var _result128 BoteaterServiceGetChannelInfoResult
  if err = p.Client_().Call(ctx, "getChannelInfo", &_args127, &_result128); err != nil {
    return
  }
  switch {
  case _result128.E!= nil:
    return r, _result128.E
  }

  return _result128.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *BoteaterServiceClient) IssueLiffView(ctx context.Context, request *LiffViewRequestStruct) (r *LiffViewStruct, err error) {
  var _args129 BoteaterServiceIssueLiffViewArgs
  _args129.Request = request
  var _result130 BoteaterServiceIssueLiffViewResult
  if err = p.Client_().Call(ctx, "issueLiffView", &_args129, &_result130); err != nil {
    return
  }
  switch {
  case _result130.E!= nil:
    return r, _result130.E
  }

  return _result130.GetSuccess(), nil
}

// Parameters:
//  - Direction
//  - LastSeenSeqId
func (p *BoteaterServiceClient) GetFriendRequests(ctx context.Context, direction FriendDirectionEnum, lastSeenSeqId int64) (r []*FriendRequestStruct, err error) {
  var _args131 BoteaterServiceGetFriendRequestsArgs
  _args131.Direction = direction
  _args131.LastSeenSeqId = lastSeenSeqId
  var _result132 BoteaterServiceGetFriendRequestsResult
  if err = p.Client_().Call(ctx, "getFriendRequests", &_args131, &_result132); err != nil {
    return
  }
  switch {
  case _result132.E!= nil:
    return r, _result132.E
  }

  return _result132.GetSuccess(), nil
}

// Parameters:
//  - Direction
//  - MidOrEMid
func (p *BoteaterServiceClient) RemoveFriendRequest(ctx context.Context, direction FriendDirectionEnum, midOrEMid string) (err error) {
  var _args133 BoteaterServiceRemoveFriendRequestArgs
  _args133.Direction = direction
  _args133.MidOrEMid = midOrEMid
  var _result134 BoteaterServiceRemoveFriendRequestResult
  if err = p.Client_().Call(ctx, "removeFriendRequest", &_args133, &_result134); err != nil {
    return
  }
  switch {
  case _result134.E!= nil:
    return _result134.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Attr
//  - Value
func (p *BoteaterServiceClient) UpdateSettingsAttribute(ctx context.Context, reqSeq int32, attr SettingsAttributeEnum, value string) (err error) {
  var _args135 BoteaterServiceUpdateSettingsAttributeArgs
  _args135.ReqSeq = reqSeq
  _args135.Attr = attr
  _args135.Value = value
  var _result136 BoteaterServiceUpdateSettingsAttributeResult
  if err = p.Client_().Call(ctx, "updateSettingsAttribute", &_args135, &_result136); err != nil {
    return
  }
  switch {
  case _result136.E!= nil:
    return _result136.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - AttributesToUpdate
//  - Settings
func (p *BoteaterServiceClient) UpdateSettingsAttributes2(ctx context.Context, reqSeq int32, attributesToUpdate []string, settings *SettingsStruct) (r []SettingsAttributes2Enum, err error) {
  var _args137 BoteaterServiceUpdateSettingsAttributes2Args
  _args137.ReqSeq = reqSeq
  _args137.AttributesToUpdate = attributesToUpdate
  _args137.Settings = settings
  var _result138 BoteaterServiceUpdateSettingsAttributes2Result
  if err = p.Client_().Call(ctx, "updateSettingsAttributes2", &_args137, &_result138); err != nil {
    return
  }
  switch {
  case _result138.E!= nil:
    return r, _result138.E
  }

  return _result138.GetSuccess(), nil
}

// Parameters:
//  - AttributesToRetrieve
func (p *BoteaterServiceClient) GetSettingsAttributes2(ctx context.Context, attributesToRetrieve []SettingsAttributes2Enum) (r *SettingsStruct, err error) {
  var _args139 BoteaterServiceGetSettingsAttributes2Args
  _args139.AttributesToRetrieve = attributesToRetrieve
  var _result140 BoteaterServiceGetSettingsAttributes2Result
  if err = p.Client_().Call(ctx, "getSettingsAttributes2", &_args139, &_result140); err != nil {
    return
  }
  switch {
  case _result140.E!= nil:
    return r, _result140.E
  }

  return _result140.GetSuccess(), nil
}

// Parameters:
//  - AttrBitset
func (p *BoteaterServiceClient) GetSettingsAttributes(ctx context.Context, attrBitset int32) (r *SettingsStruct, err error) {
  var _args141 BoteaterServiceGetSettingsAttributesArgs
  _args141.AttrBitset = attrBitset
  var _result142 BoteaterServiceGetSettingsAttributesResult
  if err = p.Client_().Call(ctx, "getSettingsAttributes", &_args141, &_result142); err != nil {
    return
  }
  switch {
  case _result142.E!= nil:
    return r, _result142.E
  }

  return _result142.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *BoteaterServiceClient) GetProductV2(ctx context.Context, request *GetProductRequestStruct) (r *GetProductStructV2, err error) {
  var _args143 BoteaterServiceGetProductV2Args
  _args143.Request = request
  var _result144 BoteaterServiceGetProductV2Result
  if err = p.Client_().Call(ctx, "getProductV2", &_args143, &_result144); err != nil {
    return
  }
  switch {
  case _result144.E!= nil:
    return r, _result144.E
  }

  return _result144.GetSuccess(), nil
}

// Parameters:
//  - ShopId
//  - ProductId
//  - Locale
func (p *BoteaterServiceClient) GetProduct(ctx context.Context, shopId string, productId string, locale *LocaleStruct) (r *GetProductStruct, err error) {
  var _args145 BoteaterServiceGetProductArgs
  _args145.ShopId = shopId
  _args145.ProductId = productId
  _args145.Locale = locale
  var _result146 BoteaterServiceGetProductResult
  if err = p.Client_().Call(ctx, "getProduct", &_args145, &_result146); err != nil {
    return
  }
  switch {
  case _result146.E!= nil:
    return r, _result146.E
  }

  return _result146.GetSuccess(), nil
}

// Parameters:
//  - PurchaseOrder
func (p *BoteaterServiceClient) PlacePurchaseOrderForFreeProduct(ctx context.Context, purchaseOrder *PurchaseOrderStruct) (r *PurchaseOrderResponseStruct, err error) {
  var _args147 BoteaterServicePlacePurchaseOrderForFreeProductArgs
  _args147.PurchaseOrder = purchaseOrder
  var _result148 BoteaterServicePlacePurchaseOrderForFreeProductResult
  if err = p.Client_().Call(ctx, "placePurchaseOrderForFreeProduct", &_args147, &_result148); err != nil {
    return
  }
  switch {
  case _result148.E!= nil:
    return r, _result148.E
  }

  return _result148.GetSuccess(), nil
}

// Parameters:
//  - PurchaseOrder
func (p *BoteaterServiceClient) PlacePurchaseOrderWithLineCoin(ctx context.Context, purchaseOrder *PurchaseOrderStruct) (r *PurchaseOrderResponseStruct, err error) {
  var _args149 BoteaterServicePlacePurchaseOrderWithLineCoinArgs
  _args149.PurchaseOrder = purchaseOrder
  var _result150 BoteaterServicePlacePurchaseOrderWithLineCoinResult
  if err = p.Client_().Call(ctx, "placePurchaseOrderWithLineCoin", &_args149, &_result150); err != nil {
    return
  }
  switch {
  case _result150.E!= nil:
    return r, _result150.E
  }

  return _result150.GetSuccess(), nil
}

// Parameters:
//  - ShowcaseRequest
func (p *BoteaterServiceClient) GetShowcaseV3(ctx context.Context, showcaseRequest *ShowcaseRequestStruct) (r *ShowcaseV3Response, err error) {
  var _args151 BoteaterServiceGetShowcaseV3Args
  _args151.ShowcaseRequest = showcaseRequest
  var _result152 BoteaterServiceGetShowcaseV3Result
  if err = p.Client_().Call(ctx, "getShowcaseV3", &_args151, &_result152); err != nil {
    return
  }
  switch {
  case _result152.E!= nil:
    return r, _result152.E
  }

  return _result152.GetSuccess(), nil
}

// Parameters:
//  - KeepLoggedIn
//  - SystemName
//  - ReturnCallbackUrl
func (p *BoteaterServiceClient) GetAuthQrcode(ctx context.Context, keepLoggedIn bool, systemName string, returnCallbackUrl bool) (r *AuthQrcodeStruct, err error) {
  var _args153 BoteaterServiceGetAuthQrcodeArgs
  _args153.KeepLoggedIn = keepLoggedIn
  _args153.SystemName = systemName
  _args153.ReturnCallbackUrl = returnCallbackUrl
  var _result154 BoteaterServiceGetAuthQrcodeResult
  if err = p.Client_().Call(ctx, "getAuthQrcode", &_args153, &_result154); err != nil {
    return
  }
  switch {
  case _result154.E!= nil:
    return r, _result154.E
  }

  return _result154.GetSuccess(), nil
}

// Parameters:
//  - LoginRequest
func (p *BoteaterServiceClient) LoginZ(ctx context.Context, loginRequest *LoginRequestStruct) (r *LoginResultStruct, err error) {
  var _args155 BoteaterServiceLoginZArgs
  _args155.LoginRequest = loginRequest
  var _result156 BoteaterServiceLoginZResult
  if err = p.Client_().Call(ctx, "loginZ", &_args155, &_result156); err != nil {
    return
  }
  switch {
  case _result156.E!= nil:
    return r, _result156.E
  }

  return _result156.GetSuccess(), nil
}

// Parameters:
//  - FeatureType
func (p *BoteaterServiceClient) AcquireEncryptedAccessToken(ctx context.Context, featureType FeatureTypeEnum) (r string, err error) {
  var _args157 BoteaterServiceAcquireEncryptedAccessTokenArgs
  _args157.FeatureType = featureType
  var _result158 BoteaterServiceAcquireEncryptedAccessTokenResult
  if err = p.Client_().Call(ctx, "acquireEncryptedAccessToken", &_args157, &_result158); err != nil {
    return
  }
  switch {
  case _result158.E!= nil:
    return r, _result158.E
  }

  return _result158.GetSuccess(), nil
}

// Parameters:
//  - ExpirationTime
//  - MaxUseCount
func (p *BoteaterServiceClient) GenerateUserTicket(ctx context.Context, expirationTime int64, maxUseCount int32) (r *TicketStruct, err error) {
  var _args159 BoteaterServiceGenerateUserTicketArgs
  _args159.ExpirationTime = expirationTime
  _args159.MaxUseCount = maxUseCount
  var _result160 BoteaterServiceGenerateUserTicketResult
  if err = p.Client_().Call(ctx, "generateUserTicket", &_args159, &_result160); err != nil {
    return
  }
  switch {
  case _result160.E!= nil:
    return r, _result160.E
  }

  return _result160.GetSuccess(), nil
}

// Parameters:
//  - Seq
//  - MessageId
func (p *BoteaterServiceClient) UnsendMessage(ctx context.Context, seq int32, messageId string) (err error) {
  var _args161 BoteaterServiceUnsendMessageArgs
  _args161.Seq = seq
  _args161.MessageId = messageId
  var _result162 BoteaterServiceUnsendMessageResult
  if err = p.Client_().Call(ctx, "unsendMessage", &_args161, &_result162); err != nil {
    return
  }
  switch {
  case _result162.E!= nil:
    return _result162.E
  }

  return nil
}

// Parameters:
//  - SyncOpRevision
//  - Category
//  - Report
func (p *BoteaterServiceClient) Report(ctx context.Context, syncOpRevision int64, category CategoryEnum, report string) (err error) {
  var _args163 BoteaterServiceReportArgs
  _args163.SyncOpRevision = syncOpRevision
  _args163.Category = category
  _args163.Report = report
  var _result164 BoteaterServiceReportResult
  if err = p.Client_().Call(ctx, "report", &_args163, &_result164); err != nil {
    return
  }
  switch {
  case _result164.E!= nil:
    return _result164.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ContactIds
func (p *BoteaterServiceClient) CreateRoomV2(ctx context.Context, reqSeq int32, contactIds []string) (r *RoomStruct, err error) {
  var _args165 BoteaterServiceCreateRoomV2Args
  _args165.ReqSeq = reqSeq
  _args165.ContactIds = contactIds
  var _result166 BoteaterServiceCreateRoomV2Result
  if err = p.Client_().Call(ctx, "createRoomV2", &_args165, &_result166); err != nil {
    return
  }
  switch {
  case _result166.E!= nil:
    return r, _result166.E
  }

  return _result166.GetSuccess(), nil
}

// Parameters:
//  - RoomIds
func (p *BoteaterServiceClient) GetRoomsV2(ctx context.Context, roomIds []string) (r []*RoomStruct, err error) {
  var _args167 BoteaterServiceGetRoomsV2Args
  _args167.RoomIds = roomIds
  var _result168 BoteaterServiceGetRoomsV2Result
  if err = p.Client_().Call(ctx, "getRoomsV2", &_args167, &_result168); err != nil {
    return
  }
  switch {
  case _result168.E!= nil:
    return r, _result168.E
  }

  return _result168.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - RoomId
//  - ContactIds
func (p *BoteaterServiceClient) InviteIntoRoom(ctx context.Context, reqSeq int32, roomId string, contactIds []string) (err error) {
  var _args169 BoteaterServiceInviteIntoRoomArgs
  _args169.ReqSeq = reqSeq
  _args169.RoomId = roomId
  _args169.ContactIds = contactIds
  var _result170 BoteaterServiceInviteIntoRoomResult
  if err = p.Client_().Call(ctx, "inviteIntoRoom", &_args169, &_result170); err != nil {
    return
  }
  switch {
  case _result170.E!= nil:
    return _result170.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - RoomId
func (p *BoteaterServiceClient) LeaveRoom(ctx context.Context, reqSeq int32, roomId string) (err error) {
  var _args171 BoteaterServiceLeaveRoomArgs
  _args171.ReqSeq = reqSeq
  _args171.RoomId = roomId
  var _result172 BoteaterServiceLeaveRoomResult
  if err = p.Client_().Call(ctx, "leaveRoom", &_args171, &_result172); err != nil {
    return
  }
  switch {
  case _result172.E!= nil:
    return _result172.E
  }

  return nil
}

type BoteaterServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BoteaterService
}

func (p *BoteaterServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BoteaterServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BoteaterServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBoteaterServiceProcessor(handler BoteaterService) *BoteaterServiceProcessor {

  self173 := &BoteaterServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self173.processorMap["sendMessage"] = &boteaterServiceProcessorSendMessage{handler:handler}
  self173.processorMap["sendChatChecked"] = &boteaterServiceProcessorSendChatChecked{handler:handler}
  self173.processorMap["removeAllMessages"] = &boteaterServiceProcessorRemoveAllMessages{handler:handler}
  self173.processorMap["sendChatRemoved"] = &boteaterServiceProcessorSendChatRemoved{handler:handler}
  self173.processorMap["getGroupWithoutMembers"] = &boteaterServiceProcessorGetGroupWithoutMembers{handler:handler}
  self173.processorMap["getGroupsV2"] = &boteaterServiceProcessorGetGroupsV2{handler:handler}
  self173.processorMap["getGroup"] = &boteaterServiceProcessorGetGroup{handler:handler}
  self173.processorMap["createGroupV2"] = &boteaterServiceProcessorCreateGroupV2{handler:handler}
  self173.processorMap["getCompactGroup"] = &boteaterServiceProcessorGetCompactGroup{handler:handler}
  self173.processorMap["getGroupIdsInvited"] = &boteaterServiceProcessorGetGroupIdsInvited{handler:handler}
  self173.processorMap["getGroupIdsJoined"] = &boteaterServiceProcessorGetGroupIdsJoined{handler:handler}
  self173.processorMap["getGroupCall"] = &boteaterServiceProcessorGetGroupCall{handler:handler}
  self173.processorMap["acquireGroupCallRoute"] = &boteaterServiceProcessorAcquireGroupCallRoute{handler:handler}
  self173.processorMap["inviteIntoGroup"] = &boteaterServiceProcessorInviteIntoGroup{handler:handler}
  self173.processorMap["acceptGroupInvitationByTicket"] = &boteaterServiceProcessorAcceptGroupInvitationByTicket{handler:handler}
  self173.processorMap["rejectGroupInvitation"] = &boteaterServiceProcessorRejectGroupInvitation{handler:handler}
  self173.processorMap["acceptGroupInvitation"] = &boteaterServiceProcessorAcceptGroupInvitation{handler:handler}
  self173.processorMap["cancelGroupInvitation"] = &boteaterServiceProcessorCancelGroupInvitation{handler:handler}
  self173.processorMap["findGroupByTicket"] = &boteaterServiceProcessorFindGroupByTicket{handler:handler}
  self173.processorMap["reissueGroupTicket"] = &boteaterServiceProcessorReissueGroupTicket{handler:handler}
  self173.processorMap["kickoutFromGroup"] = &boteaterServiceProcessorKickoutFromGroup{handler:handler}
  self173.processorMap["inviteIntoGroupCall"] = &boteaterServiceProcessorInviteIntoGroupCall{handler:handler}
  self173.processorMap["updateGroupPreferenceAttribute"] = &boteaterServiceProcessorUpdateGroupPreferenceAttribute{handler:handler}
  self173.processorMap["updateGroup"] = &boteaterServiceProcessorUpdateGroup{handler:handler}
  self173.processorMap["leaveGroup"] = &boteaterServiceProcessorLeaveGroup{handler:handler}
  self173.processorMap["findAndAddContactsByMid"] = &boteaterServiceProcessorFindAndAddContactsByMid{handler:handler}
  self173.processorMap["findAndAddContactsByUserid"] = &boteaterServiceProcessorFindAndAddContactsByUserid{handler:handler}
  self173.processorMap["findAndAddContactsByPhone"] = &boteaterServiceProcessorFindAndAddContactsByPhone{handler:handler}
  self173.processorMap["getContact"] = &boteaterServiceProcessorGetContact{handler:handler}
  self173.processorMap["updateContactSetting"] = &boteaterServiceProcessorUpdateContactSetting{handler:handler}
  self173.processorMap["getAllContactIds"] = &boteaterServiceProcessorGetAllContactIds{handler:handler}
  self173.processorMap["getProfile"] = &boteaterServiceProcessorGetProfile{handler:handler}
  self173.processorMap["updateProfileAttribute"] = &boteaterServiceProcessorUpdateProfileAttribute{handler:handler}
  self173.processorMap["updateProfile"] = &boteaterServiceProcessorUpdateProfile{handler:handler}
  self173.processorMap["getBlockedContactIds"] = &boteaterServiceProcessorGetBlockedContactIds{handler:handler}
  self173.processorMap["unblockContact"] = &boteaterServiceProcessorUnblockContact{handler:handler}
  self173.processorMap["blockContact"] = &boteaterServiceProcessorBlockContact{handler:handler}
  self173.processorMap["getSettings"] = &boteaterServiceProcessorGetSettings{handler:handler}
  self173.processorMap["fetchOps"] = &boteaterServiceProcessorFetchOps{handler:handler}
  self173.processorMap["getLastOpRevision"] = &boteaterServiceProcessorGetLastOpRevision{handler:handler}
  self173.processorMap["issueChannelToken"] = &boteaterServiceProcessorIssueChannelToken{handler:handler}
  self173.processorMap["getChannelInfo"] = &boteaterServiceProcessorGetChannelInfo{handler:handler}
  self173.processorMap["issueLiffView"] = &boteaterServiceProcessorIssueLiffView{handler:handler}
  self173.processorMap["getFriendRequests"] = &boteaterServiceProcessorGetFriendRequests{handler:handler}
  self173.processorMap["removeFriendRequest"] = &boteaterServiceProcessorRemoveFriendRequest{handler:handler}
  self173.processorMap["updateSettingsAttribute"] = &boteaterServiceProcessorUpdateSettingsAttribute{handler:handler}
  self173.processorMap["updateSettingsAttributes2"] = &boteaterServiceProcessorUpdateSettingsAttributes2{handler:handler}
  self173.processorMap["getSettingsAttributes2"] = &boteaterServiceProcessorGetSettingsAttributes2{handler:handler}
  self173.processorMap["getSettingsAttributes"] = &boteaterServiceProcessorGetSettingsAttributes{handler:handler}
  self173.processorMap["getProductV2"] = &boteaterServiceProcessorGetProductV2{handler:handler}
  self173.processorMap["getProduct"] = &boteaterServiceProcessorGetProduct{handler:handler}
  self173.processorMap["placePurchaseOrderForFreeProduct"] = &boteaterServiceProcessorPlacePurchaseOrderForFreeProduct{handler:handler}
  self173.processorMap["placePurchaseOrderWithLineCoin"] = &boteaterServiceProcessorPlacePurchaseOrderWithLineCoin{handler:handler}
  self173.processorMap["getShowcaseV3"] = &boteaterServiceProcessorGetShowcaseV3{handler:handler}
  self173.processorMap["getAuthQrcode"] = &boteaterServiceProcessorGetAuthQrcode{handler:handler}
  self173.processorMap["loginZ"] = &boteaterServiceProcessorLoginZ{handler:handler}
  self173.processorMap["acquireEncryptedAccessToken"] = &boteaterServiceProcessorAcquireEncryptedAccessToken{handler:handler}
  self173.processorMap["generateUserTicket"] = &boteaterServiceProcessorGenerateUserTicket{handler:handler}
  self173.processorMap["unsendMessage"] = &boteaterServiceProcessorUnsendMessage{handler:handler}
  self173.processorMap["report"] = &boteaterServiceProcessorReport{handler:handler}
  self173.processorMap["createRoomV2"] = &boteaterServiceProcessorCreateRoomV2{handler:handler}
  self173.processorMap["getRoomsV2"] = &boteaterServiceProcessorGetRoomsV2{handler:handler}
  self173.processorMap["inviteIntoRoom"] = &boteaterServiceProcessorInviteIntoRoom{handler:handler}
  self173.processorMap["leaveRoom"] = &boteaterServiceProcessorLeaveRoom{handler:handler}
return self173
}

func (p *BoteaterServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x174 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x174.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x174

}

type boteaterServiceProcessorSendMessage struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorSendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceSendMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceSendMessageResult{}
var retval *MessageStruct
  var err2 error
  if retval, err2 = p.handler.SendMessage(ctx, args.Seq, args.Message); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessage: " + err2.Error())
    oprot.WriteMessageBegin("sendMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("sendMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorSendChatChecked struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorSendChatChecked) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceSendChatCheckedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendChatChecked", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceSendChatCheckedResult{}
  var err2 error
  if err2 = p.handler.SendChatChecked(ctx, args.Seq, args.ChatMid, args.LastMessageId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatChecked: " + err2.Error())
    oprot.WriteMessageBegin("sendChatChecked", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("sendChatChecked", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorRemoveAllMessages struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorRemoveAllMessages) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceRemoveAllMessagesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeAllMessages", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceRemoveAllMessagesResult{}
  var err2 error
  if err2 = p.handler.RemoveAllMessages(ctx, args.Seq, args.LastMessageId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAllMessages: " + err2.Error())
    oprot.WriteMessageBegin("removeAllMessages", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("removeAllMessages", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorSendChatRemoved struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorSendChatRemoved) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceSendChatRemovedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendChatRemoved", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceSendChatRemovedResult{}
  var err2 error
  if err2 = p.handler.SendChatRemoved(ctx, args.Seq, args.ChatMid, args.LastMessageId, args.SessionId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatRemoved: " + err2.Error())
    oprot.WriteMessageBegin("sendChatRemoved", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("sendChatRemoved", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetGroupWithoutMembers struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetGroupWithoutMembers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetGroupWithoutMembersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getGroupWithoutMembers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetGroupWithoutMembersResult{}
var retval *GroupStruct
  var err2 error
  if retval, err2 = p.handler.GetGroupWithoutMembers(ctx, args.GroupId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupWithoutMembers: " + err2.Error())
    oprot.WriteMessageBegin("getGroupWithoutMembers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getGroupWithoutMembers", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetGroupsV2 struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetGroupsV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetGroupsV2Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getGroupsV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetGroupsV2Result{}
var retval *GroupStruct
  var err2 error
  if retval, err2 = p.handler.GetGroupsV2(ctx, args.GroupId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupsV2: " + err2.Error())
    oprot.WriteMessageBegin("getGroupsV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getGroupsV2", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetGroup struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetGroupResult{}
var retval *GroupStruct
  var err2 error
  if retval, err2 = p.handler.GetGroup(ctx, args.GroupId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroup: " + err2.Error())
    oprot.WriteMessageBegin("getGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorCreateGroupV2 struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorCreateGroupV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceCreateGroupV2Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createGroupV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceCreateGroupV2Result{}
var retval *GroupStruct
  var err2 error
  if retval, err2 = p.handler.CreateGroupV2(ctx, args.Seq, args.Name, args.ContactIds); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createGroupV2: " + err2.Error())
    oprot.WriteMessageBegin("createGroupV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createGroupV2", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetCompactGroup struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetCompactGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetCompactGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCompactGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetCompactGroupResult{}
var retval *GroupStruct
  var err2 error
  if retval, err2 = p.handler.GetCompactGroup(ctx, args.GroupId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCompactGroup: " + err2.Error())
    oprot.WriteMessageBegin("getCompactGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCompactGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetGroupIdsInvited struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetGroupIdsInvited) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetGroupIdsInvitedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getGroupIdsInvited", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetGroupIdsInvitedResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetGroupIdsInvited(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupIdsInvited: " + err2.Error())
    oprot.WriteMessageBegin("getGroupIdsInvited", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getGroupIdsInvited", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetGroupIdsJoined struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetGroupIdsJoined) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetGroupIdsJoinedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getGroupIdsJoined", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetGroupIdsJoinedResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetGroupIdsJoined(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupIdsJoined: " + err2.Error())
    oprot.WriteMessageBegin("getGroupIdsJoined", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getGroupIdsJoined", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetGroupCall struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetGroupCall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetGroupCallArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getGroupCall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetGroupCallResult{}
var retval *GroupCallStruct
  var err2 error
  if retval, err2 = p.handler.GetGroupCall(ctx, args.ChatMid); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupCall: " + err2.Error())
    oprot.WriteMessageBegin("getGroupCall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getGroupCall", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorAcquireGroupCallRoute struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorAcquireGroupCallRoute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceAcquireGroupCallRouteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("acquireGroupCallRoute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceAcquireGroupCallRouteResult{}
var retval *GroupCallRouteStruct
  var err2 error
  if retval, err2 = p.handler.AcquireGroupCallRoute(ctx, args.ChatMid, args.MediaType, args.IsInitialHost, args.Capabilities); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireGroupCallRoute: " + err2.Error())
    oprot.WriteMessageBegin("acquireGroupCallRoute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("acquireGroupCallRoute", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorInviteIntoGroup struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorInviteIntoGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceInviteIntoGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("inviteIntoGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceInviteIntoGroupResult{}
  var err2 error
  if err2 = p.handler.InviteIntoGroup(ctx, args.ReqSeq, args.GroupId, args.ContactIds); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoGroup: " + err2.Error())
    oprot.WriteMessageBegin("inviteIntoGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("inviteIntoGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorAcceptGroupInvitationByTicket struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorAcceptGroupInvitationByTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceAcceptGroupInvitationByTicketArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("acceptGroupInvitationByTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceAcceptGroupInvitationByTicketResult{}
  var err2 error
  if err2 = p.handler.AcceptGroupInvitationByTicket(ctx, args.ReqSeq, args.GroupMid, args.TicketId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptGroupInvitationByTicket: " + err2.Error())
    oprot.WriteMessageBegin("acceptGroupInvitationByTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("acceptGroupInvitationByTicket", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorRejectGroupInvitation struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorRejectGroupInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceRejectGroupInvitationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("rejectGroupInvitation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceRejectGroupInvitationResult{}
  var err2 error
  if err2 = p.handler.RejectGroupInvitation(ctx, args.ReqSeq, args.GroupId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rejectGroupInvitation: " + err2.Error())
    oprot.WriteMessageBegin("rejectGroupInvitation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("rejectGroupInvitation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorAcceptGroupInvitation struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorAcceptGroupInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceAcceptGroupInvitationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("acceptGroupInvitation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceAcceptGroupInvitationResult{}
  var err2 error
  if err2 = p.handler.AcceptGroupInvitation(ctx, args.ReqSeq, args.GroupId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptGroupInvitation: " + err2.Error())
    oprot.WriteMessageBegin("acceptGroupInvitation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("acceptGroupInvitation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorCancelGroupInvitation struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorCancelGroupInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceCancelGroupInvitationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("cancelGroupInvitation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceCancelGroupInvitationResult{}
  var err2 error
  if err2 = p.handler.CancelGroupInvitation(ctx, args.ReqSeq, args.GroupId, args.ContactIds); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelGroupInvitation: " + err2.Error())
    oprot.WriteMessageBegin("cancelGroupInvitation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("cancelGroupInvitation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorFindGroupByTicket struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorFindGroupByTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceFindGroupByTicketArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findGroupByTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceFindGroupByTicketResult{}
var retval *GroupStruct
  var err2 error
  if retval, err2 = p.handler.FindGroupByTicket(ctx, args.TicketId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findGroupByTicket: " + err2.Error())
    oprot.WriteMessageBegin("findGroupByTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findGroupByTicket", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorReissueGroupTicket struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorReissueGroupTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceReissueGroupTicketArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("reissueGroupTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceReissueGroupTicketResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.ReissueGroupTicket(ctx, args.GroupMid); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reissueGroupTicket: " + err2.Error())
    oprot.WriteMessageBegin("reissueGroupTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("reissueGroupTicket", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorKickoutFromGroup struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorKickoutFromGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceKickoutFromGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("kickoutFromGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceKickoutFromGroupResult{}
  var err2 error
  if err2 = p.handler.KickoutFromGroup(ctx, args.ReqSeq, args.GroupId, args.ContactIds); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing kickoutFromGroup: " + err2.Error())
    oprot.WriteMessageBegin("kickoutFromGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("kickoutFromGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorInviteIntoGroupCall struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorInviteIntoGroupCall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceInviteIntoGroupCallArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("inviteIntoGroupCall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceInviteIntoGroupCallResult{}
  var err2 error
  if err2 = p.handler.InviteIntoGroupCall(ctx, args.ChatMid, args.MemberMids, args.MediaType); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoGroupCall: " + err2.Error())
    oprot.WriteMessageBegin("inviteIntoGroupCall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("inviteIntoGroupCall", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorUpdateGroupPreferenceAttribute struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorUpdateGroupPreferenceAttribute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceUpdateGroupPreferenceAttributeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateGroupPreferenceAttribute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceUpdateGroupPreferenceAttributeResult{}
  var err2 error
  if err2 = p.handler.UpdateGroupPreferenceAttribute(ctx, args.ReqSeq, args.GroupMid, args.UpdatedAttrs); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGroupPreferenceAttribute: " + err2.Error())
    oprot.WriteMessageBegin("updateGroupPreferenceAttribute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateGroupPreferenceAttribute", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorUpdateGroup struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorUpdateGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceUpdateGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceUpdateGroupResult{}
  var err2 error
  if err2 = p.handler.UpdateGroup(ctx, args.ReqSeq, args.Group); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateGroup: " + err2.Error())
    oprot.WriteMessageBegin("updateGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorLeaveGroup struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorLeaveGroup) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceLeaveGroupArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("leaveGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceLeaveGroupResult{}
  var err2 error
  if err2 = p.handler.LeaveGroup(ctx, args.ReqSeq, args.GroupId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaveGroup: " + err2.Error())
    oprot.WriteMessageBegin("leaveGroup", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("leaveGroup", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorFindAndAddContactsByMid struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorFindAndAddContactsByMid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceFindAndAddContactsByMidArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceFindAndAddContactsByMidResult{}
var retval map[string]*ContactStruct
  var err2 error
  if retval, err2 = p.handler.FindAndAddContactsByMid(ctx, args.ReqSeq, args.Mid, args.Type, args.Reference); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByMid: " + err2.Error())
    oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorFindAndAddContactsByUserid struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorFindAndAddContactsByUserid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceFindAndAddContactsByUseridArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceFindAndAddContactsByUseridResult{}
var retval map[string]*ContactStruct
  var err2 error
  if retval, err2 = p.handler.FindAndAddContactsByUserid(ctx, args.ReqSeq, args.SearchId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByUserid: " + err2.Error())
    oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorFindAndAddContactsByPhone struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorFindAndAddContactsByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceFindAndAddContactsByPhoneArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceFindAndAddContactsByPhoneResult{}
var retval map[string]*ContactStruct
  var err2 error
  if retval, err2 = p.handler.FindAndAddContactsByPhone(ctx, args.ReqSeq, args.Phones); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByPhone: " + err2.Error())
    oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetContact struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetContactArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getContact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetContactResult{}
var retval *ContactStruct
  var err2 error
  if retval, err2 = p.handler.GetContact(ctx, args.ID); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContact: " + err2.Error())
    oprot.WriteMessageBegin("getContact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getContact", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorUpdateContactSetting struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorUpdateContactSetting) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceUpdateContactSettingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateContactSetting", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceUpdateContactSettingResult{}
  var err2 error
  if err2 = p.handler.UpdateContactSetting(ctx, args.ReqSeq, args.Mid, args.Flag, args.Value); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateContactSetting: " + err2.Error())
    oprot.WriteMessageBegin("updateContactSetting", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateContactSetting", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetAllContactIds struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetAllContactIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetAllContactIdsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllContactIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetAllContactIdsResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetAllContactIds(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllContactIds: " + err2.Error())
    oprot.WriteMessageBegin("getAllContactIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllContactIds", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetProfile struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetProfileResult{}
var retval *ProfileStruct
  var err2 error
  if retval, err2 = p.handler.GetProfile(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProfile: " + err2.Error())
    oprot.WriteMessageBegin("getProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorUpdateProfileAttribute struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorUpdateProfileAttribute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceUpdateProfileAttributeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateProfileAttribute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceUpdateProfileAttributeResult{}
  var err2 error
  if err2 = p.handler.UpdateProfileAttribute(ctx, args.ReqSeq, args.Attr, args.Value); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfileAttribute: " + err2.Error())
    oprot.WriteMessageBegin("updateProfileAttribute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateProfileAttribute", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorUpdateProfile struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorUpdateProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceUpdateProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceUpdateProfileResult{}
  var err2 error
  if err2 = p.handler.UpdateProfile(ctx, args.ReqSeq, args.Profile); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfile: " + err2.Error())
    oprot.WriteMessageBegin("updateProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetBlockedContactIds struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetBlockedContactIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetBlockedContactIdsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getBlockedContactIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetBlockedContactIdsResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetBlockedContactIds(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedContactIds: " + err2.Error())
    oprot.WriteMessageBegin("getBlockedContactIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getBlockedContactIds", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorUnblockContact struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorUnblockContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceUnblockContactArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("unblockContact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceUnblockContactResult{}
  var err2 error
  if err2 = p.handler.UnblockContact(ctx, args.ReqSeq, args.ID, args.Reference); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unblockContact: " + err2.Error())
    oprot.WriteMessageBegin("unblockContact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("unblockContact", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorBlockContact struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorBlockContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceBlockContactArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("blockContact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceBlockContactResult{}
  var err2 error
  if err2 = p.handler.BlockContact(ctx, args.ReqSeq, args.ID); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockContact: " + err2.Error())
    oprot.WriteMessageBegin("blockContact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("blockContact", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetSettings struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetSettings) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetSettingsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSettings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetSettingsResult{}
var retval *SettingsStruct
  var err2 error
  if retval, err2 = p.handler.GetSettings(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettings: " + err2.Error())
    oprot.WriteMessageBegin("getSettings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSettings", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorFetchOps struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorFetchOps) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceFetchOpsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchOps", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceFetchOpsResult{}
var retval []*OperationStruct
  var err2 error
  if retval, err2 = p.handler.FetchOps(ctx, args.LocalRev, args.Count, args.GlobalRev, args.IndividualRev); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOps: " + err2.Error())
    oprot.WriteMessageBegin("fetchOps", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetchOps", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetLastOpRevision struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetLastOpRevision) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetLastOpRevisionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getLastOpRevision", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetLastOpRevisionResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.GetLastOpRevision(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastOpRevision: " + err2.Error())
    oprot.WriteMessageBegin("getLastOpRevision", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getLastOpRevision", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorIssueChannelToken struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorIssueChannelToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceIssueChannelTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("issueChannelToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceIssueChannelTokenResult{}
var retval *ChannelTokenStruct
  var err2 error
  if retval, err2 = p.handler.IssueChannelToken(ctx, args.ChannelId); err2 != nil {
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing issueChannelToken: " + err2.Error())
    oprot.WriteMessageBegin("issueChannelToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("issueChannelToken", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetChannelInfo struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetChannelInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetChannelInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getChannelInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetChannelInfoResult{}
var retval *ChannelInfoStruct
  var err2 error
  if retval, err2 = p.handler.GetChannelInfo(ctx, args.ChannelId, args.Locale); err2 != nil {
  switch v := err2.(type) {
    case *ChannelException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChannelInfo: " + err2.Error())
    oprot.WriteMessageBegin("getChannelInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getChannelInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorIssueLiffView struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorIssueLiffView) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceIssueLiffViewArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("issueLiffView", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceIssueLiffViewResult{}
var retval *LiffViewStruct
  var err2 error
  if retval, err2 = p.handler.IssueLiffView(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *LiffException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing issueLiffView: " + err2.Error())
    oprot.WriteMessageBegin("issueLiffView", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("issueLiffView", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetFriendRequests struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetFriendRequests) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetFriendRequestsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getFriendRequests", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetFriendRequestsResult{}
var retval []*FriendRequestStruct
  var err2 error
  if retval, err2 = p.handler.GetFriendRequests(ctx, args.Direction, args.LastSeenSeqId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFriendRequests: " + err2.Error())
    oprot.WriteMessageBegin("getFriendRequests", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getFriendRequests", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorRemoveFriendRequest struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorRemoveFriendRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceRemoveFriendRequestArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeFriendRequest", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceRemoveFriendRequestResult{}
  var err2 error
  if err2 = p.handler.RemoveFriendRequest(ctx, args.Direction, args.MidOrEMid); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeFriendRequest: " + err2.Error())
    oprot.WriteMessageBegin("removeFriendRequest", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("removeFriendRequest", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorUpdateSettingsAttribute struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorUpdateSettingsAttribute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceUpdateSettingsAttributeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateSettingsAttribute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceUpdateSettingsAttributeResult{}
  var err2 error
  if err2 = p.handler.UpdateSettingsAttribute(ctx, args.ReqSeq, args.Attr, args.Value); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSettingsAttribute: " + err2.Error())
    oprot.WriteMessageBegin("updateSettingsAttribute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateSettingsAttribute", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorUpdateSettingsAttributes2 struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorUpdateSettingsAttributes2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceUpdateSettingsAttributes2Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceUpdateSettingsAttributes2Result{}
var retval []SettingsAttributes2Enum
  var err2 error
  if retval, err2 = p.handler.UpdateSettingsAttributes2(ctx, args.ReqSeq, args.AttributesToUpdate, args.Settings); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSettingsAttributes2: " + err2.Error())
    oprot.WriteMessageBegin("updateSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateSettingsAttributes2", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetSettingsAttributes2 struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetSettingsAttributes2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetSettingsAttributes2Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetSettingsAttributes2Result{}
var retval *SettingsStruct
  var err2 error
  if retval, err2 = p.handler.GetSettingsAttributes2(ctx, args.AttributesToRetrieve); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettingsAttributes2: " + err2.Error())
    oprot.WriteMessageBegin("getSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSettingsAttributes2", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetSettingsAttributes struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetSettingsAttributes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetSettingsAttributesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSettingsAttributes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetSettingsAttributesResult{}
var retval *SettingsStruct
  var err2 error
  if retval, err2 = p.handler.GetSettingsAttributes(ctx, args.AttrBitset); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettingsAttributes: " + err2.Error())
    oprot.WriteMessageBegin("getSettingsAttributes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSettingsAttributes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetProductV2 struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetProductV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetProductV2Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getProductV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetProductV2Result{}
var retval *GetProductStructV2
  var err2 error
  if retval, err2 = p.handler.GetProductV2(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *ShopExecption:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProductV2: " + err2.Error())
    oprot.WriteMessageBegin("getProductV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getProductV2", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetProduct struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetProduct) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetProductArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getProduct", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetProductResult{}
var retval *GetProductStruct
  var err2 error
  if retval, err2 = p.handler.GetProduct(ctx, args.ShopId, args.ProductId, args.Locale); err2 != nil {
  switch v := err2.(type) {
    case *ShopExecption:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProduct: " + err2.Error())
    oprot.WriteMessageBegin("getProduct", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getProduct", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorPlacePurchaseOrderForFreeProduct struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorPlacePurchaseOrderForFreeProduct) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServicePlacePurchaseOrderForFreeProductArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("placePurchaseOrderForFreeProduct", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServicePlacePurchaseOrderForFreeProductResult{}
var retval *PurchaseOrderResponseStruct
  var err2 error
  if retval, err2 = p.handler.PlacePurchaseOrderForFreeProduct(ctx, args.PurchaseOrder); err2 != nil {
  switch v := err2.(type) {
    case *ShopExecption:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing placePurchaseOrderForFreeProduct: " + err2.Error())
    oprot.WriteMessageBegin("placePurchaseOrderForFreeProduct", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("placePurchaseOrderForFreeProduct", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorPlacePurchaseOrderWithLineCoin struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorPlacePurchaseOrderWithLineCoin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServicePlacePurchaseOrderWithLineCoinArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("placePurchaseOrderWithLineCoin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServicePlacePurchaseOrderWithLineCoinResult{}
var retval *PurchaseOrderResponseStruct
  var err2 error
  if retval, err2 = p.handler.PlacePurchaseOrderWithLineCoin(ctx, args.PurchaseOrder); err2 != nil {
  switch v := err2.(type) {
    case *ShopExecption:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing placePurchaseOrderWithLineCoin: " + err2.Error())
    oprot.WriteMessageBegin("placePurchaseOrderWithLineCoin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("placePurchaseOrderWithLineCoin", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetShowcaseV3 struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetShowcaseV3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetShowcaseV3Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getShowcaseV3", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetShowcaseV3Result{}
var retval *ShowcaseV3Response
  var err2 error
  if retval, err2 = p.handler.GetShowcaseV3(ctx, args.ShowcaseRequest); err2 != nil {
  switch v := err2.(type) {
    case *ShopExecption:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getShowcaseV3: " + err2.Error())
    oprot.WriteMessageBegin("getShowcaseV3", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getShowcaseV3", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetAuthQrcode struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetAuthQrcode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetAuthQrcodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAuthQrcode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetAuthQrcodeResult{}
var retval *AuthQrcodeStruct
  var err2 error
  if retval, err2 = p.handler.GetAuthQrcode(ctx, args.KeepLoggedIn, args.SystemName, args.ReturnCallbackUrl); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAuthQrcode: " + err2.Error())
    oprot.WriteMessageBegin("getAuthQrcode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAuthQrcode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorLoginZ struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorLoginZ) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceLoginZArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("loginZ", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceLoginZResult{}
var retval *LoginResultStruct
  var err2 error
  if retval, err2 = p.handler.LoginZ(ctx, args.LoginRequest); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loginZ: " + err2.Error())
    oprot.WriteMessageBegin("loginZ", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("loginZ", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorAcquireEncryptedAccessToken struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorAcquireEncryptedAccessToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceAcquireEncryptedAccessTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceAcquireEncryptedAccessTokenResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.AcquireEncryptedAccessToken(ctx, args.FeatureType); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireEncryptedAccessToken: " + err2.Error())
    oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGenerateUserTicket struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGenerateUserTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGenerateUserTicketArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("generateUserTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGenerateUserTicketResult{}
var retval *TicketStruct
  var err2 error
  if retval, err2 = p.handler.GenerateUserTicket(ctx, args.ExpirationTime, args.MaxUseCount); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing generateUserTicket: " + err2.Error())
    oprot.WriteMessageBegin("generateUserTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("generateUserTicket", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorUnsendMessage struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorUnsendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceUnsendMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("unsendMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceUnsendMessageResult{}
  var err2 error
  if err2 = p.handler.UnsendMessage(ctx, args.Seq, args.MessageId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unsendMessage: " + err2.Error())
    oprot.WriteMessageBegin("unsendMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("unsendMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorReport struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorReport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceReportArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("report", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceReportResult{}
  var err2 error
  if err2 = p.handler.Report(ctx, args.SyncOpRevision, args.Category, args.Report); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing report: " + err2.Error())
    oprot.WriteMessageBegin("report", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("report", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorCreateRoomV2 struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorCreateRoomV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceCreateRoomV2Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createRoomV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceCreateRoomV2Result{}
var retval *RoomStruct
  var err2 error
  if retval, err2 = p.handler.CreateRoomV2(ctx, args.ReqSeq, args.ContactIds); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createRoomV2: " + err2.Error())
    oprot.WriteMessageBegin("createRoomV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createRoomV2", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorGetRoomsV2 struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorGetRoomsV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceGetRoomsV2Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRoomsV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceGetRoomsV2Result{}
var retval []*RoomStruct
  var err2 error
  if retval, err2 = p.handler.GetRoomsV2(ctx, args.RoomIds); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRoomsV2: " + err2.Error())
    oprot.WriteMessageBegin("getRoomsV2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getRoomsV2", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorInviteIntoRoom struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorInviteIntoRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceInviteIntoRoomArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("inviteIntoRoom", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceInviteIntoRoomResult{}
  var err2 error
  if err2 = p.handler.InviteIntoRoom(ctx, args.ReqSeq, args.RoomId, args.ContactIds); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoRoom: " + err2.Error())
    oprot.WriteMessageBegin("inviteIntoRoom", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("inviteIntoRoom", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type boteaterServiceProcessorLeaveRoom struct {
  handler BoteaterService
}

func (p *boteaterServiceProcessorLeaveRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BoteaterServiceLeaveRoomArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("leaveRoom", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BoteaterServiceLeaveRoomResult{}
  var err2 error
  if err2 = p.handler.LeaveRoom(ctx, args.ReqSeq, args.RoomId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaveRoom: " + err2.Error())
    oprot.WriteMessageBegin("leaveRoom", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("leaveRoom", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Seq
//  - Message
type BoteaterServiceSendMessageArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  Message *MessageStruct `thrift:"message,2" db:"message" json:"message"`
}

func NewBoteaterServiceSendMessageArgs() *BoteaterServiceSendMessageArgs {
  return &BoteaterServiceSendMessageArgs{}
}


func (p *BoteaterServiceSendMessageArgs) GetSeq() int32 {
  return p.Seq
}
var BoteaterServiceSendMessageArgs_Message_DEFAULT *MessageStruct
func (p *BoteaterServiceSendMessageArgs) GetMessage() *MessageStruct {
  if !p.IsSetMessage() {
    return BoteaterServiceSendMessageArgs_Message_DEFAULT
  }
return p.Message
}
func (p *BoteaterServiceSendMessageArgs) IsSetMessage() bool {
  return p.Message != nil
}

func (p *BoteaterServiceSendMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceSendMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *BoteaterServiceSendMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Message = &MessageStruct{}
  if err := p.Message.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
  }
  return nil
}

func (p *BoteaterServiceSendMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceSendMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *BoteaterServiceSendMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := p.Message.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *BoteaterServiceSendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceSendMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceSendMessageResult struct {
  Success *MessageStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceSendMessageResult() *BoteaterServiceSendMessageResult {
  return &BoteaterServiceSendMessageResult{}
}

var BoteaterServiceSendMessageResult_Success_DEFAULT *MessageStruct
func (p *BoteaterServiceSendMessageResult) GetSuccess() *MessageStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceSendMessageResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceSendMessageResult_E_DEFAULT *TalkException
func (p *BoteaterServiceSendMessageResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceSendMessageResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceSendMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceSendMessageResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceSendMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceSendMessageResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &MessageStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceSendMessageResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceSendMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceSendMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceSendMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceSendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceSendMessageResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - ChatMid
//  - LastMessageId
type BoteaterServiceSendChatCheckedArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  LastMessageId string `thrift:"lastMessageId,3" db:"lastMessageId" json:"lastMessageId"`
}

func NewBoteaterServiceSendChatCheckedArgs() *BoteaterServiceSendChatCheckedArgs {
  return &BoteaterServiceSendChatCheckedArgs{}
}


func (p *BoteaterServiceSendChatCheckedArgs) GetSeq() int32 {
  return p.Seq
}

func (p *BoteaterServiceSendChatCheckedArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *BoteaterServiceSendChatCheckedArgs) GetLastMessageId() string {
  return p.LastMessageId
}
func (p *BoteaterServiceSendChatCheckedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceSendChatCheckedArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *BoteaterServiceSendChatCheckedArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *BoteaterServiceSendChatCheckedArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *BoteaterServiceSendChatCheckedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendChatChecked_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceSendChatCheckedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *BoteaterServiceSendChatCheckedArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *BoteaterServiceSendChatCheckedArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastMessageId: ", p), err) }
  if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastMessageId: ", p), err) }
  return err
}

func (p *BoteaterServiceSendChatCheckedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceSendChatCheckedArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceSendChatCheckedResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceSendChatCheckedResult() *BoteaterServiceSendChatCheckedResult {
  return &BoteaterServiceSendChatCheckedResult{}
}

var BoteaterServiceSendChatCheckedResult_E_DEFAULT *TalkException
func (p *BoteaterServiceSendChatCheckedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceSendChatCheckedResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceSendChatCheckedResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceSendChatCheckedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceSendChatCheckedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceSendChatCheckedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendChatChecked_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceSendChatCheckedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceSendChatCheckedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceSendChatCheckedResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - LastMessageId
type BoteaterServiceRemoveAllMessagesArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  LastMessageId string `thrift:"lastMessageId,2" db:"lastMessageId" json:"lastMessageId"`
}

func NewBoteaterServiceRemoveAllMessagesArgs() *BoteaterServiceRemoveAllMessagesArgs {
  return &BoteaterServiceRemoveAllMessagesArgs{}
}


func (p *BoteaterServiceRemoveAllMessagesArgs) GetSeq() int32 {
  return p.Seq
}

func (p *BoteaterServiceRemoveAllMessagesArgs) GetLastMessageId() string {
  return p.LastMessageId
}
func (p *BoteaterServiceRemoveAllMessagesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceRemoveAllMessagesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *BoteaterServiceRemoveAllMessagesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *BoteaterServiceRemoveAllMessagesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAllMessages_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceRemoveAllMessagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *BoteaterServiceRemoveAllMessagesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastMessageId: ", p), err) }
  if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastMessageId: ", p), err) }
  return err
}

func (p *BoteaterServiceRemoveAllMessagesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceRemoveAllMessagesArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceRemoveAllMessagesResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceRemoveAllMessagesResult() *BoteaterServiceRemoveAllMessagesResult {
  return &BoteaterServiceRemoveAllMessagesResult{}
}

var BoteaterServiceRemoveAllMessagesResult_E_DEFAULT *TalkException
func (p *BoteaterServiceRemoveAllMessagesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceRemoveAllMessagesResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceRemoveAllMessagesResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceRemoveAllMessagesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceRemoveAllMessagesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceRemoveAllMessagesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAllMessages_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceRemoveAllMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceRemoveAllMessagesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceRemoveAllMessagesResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
type BoteaterServiceSendChatRemovedArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  LastMessageId string `thrift:"lastMessageId,3" db:"lastMessageId" json:"lastMessageId"`
  SessionId int64 `thrift:"sessionId,4" db:"sessionId" json:"sessionId"`
}

func NewBoteaterServiceSendChatRemovedArgs() *BoteaterServiceSendChatRemovedArgs {
  return &BoteaterServiceSendChatRemovedArgs{}
}


func (p *BoteaterServiceSendChatRemovedArgs) GetSeq() int32 {
  return p.Seq
}

func (p *BoteaterServiceSendChatRemovedArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *BoteaterServiceSendChatRemovedArgs) GetLastMessageId() string {
  return p.LastMessageId
}

func (p *BoteaterServiceSendChatRemovedArgs) GetSessionId() int64 {
  return p.SessionId
}
func (p *BoteaterServiceSendChatRemovedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceSendChatRemovedArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *BoteaterServiceSendChatRemovedArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *BoteaterServiceSendChatRemovedArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *BoteaterServiceSendChatRemovedArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *BoteaterServiceSendChatRemovedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendChatRemoved_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceSendChatRemovedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *BoteaterServiceSendChatRemovedArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *BoteaterServiceSendChatRemovedArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastMessageId: ", p), err) }
  if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastMessageId: ", p), err) }
  return err
}

func (p *BoteaterServiceSendChatRemovedArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionId: ", p), err) }
  if err := oprot.WriteI64(int64(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionId: ", p), err) }
  return err
}

func (p *BoteaterServiceSendChatRemovedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceSendChatRemovedArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceSendChatRemovedResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceSendChatRemovedResult() *BoteaterServiceSendChatRemovedResult {
  return &BoteaterServiceSendChatRemovedResult{}
}

var BoteaterServiceSendChatRemovedResult_E_DEFAULT *TalkException
func (p *BoteaterServiceSendChatRemovedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceSendChatRemovedResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceSendChatRemovedResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceSendChatRemovedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceSendChatRemovedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceSendChatRemovedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendChatRemoved_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceSendChatRemovedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceSendChatRemovedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceSendChatRemovedResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type BoteaterServiceGetGroupWithoutMembersArgs struct {
  // unused field # 1
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewBoteaterServiceGetGroupWithoutMembersArgs() *BoteaterServiceGetGroupWithoutMembersArgs {
  return &BoteaterServiceGetGroupWithoutMembersArgs{}
}


func (p *BoteaterServiceGetGroupWithoutMembersArgs) GetGroupId() string {
  return p.GroupId
}
func (p *BoteaterServiceGetGroupWithoutMembersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupWithoutMembersArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *BoteaterServiceGetGroupWithoutMembersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroupWithoutMembers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetGroupWithoutMembersArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *BoteaterServiceGetGroupWithoutMembersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetGroupWithoutMembersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetGroupWithoutMembersResult struct {
  Success *GroupStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetGroupWithoutMembersResult() *BoteaterServiceGetGroupWithoutMembersResult {
  return &BoteaterServiceGetGroupWithoutMembersResult{}
}

var BoteaterServiceGetGroupWithoutMembersResult_Success_DEFAULT *GroupStruct
func (p *BoteaterServiceGetGroupWithoutMembersResult) GetSuccess() *GroupStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetGroupWithoutMembersResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGetGroupWithoutMembersResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGetGroupWithoutMembersResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetGroupWithoutMembersResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetGroupWithoutMembersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetGroupWithoutMembersResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetGroupWithoutMembersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupWithoutMembersResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GroupStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupWithoutMembersResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupWithoutMembersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroupWithoutMembers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetGroupWithoutMembersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetGroupWithoutMembersResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetGroupWithoutMembersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetGroupWithoutMembersResult(%+v)", *p)
}

// Attributes:
//  - GroupId
type BoteaterServiceGetGroupsV2Args struct {
  // unused field # 1
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewBoteaterServiceGetGroupsV2Args() *BoteaterServiceGetGroupsV2Args {
  return &BoteaterServiceGetGroupsV2Args{}
}


func (p *BoteaterServiceGetGroupsV2Args) GetGroupId() string {
  return p.GroupId
}
func (p *BoteaterServiceGetGroupsV2Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupsV2Args)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *BoteaterServiceGetGroupsV2Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroupsV2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetGroupsV2Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *BoteaterServiceGetGroupsV2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetGroupsV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetGroupsV2Result struct {
  Success *GroupStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetGroupsV2Result() *BoteaterServiceGetGroupsV2Result {
  return &BoteaterServiceGetGroupsV2Result{}
}

var BoteaterServiceGetGroupsV2Result_Success_DEFAULT *GroupStruct
func (p *BoteaterServiceGetGroupsV2Result) GetSuccess() *GroupStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetGroupsV2Result_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGetGroupsV2Result_E_DEFAULT *TalkException
func (p *BoteaterServiceGetGroupsV2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetGroupsV2Result_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetGroupsV2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetGroupsV2Result) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetGroupsV2Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupsV2Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GroupStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupsV2Result)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupsV2Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroupsV2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetGroupsV2Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetGroupsV2Result) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetGroupsV2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetGroupsV2Result(%+v)", *p)
}

// Attributes:
//  - GroupId
type BoteaterServiceGetGroupArgs struct {
  // unused field # 1
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewBoteaterServiceGetGroupArgs() *BoteaterServiceGetGroupArgs {
  return &BoteaterServiceGetGroupArgs{}
}


func (p *BoteaterServiceGetGroupArgs) GetGroupId() string {
  return p.GroupId
}
func (p *BoteaterServiceGetGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *BoteaterServiceGetGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *BoteaterServiceGetGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetGroupResult struct {
  Success *GroupStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetGroupResult() *BoteaterServiceGetGroupResult {
  return &BoteaterServiceGetGroupResult{}
}

var BoteaterServiceGetGroupResult_Success_DEFAULT *GroupStruct
func (p *BoteaterServiceGetGroupResult) GetSuccess() *GroupStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetGroupResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGetGroupResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGetGroupResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetGroupResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetGroupResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GroupStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetGroupResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - Name
//  - ContactIds
type BoteaterServiceCreateGroupV2Args struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewBoteaterServiceCreateGroupV2Args() *BoteaterServiceCreateGroupV2Args {
  return &BoteaterServiceCreateGroupV2Args{}
}


func (p *BoteaterServiceCreateGroupV2Args) GetSeq() int32 {
  return p.Seq
}

func (p *BoteaterServiceCreateGroupV2Args) GetName() string {
  return p.Name
}

func (p *BoteaterServiceCreateGroupV2Args) GetContactIds() []string {
  return p.ContactIds
}
func (p *BoteaterServiceCreateGroupV2Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceCreateGroupV2Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *BoteaterServiceCreateGroupV2Args)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *BoteaterServiceCreateGroupV2Args)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem175 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem175 = v
}
    p.ContactIds = append(p.ContactIds, _elem175)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceCreateGroupV2Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createGroupV2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceCreateGroupV2Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *BoteaterServiceCreateGroupV2Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *BoteaterServiceCreateGroupV2Args) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err) }
  return err
}

func (p *BoteaterServiceCreateGroupV2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceCreateGroupV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceCreateGroupV2Result struct {
  Success *GroupStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceCreateGroupV2Result() *BoteaterServiceCreateGroupV2Result {
  return &BoteaterServiceCreateGroupV2Result{}
}

var BoteaterServiceCreateGroupV2Result_Success_DEFAULT *GroupStruct
func (p *BoteaterServiceCreateGroupV2Result) GetSuccess() *GroupStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceCreateGroupV2Result_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceCreateGroupV2Result_E_DEFAULT *TalkException
func (p *BoteaterServiceCreateGroupV2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceCreateGroupV2Result_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceCreateGroupV2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceCreateGroupV2Result) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceCreateGroupV2Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceCreateGroupV2Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GroupStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceCreateGroupV2Result)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceCreateGroupV2Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createGroupV2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceCreateGroupV2Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceCreateGroupV2Result) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceCreateGroupV2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceCreateGroupV2Result(%+v)", *p)
}

// Attributes:
//  - GroupId
type BoteaterServiceGetCompactGroupArgs struct {
  // unused field # 1
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewBoteaterServiceGetCompactGroupArgs() *BoteaterServiceGetCompactGroupArgs {
  return &BoteaterServiceGetCompactGroupArgs{}
}


func (p *BoteaterServiceGetCompactGroupArgs) GetGroupId() string {
  return p.GroupId
}
func (p *BoteaterServiceGetCompactGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetCompactGroupArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *BoteaterServiceGetCompactGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCompactGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetCompactGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *BoteaterServiceGetCompactGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetCompactGroupArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetCompactGroupResult struct {
  Success *GroupStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetCompactGroupResult() *BoteaterServiceGetCompactGroupResult {
  return &BoteaterServiceGetCompactGroupResult{}
}

var BoteaterServiceGetCompactGroupResult_Success_DEFAULT *GroupStruct
func (p *BoteaterServiceGetCompactGroupResult) GetSuccess() *GroupStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetCompactGroupResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGetCompactGroupResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGetCompactGroupResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetCompactGroupResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetCompactGroupResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetCompactGroupResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetCompactGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetCompactGroupResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GroupStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGetCompactGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetCompactGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCompactGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetCompactGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetCompactGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetCompactGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetCompactGroupResult(%+v)", *p)
}

type BoteaterServiceGetGroupIdsInvitedArgs struct {
}

func NewBoteaterServiceGetGroupIdsInvitedArgs() *BoteaterServiceGetGroupIdsInvitedArgs {
  return &BoteaterServiceGetGroupIdsInvitedArgs{}
}

func (p *BoteaterServiceGetGroupIdsInvitedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupIdsInvitedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroupIdsInvited_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetGroupIdsInvitedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetGroupIdsInvitedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetGroupIdsInvitedResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetGroupIdsInvitedResult() *BoteaterServiceGetGroupIdsInvitedResult {
  return &BoteaterServiceGetGroupIdsInvitedResult{}
}

var BoteaterServiceGetGroupIdsInvitedResult_Success_DEFAULT []string

func (p *BoteaterServiceGetGroupIdsInvitedResult) GetSuccess() []string {
  return p.Success
}
var BoteaterServiceGetGroupIdsInvitedResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGetGroupIdsInvitedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetGroupIdsInvitedResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetGroupIdsInvitedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetGroupIdsInvitedResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetGroupIdsInvitedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupIdsInvitedResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem176 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem176 = v
}
    p.Success = append(p.Success, _elem176)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupIdsInvitedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupIdsInvitedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroupIdsInvited_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetGroupIdsInvitedResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetGroupIdsInvitedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetGroupIdsInvitedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetGroupIdsInvitedResult(%+v)", *p)
}

type BoteaterServiceGetGroupIdsJoinedArgs struct {
}

func NewBoteaterServiceGetGroupIdsJoinedArgs() *BoteaterServiceGetGroupIdsJoinedArgs {
  return &BoteaterServiceGetGroupIdsJoinedArgs{}
}

func (p *BoteaterServiceGetGroupIdsJoinedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupIdsJoinedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroupIdsJoined_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetGroupIdsJoinedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetGroupIdsJoinedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetGroupIdsJoinedResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetGroupIdsJoinedResult() *BoteaterServiceGetGroupIdsJoinedResult {
  return &BoteaterServiceGetGroupIdsJoinedResult{}
}

var BoteaterServiceGetGroupIdsJoinedResult_Success_DEFAULT []string

func (p *BoteaterServiceGetGroupIdsJoinedResult) GetSuccess() []string {
  return p.Success
}
var BoteaterServiceGetGroupIdsJoinedResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGetGroupIdsJoinedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetGroupIdsJoinedResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetGroupIdsJoinedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetGroupIdsJoinedResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetGroupIdsJoinedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupIdsJoinedResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem177 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem177 = v
}
    p.Success = append(p.Success, _elem177)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupIdsJoinedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupIdsJoinedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroupIdsJoined_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetGroupIdsJoinedResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetGroupIdsJoinedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetGroupIdsJoinedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetGroupIdsJoinedResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
type BoteaterServiceGetGroupCallArgs struct {
  // unused field # 1
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewBoteaterServiceGetGroupCallArgs() *BoteaterServiceGetGroupCallArgs {
  return &BoteaterServiceGetGroupCallArgs{}
}


func (p *BoteaterServiceGetGroupCallArgs) GetChatMid() string {
  return p.ChatMid
}
func (p *BoteaterServiceGetGroupCallArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupCallArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *BoteaterServiceGetGroupCallArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroupCall_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetGroupCallArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *BoteaterServiceGetGroupCallArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetGroupCallArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetGroupCallResult struct {
  Success *GroupCallStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetGroupCallResult() *BoteaterServiceGetGroupCallResult {
  return &BoteaterServiceGetGroupCallResult{}
}

var BoteaterServiceGetGroupCallResult_Success_DEFAULT *GroupCallStruct
func (p *BoteaterServiceGetGroupCallResult) GetSuccess() *GroupCallStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetGroupCallResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGetGroupCallResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGetGroupCallResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetGroupCallResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetGroupCallResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetGroupCallResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetGroupCallResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupCallResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GroupCallStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupCallResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetGroupCallResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroupCall_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetGroupCallResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetGroupCallResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetGroupCallResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetGroupCallResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
//  - MediaType
//  - IsInitialHost
//  - Capabilities
type BoteaterServiceAcquireGroupCallRouteArgs struct {
  // unused field # 1
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  MediaType GroupCallMediaTypeEnum `thrift:"mediaType,3" db:"mediaType" json:"mediaType"`
  IsInitialHost bool `thrift:"isInitialHost,4" db:"isInitialHost" json:"isInitialHost"`
  Capabilities []string `thrift:"capabilities,5" db:"capabilities" json:"capabilities"`
}

func NewBoteaterServiceAcquireGroupCallRouteArgs() *BoteaterServiceAcquireGroupCallRouteArgs {
  return &BoteaterServiceAcquireGroupCallRouteArgs{}
}


func (p *BoteaterServiceAcquireGroupCallRouteArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *BoteaterServiceAcquireGroupCallRouteArgs) GetMediaType() GroupCallMediaTypeEnum {
  return p.MediaType
}

func (p *BoteaterServiceAcquireGroupCallRouteArgs) GetIsInitialHost() bool {
  return p.IsInitialHost
}

func (p *BoteaterServiceAcquireGroupCallRouteArgs) GetCapabilities() []string {
  return p.Capabilities
}
func (p *BoteaterServiceAcquireGroupCallRouteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceAcquireGroupCallRouteArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *BoteaterServiceAcquireGroupCallRouteArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := GroupCallMediaTypeEnum(v)
  p.MediaType = temp
}
  return nil
}

func (p *BoteaterServiceAcquireGroupCallRouteArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsInitialHost = v
}
  return nil
}

func (p *BoteaterServiceAcquireGroupCallRouteArgs)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Capabilities =  tSlice
  for i := 0; i < size; i ++ {
var _elem178 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem178 = v
}
    p.Capabilities = append(p.Capabilities, _elem178)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceAcquireGroupCallRouteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acquireGroupCallRoute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceAcquireGroupCallRouteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *BoteaterServiceAcquireGroupCallRouteArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mediaType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mediaType: ", p), err) }
  if err := oprot.WriteI32(int32(p.MediaType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mediaType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mediaType: ", p), err) }
  return err
}

func (p *BoteaterServiceAcquireGroupCallRouteArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isInitialHost", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isInitialHost: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsInitialHost)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isInitialHost (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isInitialHost: ", p), err) }
  return err
}

func (p *BoteaterServiceAcquireGroupCallRouteArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("capabilities", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:capabilities: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Capabilities)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Capabilities {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:capabilities: ", p), err) }
  return err
}

func (p *BoteaterServiceAcquireGroupCallRouteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceAcquireGroupCallRouteArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceAcquireGroupCallRouteResult struct {
  Success *GroupCallRouteStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceAcquireGroupCallRouteResult() *BoteaterServiceAcquireGroupCallRouteResult {
  return &BoteaterServiceAcquireGroupCallRouteResult{}
}

var BoteaterServiceAcquireGroupCallRouteResult_Success_DEFAULT *GroupCallRouteStruct
func (p *BoteaterServiceAcquireGroupCallRouteResult) GetSuccess() *GroupCallRouteStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceAcquireGroupCallRouteResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceAcquireGroupCallRouteResult_E_DEFAULT *TalkException
func (p *BoteaterServiceAcquireGroupCallRouteResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceAcquireGroupCallRouteResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceAcquireGroupCallRouteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceAcquireGroupCallRouteResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceAcquireGroupCallRouteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceAcquireGroupCallRouteResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GroupCallRouteStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceAcquireGroupCallRouteResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceAcquireGroupCallRouteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acquireGroupCallRoute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceAcquireGroupCallRouteResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceAcquireGroupCallRouteResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceAcquireGroupCallRouteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceAcquireGroupCallRouteResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
//  - ContactIds
type BoteaterServiceInviteIntoGroupArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
  ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewBoteaterServiceInviteIntoGroupArgs() *BoteaterServiceInviteIntoGroupArgs {
  return &BoteaterServiceInviteIntoGroupArgs{}
}


func (p *BoteaterServiceInviteIntoGroupArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceInviteIntoGroupArgs) GetGroupId() string {
  return p.GroupId
}

func (p *BoteaterServiceInviteIntoGroupArgs) GetContactIds() []string {
  return p.ContactIds
}
func (p *BoteaterServiceInviteIntoGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceInviteIntoGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceInviteIntoGroupArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *BoteaterServiceInviteIntoGroupArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem179 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem179 = v
}
    p.ContactIds = append(p.ContactIds, _elem179)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceInviteIntoGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("inviteIntoGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceInviteIntoGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceInviteIntoGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *BoteaterServiceInviteIntoGroupArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err) }
  return err
}

func (p *BoteaterServiceInviteIntoGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceInviteIntoGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceInviteIntoGroupResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceInviteIntoGroupResult() *BoteaterServiceInviteIntoGroupResult {
  return &BoteaterServiceInviteIntoGroupResult{}
}

var BoteaterServiceInviteIntoGroupResult_E_DEFAULT *TalkException
func (p *BoteaterServiceInviteIntoGroupResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceInviteIntoGroupResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceInviteIntoGroupResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceInviteIntoGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceInviteIntoGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceInviteIntoGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("inviteIntoGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceInviteIntoGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceInviteIntoGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceInviteIntoGroupResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupMid
//  - TicketId
type BoteaterServiceAcceptGroupInvitationByTicketArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupMid string `thrift:"groupMid,2" db:"groupMid" json:"groupMid"`
  TicketId string `thrift:"ticketId,3" db:"ticketId" json:"ticketId"`
}

func NewBoteaterServiceAcceptGroupInvitationByTicketArgs() *BoteaterServiceAcceptGroupInvitationByTicketArgs {
  return &BoteaterServiceAcceptGroupInvitationByTicketArgs{}
}


func (p *BoteaterServiceAcceptGroupInvitationByTicketArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceAcceptGroupInvitationByTicketArgs) GetGroupMid() string {
  return p.GroupMid
}

func (p *BoteaterServiceAcceptGroupInvitationByTicketArgs) GetTicketId() string {
  return p.TicketId
}
func (p *BoteaterServiceAcceptGroupInvitationByTicketArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceAcceptGroupInvitationByTicketArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceAcceptGroupInvitationByTicketArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupMid = v
}
  return nil
}

func (p *BoteaterServiceAcceptGroupInvitationByTicketArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TicketId = v
}
  return nil
}

func (p *BoteaterServiceAcceptGroupInvitationByTicketArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acceptGroupInvitationByTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceAcceptGroupInvitationByTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceAcceptGroupInvitationByTicketArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupMid: ", p), err) }
  if err := oprot.WriteString(string(p.GroupMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupMid: ", p), err) }
  return err
}

func (p *BoteaterServiceAcceptGroupInvitationByTicketArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ticketId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ticketId: ", p), err) }
  if err := oprot.WriteString(string(p.TicketId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ticketId: ", p), err) }
  return err
}

func (p *BoteaterServiceAcceptGroupInvitationByTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceAcceptGroupInvitationByTicketArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceAcceptGroupInvitationByTicketResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceAcceptGroupInvitationByTicketResult() *BoteaterServiceAcceptGroupInvitationByTicketResult {
  return &BoteaterServiceAcceptGroupInvitationByTicketResult{}
}

var BoteaterServiceAcceptGroupInvitationByTicketResult_E_DEFAULT *TalkException
func (p *BoteaterServiceAcceptGroupInvitationByTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceAcceptGroupInvitationByTicketResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceAcceptGroupInvitationByTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceAcceptGroupInvitationByTicketResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceAcceptGroupInvitationByTicketResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceAcceptGroupInvitationByTicketResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acceptGroupInvitationByTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceAcceptGroupInvitationByTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceAcceptGroupInvitationByTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceAcceptGroupInvitationByTicketResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
type BoteaterServiceRejectGroupInvitationArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewBoteaterServiceRejectGroupInvitationArgs() *BoteaterServiceRejectGroupInvitationArgs {
  return &BoteaterServiceRejectGroupInvitationArgs{}
}


func (p *BoteaterServiceRejectGroupInvitationArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceRejectGroupInvitationArgs) GetGroupId() string {
  return p.GroupId
}
func (p *BoteaterServiceRejectGroupInvitationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceRejectGroupInvitationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceRejectGroupInvitationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *BoteaterServiceRejectGroupInvitationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rejectGroupInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceRejectGroupInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceRejectGroupInvitationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *BoteaterServiceRejectGroupInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceRejectGroupInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceRejectGroupInvitationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceRejectGroupInvitationResult() *BoteaterServiceRejectGroupInvitationResult {
  return &BoteaterServiceRejectGroupInvitationResult{}
}

var BoteaterServiceRejectGroupInvitationResult_E_DEFAULT *TalkException
func (p *BoteaterServiceRejectGroupInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceRejectGroupInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceRejectGroupInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceRejectGroupInvitationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceRejectGroupInvitationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceRejectGroupInvitationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rejectGroupInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceRejectGroupInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceRejectGroupInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceRejectGroupInvitationResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
type BoteaterServiceAcceptGroupInvitationArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewBoteaterServiceAcceptGroupInvitationArgs() *BoteaterServiceAcceptGroupInvitationArgs {
  return &BoteaterServiceAcceptGroupInvitationArgs{}
}


func (p *BoteaterServiceAcceptGroupInvitationArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceAcceptGroupInvitationArgs) GetGroupId() string {
  return p.GroupId
}
func (p *BoteaterServiceAcceptGroupInvitationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceAcceptGroupInvitationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceAcceptGroupInvitationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *BoteaterServiceAcceptGroupInvitationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acceptGroupInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceAcceptGroupInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceAcceptGroupInvitationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *BoteaterServiceAcceptGroupInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceAcceptGroupInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceAcceptGroupInvitationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceAcceptGroupInvitationResult() *BoteaterServiceAcceptGroupInvitationResult {
  return &BoteaterServiceAcceptGroupInvitationResult{}
}

var BoteaterServiceAcceptGroupInvitationResult_E_DEFAULT *TalkException
func (p *BoteaterServiceAcceptGroupInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceAcceptGroupInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceAcceptGroupInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceAcceptGroupInvitationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceAcceptGroupInvitationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceAcceptGroupInvitationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acceptGroupInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceAcceptGroupInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceAcceptGroupInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceAcceptGroupInvitationResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
//  - ContactIds
type BoteaterServiceCancelGroupInvitationArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
  ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewBoteaterServiceCancelGroupInvitationArgs() *BoteaterServiceCancelGroupInvitationArgs {
  return &BoteaterServiceCancelGroupInvitationArgs{}
}


func (p *BoteaterServiceCancelGroupInvitationArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceCancelGroupInvitationArgs) GetGroupId() string {
  return p.GroupId
}

func (p *BoteaterServiceCancelGroupInvitationArgs) GetContactIds() []string {
  return p.ContactIds
}
func (p *BoteaterServiceCancelGroupInvitationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceCancelGroupInvitationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceCancelGroupInvitationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *BoteaterServiceCancelGroupInvitationArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem180 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem180 = v
}
    p.ContactIds = append(p.ContactIds, _elem180)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceCancelGroupInvitationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cancelGroupInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceCancelGroupInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceCancelGroupInvitationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *BoteaterServiceCancelGroupInvitationArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err) }
  return err
}

func (p *BoteaterServiceCancelGroupInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceCancelGroupInvitationArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceCancelGroupInvitationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceCancelGroupInvitationResult() *BoteaterServiceCancelGroupInvitationResult {
  return &BoteaterServiceCancelGroupInvitationResult{}
}

var BoteaterServiceCancelGroupInvitationResult_E_DEFAULT *TalkException
func (p *BoteaterServiceCancelGroupInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceCancelGroupInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceCancelGroupInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceCancelGroupInvitationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceCancelGroupInvitationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceCancelGroupInvitationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cancelGroupInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceCancelGroupInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceCancelGroupInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceCancelGroupInvitationResult(%+v)", *p)
}

// Attributes:
//  - TicketId
type BoteaterServiceFindGroupByTicketArgs struct {
  TicketId string `thrift:"ticketId,1" db:"ticketId" json:"ticketId"`
}

func NewBoteaterServiceFindGroupByTicketArgs() *BoteaterServiceFindGroupByTicketArgs {
  return &BoteaterServiceFindGroupByTicketArgs{}
}


func (p *BoteaterServiceFindGroupByTicketArgs) GetTicketId() string {
  return p.TicketId
}
func (p *BoteaterServiceFindGroupByTicketArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceFindGroupByTicketArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TicketId = v
}
  return nil
}

func (p *BoteaterServiceFindGroupByTicketArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findGroupByTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceFindGroupByTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ticketId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticketId: ", p), err) }
  if err := oprot.WriteString(string(p.TicketId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticketId: ", p), err) }
  return err
}

func (p *BoteaterServiceFindGroupByTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceFindGroupByTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceFindGroupByTicketResult struct {
  Success *GroupStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceFindGroupByTicketResult() *BoteaterServiceFindGroupByTicketResult {
  return &BoteaterServiceFindGroupByTicketResult{}
}

var BoteaterServiceFindGroupByTicketResult_Success_DEFAULT *GroupStruct
func (p *BoteaterServiceFindGroupByTicketResult) GetSuccess() *GroupStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceFindGroupByTicketResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceFindGroupByTicketResult_E_DEFAULT *TalkException
func (p *BoteaterServiceFindGroupByTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceFindGroupByTicketResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceFindGroupByTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceFindGroupByTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceFindGroupByTicketResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceFindGroupByTicketResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GroupStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceFindGroupByTicketResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceFindGroupByTicketResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findGroupByTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceFindGroupByTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceFindGroupByTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceFindGroupByTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceFindGroupByTicketResult(%+v)", *p)
}

// Attributes:
//  - GroupMid
type BoteaterServiceReissueGroupTicketArgs struct {
  GroupMid string `thrift:"groupMid,1" db:"groupMid" json:"groupMid"`
}

func NewBoteaterServiceReissueGroupTicketArgs() *BoteaterServiceReissueGroupTicketArgs {
  return &BoteaterServiceReissueGroupTicketArgs{}
}


func (p *BoteaterServiceReissueGroupTicketArgs) GetGroupMid() string {
  return p.GroupMid
}
func (p *BoteaterServiceReissueGroupTicketArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceReissueGroupTicketArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GroupMid = v
}
  return nil
}

func (p *BoteaterServiceReissueGroupTicketArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reissueGroupTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceReissueGroupTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupMid: ", p), err) }
  if err := oprot.WriteString(string(p.GroupMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupMid: ", p), err) }
  return err
}

func (p *BoteaterServiceReissueGroupTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceReissueGroupTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceReissueGroupTicketResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceReissueGroupTicketResult() *BoteaterServiceReissueGroupTicketResult {
  return &BoteaterServiceReissueGroupTicketResult{}
}

var BoteaterServiceReissueGroupTicketResult_Success_DEFAULT string
func (p *BoteaterServiceReissueGroupTicketResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return BoteaterServiceReissueGroupTicketResult_Success_DEFAULT
  }
return *p.Success
}
var BoteaterServiceReissueGroupTicketResult_E_DEFAULT *TalkException
func (p *BoteaterServiceReissueGroupTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceReissueGroupTicketResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceReissueGroupTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceReissueGroupTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceReissueGroupTicketResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceReissueGroupTicketResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *BoteaterServiceReissueGroupTicketResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceReissueGroupTicketResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reissueGroupTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceReissueGroupTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceReissueGroupTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceReissueGroupTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceReissueGroupTicketResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
//  - ContactIds
type BoteaterServiceKickoutFromGroupArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
  ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewBoteaterServiceKickoutFromGroupArgs() *BoteaterServiceKickoutFromGroupArgs {
  return &BoteaterServiceKickoutFromGroupArgs{}
}


func (p *BoteaterServiceKickoutFromGroupArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceKickoutFromGroupArgs) GetGroupId() string {
  return p.GroupId
}

func (p *BoteaterServiceKickoutFromGroupArgs) GetContactIds() []string {
  return p.ContactIds
}
func (p *BoteaterServiceKickoutFromGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceKickoutFromGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceKickoutFromGroupArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *BoteaterServiceKickoutFromGroupArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem181 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem181 = v
}
    p.ContactIds = append(p.ContactIds, _elem181)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceKickoutFromGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("kickoutFromGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceKickoutFromGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceKickoutFromGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *BoteaterServiceKickoutFromGroupArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err) }
  return err
}

func (p *BoteaterServiceKickoutFromGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceKickoutFromGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceKickoutFromGroupResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceKickoutFromGroupResult() *BoteaterServiceKickoutFromGroupResult {
  return &BoteaterServiceKickoutFromGroupResult{}
}

var BoteaterServiceKickoutFromGroupResult_E_DEFAULT *TalkException
func (p *BoteaterServiceKickoutFromGroupResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceKickoutFromGroupResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceKickoutFromGroupResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceKickoutFromGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceKickoutFromGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceKickoutFromGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("kickoutFromGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceKickoutFromGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceKickoutFromGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceKickoutFromGroupResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
//  - MemberMids
//  - MediaType
type BoteaterServiceInviteIntoGroupCallArgs struct {
  // unused field # 1
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  MemberMids []string `thrift:"memberMids,3" db:"memberMids" json:"memberMids"`
  MediaType GroupCallMediaTypeEnum `thrift:"mediaType,4" db:"mediaType" json:"mediaType"`
}

func NewBoteaterServiceInviteIntoGroupCallArgs() *BoteaterServiceInviteIntoGroupCallArgs {
  return &BoteaterServiceInviteIntoGroupCallArgs{}
}


func (p *BoteaterServiceInviteIntoGroupCallArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *BoteaterServiceInviteIntoGroupCallArgs) GetMemberMids() []string {
  return p.MemberMids
}

func (p *BoteaterServiceInviteIntoGroupCallArgs) GetMediaType() GroupCallMediaTypeEnum {
  return p.MediaType
}
func (p *BoteaterServiceInviteIntoGroupCallArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceInviteIntoGroupCallArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *BoteaterServiceInviteIntoGroupCallArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.MemberMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem182 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem182 = v
}
    p.MemberMids = append(p.MemberMids, _elem182)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceInviteIntoGroupCallArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := GroupCallMediaTypeEnum(v)
  p.MediaType = temp
}
  return nil
}

func (p *BoteaterServiceInviteIntoGroupCallArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("inviteIntoGroupCall_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceInviteIntoGroupCallArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *BoteaterServiceInviteIntoGroupCallArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberMids", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:memberMids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MemberMids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:memberMids: ", p), err) }
  return err
}

func (p *BoteaterServiceInviteIntoGroupCallArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mediaType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mediaType: ", p), err) }
  if err := oprot.WriteI32(int32(p.MediaType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mediaType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mediaType: ", p), err) }
  return err
}

func (p *BoteaterServiceInviteIntoGroupCallArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceInviteIntoGroupCallArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceInviteIntoGroupCallResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceInviteIntoGroupCallResult() *BoteaterServiceInviteIntoGroupCallResult {
  return &BoteaterServiceInviteIntoGroupCallResult{}
}

var BoteaterServiceInviteIntoGroupCallResult_E_DEFAULT *TalkException
func (p *BoteaterServiceInviteIntoGroupCallResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceInviteIntoGroupCallResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceInviteIntoGroupCallResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceInviteIntoGroupCallResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceInviteIntoGroupCallResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceInviteIntoGroupCallResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("inviteIntoGroupCall_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceInviteIntoGroupCallResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceInviteIntoGroupCallResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceInviteIntoGroupCallResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupMid
//  - UpdatedAttrs
type BoteaterServiceUpdateGroupPreferenceAttributeArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupMid string `thrift:"groupMid,2" db:"groupMid" json:"groupMid"`
  UpdatedAttrs map[GroupPreferenceAttributeEnum]string `thrift:"updatedAttrs,3" db:"updatedAttrs" json:"updatedAttrs"`
}

func NewBoteaterServiceUpdateGroupPreferenceAttributeArgs() *BoteaterServiceUpdateGroupPreferenceAttributeArgs {
  return &BoteaterServiceUpdateGroupPreferenceAttributeArgs{}
}


func (p *BoteaterServiceUpdateGroupPreferenceAttributeArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceUpdateGroupPreferenceAttributeArgs) GetGroupMid() string {
  return p.GroupMid
}

func (p *BoteaterServiceUpdateGroupPreferenceAttributeArgs) GetUpdatedAttrs() map[GroupPreferenceAttributeEnum]string {
  return p.UpdatedAttrs
}
func (p *BoteaterServiceUpdateGroupPreferenceAttributeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateGroupPreferenceAttributeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceUpdateGroupPreferenceAttributeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupMid = v
}
  return nil
}

func (p *BoteaterServiceUpdateGroupPreferenceAttributeArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[GroupPreferenceAttributeEnum]string, size)
  p.UpdatedAttrs =  tMap
  for i := 0; i < size; i ++ {
var _key183 GroupPreferenceAttributeEnum
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := GroupPreferenceAttributeEnum(v)
    _key183 = temp
}
var _val184 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val184 = v
}
    p.UpdatedAttrs[_key183] = _val184
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *BoteaterServiceUpdateGroupPreferenceAttributeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGroupPreferenceAttribute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUpdateGroupPreferenceAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateGroupPreferenceAttributeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupMid: ", p), err) }
  if err := oprot.WriteString(string(p.GroupMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupMid: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateGroupPreferenceAttributeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedAttrs", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updatedAttrs: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.UpdatedAttrs)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.UpdatedAttrs {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updatedAttrs: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateGroupPreferenceAttributeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUpdateGroupPreferenceAttributeArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceUpdateGroupPreferenceAttributeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceUpdateGroupPreferenceAttributeResult() *BoteaterServiceUpdateGroupPreferenceAttributeResult {
  return &BoteaterServiceUpdateGroupPreferenceAttributeResult{}
}

var BoteaterServiceUpdateGroupPreferenceAttributeResult_E_DEFAULT *TalkException
func (p *BoteaterServiceUpdateGroupPreferenceAttributeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceUpdateGroupPreferenceAttributeResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceUpdateGroupPreferenceAttributeResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceUpdateGroupPreferenceAttributeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateGroupPreferenceAttributeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateGroupPreferenceAttributeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGroupPreferenceAttribute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUpdateGroupPreferenceAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceUpdateGroupPreferenceAttributeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUpdateGroupPreferenceAttributeResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Group
type BoteaterServiceUpdateGroupArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Group *GroupStruct `thrift:"group,2" db:"group" json:"group"`
}

func NewBoteaterServiceUpdateGroupArgs() *BoteaterServiceUpdateGroupArgs {
  return &BoteaterServiceUpdateGroupArgs{}
}


func (p *BoteaterServiceUpdateGroupArgs) GetReqSeq() int32 {
  return p.ReqSeq
}
var BoteaterServiceUpdateGroupArgs_Group_DEFAULT *GroupStruct
func (p *BoteaterServiceUpdateGroupArgs) GetGroup() *GroupStruct {
  if !p.IsSetGroup() {
    return BoteaterServiceUpdateGroupArgs_Group_DEFAULT
  }
return p.Group
}
func (p *BoteaterServiceUpdateGroupArgs) IsSetGroup() bool {
  return p.Group != nil
}

func (p *BoteaterServiceUpdateGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceUpdateGroupArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Group = &GroupStruct{}
  if err := p.Group.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Group), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUpdateGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("group", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group: ", p), err) }
  if err := p.Group.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Group), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUpdateGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceUpdateGroupResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceUpdateGroupResult() *BoteaterServiceUpdateGroupResult {
  return &BoteaterServiceUpdateGroupResult{}
}

var BoteaterServiceUpdateGroupResult_E_DEFAULT *TalkException
func (p *BoteaterServiceUpdateGroupResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceUpdateGroupResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceUpdateGroupResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceUpdateGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUpdateGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceUpdateGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUpdateGroupResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupId
type BoteaterServiceLeaveGroupArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupId string `thrift:"groupId,2" db:"groupId" json:"groupId"`
}

func NewBoteaterServiceLeaveGroupArgs() *BoteaterServiceLeaveGroupArgs {
  return &BoteaterServiceLeaveGroupArgs{}
}


func (p *BoteaterServiceLeaveGroupArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceLeaveGroupArgs) GetGroupId() string {
  return p.GroupId
}
func (p *BoteaterServiceLeaveGroupArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceLeaveGroupArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceLeaveGroupArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupId = v
}
  return nil
}

func (p *BoteaterServiceLeaveGroupArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("leaveGroup_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceLeaveGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceLeaveGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupId: ", p), err) }
  if err := oprot.WriteString(string(p.GroupId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupId: ", p), err) }
  return err
}

func (p *BoteaterServiceLeaveGroupArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceLeaveGroupArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceLeaveGroupResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceLeaveGroupResult() *BoteaterServiceLeaveGroupResult {
  return &BoteaterServiceLeaveGroupResult{}
}

var BoteaterServiceLeaveGroupResult_E_DEFAULT *TalkException
func (p *BoteaterServiceLeaveGroupResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceLeaveGroupResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceLeaveGroupResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceLeaveGroupResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceLeaveGroupResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceLeaveGroupResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("leaveGroup_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceLeaveGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceLeaveGroupResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceLeaveGroupResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Mid
//  - Type
//  - Reference
type BoteaterServiceFindAndAddContactsByMidArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  Type ContactTypeEnum `thrift:"type,3" db:"type" json:"type"`
  Reference string `thrift:"reference,4" db:"reference" json:"reference"`
}

func NewBoteaterServiceFindAndAddContactsByMidArgs() *BoteaterServiceFindAndAddContactsByMidArgs {
  return &BoteaterServiceFindAndAddContactsByMidArgs{}
}


func (p *BoteaterServiceFindAndAddContactsByMidArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceFindAndAddContactsByMidArgs) GetMid() string {
  return p.Mid
}

func (p *BoteaterServiceFindAndAddContactsByMidArgs) GetType() ContactTypeEnum {
  return p.Type
}

func (p *BoteaterServiceFindAndAddContactsByMidArgs) GetReference() string {
  return p.Reference
}
func (p *BoteaterServiceFindAndAddContactsByMidArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByMidArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByMidArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByMidArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ContactTypeEnum(v)
  p.Type = temp
}
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByMidArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByMidArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAndAddContactsByMid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByMidArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceFindAndAddContactsByMidArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *BoteaterServiceFindAndAddContactsByMidArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *BoteaterServiceFindAndAddContactsByMidArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reference", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reference: ", p), err) }
  if err := oprot.WriteString(string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reference: ", p), err) }
  return err
}

func (p *BoteaterServiceFindAndAddContactsByMidArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceFindAndAddContactsByMidArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceFindAndAddContactsByMidResult struct {
  Success map[string]*ContactStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceFindAndAddContactsByMidResult() *BoteaterServiceFindAndAddContactsByMidResult {
  return &BoteaterServiceFindAndAddContactsByMidResult{}
}

var BoteaterServiceFindAndAddContactsByMidResult_Success_DEFAULT map[string]*ContactStruct

func (p *BoteaterServiceFindAndAddContactsByMidResult) GetSuccess() map[string]*ContactStruct {
  return p.Success
}
var BoteaterServiceFindAndAddContactsByMidResult_E_DEFAULT *TalkException
func (p *BoteaterServiceFindAndAddContactsByMidResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceFindAndAddContactsByMidResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceFindAndAddContactsByMidResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceFindAndAddContactsByMidResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceFindAndAddContactsByMidResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByMidResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*ContactStruct, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key185 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key185 = v
}
    _val186 := &ContactStruct{}
    if err := _val186.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val186), err)
    }
    p.Success[_key185] = _val186
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByMidResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByMidResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAndAddContactsByMid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByMidResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceFindAndAddContactsByMidResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceFindAndAddContactsByMidResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceFindAndAddContactsByMidResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - SearchId
type BoteaterServiceFindAndAddContactsByUseridArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
}

func NewBoteaterServiceFindAndAddContactsByUseridArgs() *BoteaterServiceFindAndAddContactsByUseridArgs {
  return &BoteaterServiceFindAndAddContactsByUseridArgs{}
}


func (p *BoteaterServiceFindAndAddContactsByUseridArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceFindAndAddContactsByUseridArgs) GetSearchId() string {
  return p.SearchId
}
func (p *BoteaterServiceFindAndAddContactsByUseridArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByUseridArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByUseridArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByUseridArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAndAddContactsByUserid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByUseridArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceFindAndAddContactsByUseridArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *BoteaterServiceFindAndAddContactsByUseridArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceFindAndAddContactsByUseridArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceFindAndAddContactsByUseridResult struct {
  Success map[string]*ContactStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceFindAndAddContactsByUseridResult() *BoteaterServiceFindAndAddContactsByUseridResult {
  return &BoteaterServiceFindAndAddContactsByUseridResult{}
}

var BoteaterServiceFindAndAddContactsByUseridResult_Success_DEFAULT map[string]*ContactStruct

func (p *BoteaterServiceFindAndAddContactsByUseridResult) GetSuccess() map[string]*ContactStruct {
  return p.Success
}
var BoteaterServiceFindAndAddContactsByUseridResult_E_DEFAULT *TalkException
func (p *BoteaterServiceFindAndAddContactsByUseridResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceFindAndAddContactsByUseridResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceFindAndAddContactsByUseridResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceFindAndAddContactsByUseridResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceFindAndAddContactsByUseridResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByUseridResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*ContactStruct, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key187 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key187 = v
}
    _val188 := &ContactStruct{}
    if err := _val188.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val188), err)
    }
    p.Success[_key187] = _val188
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByUseridResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByUseridResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAndAddContactsByUserid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByUseridResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceFindAndAddContactsByUseridResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceFindAndAddContactsByUseridResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceFindAndAddContactsByUseridResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Phones
type BoteaterServiceFindAndAddContactsByPhoneArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Phones []string `thrift:"phones,2" db:"phones" json:"phones"`
}

func NewBoteaterServiceFindAndAddContactsByPhoneArgs() *BoteaterServiceFindAndAddContactsByPhoneArgs {
  return &BoteaterServiceFindAndAddContactsByPhoneArgs{}
}


func (p *BoteaterServiceFindAndAddContactsByPhoneArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceFindAndAddContactsByPhoneArgs) GetPhones() []string {
  return p.Phones
}
func (p *BoteaterServiceFindAndAddContactsByPhoneArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByPhoneArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByPhoneArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Phones =  tSet
  for i := 0; i < size; i ++ {
var _elem189 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem189 = v
}
    p.Phones = append(p.Phones, _elem189)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByPhoneArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAndAddContactsByPhone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByPhoneArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceFindAndAddContactsByPhoneArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phones", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phones: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Phones)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Phones); i++ {
    for j := i+1; j<len(p.Phones); j++ {
      if reflect.DeepEqual(p.Phones[i],p.Phones[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Phones[i]))
      }
    }
  }
  for _, v := range p.Phones {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phones: ", p), err) }
  return err
}

func (p *BoteaterServiceFindAndAddContactsByPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceFindAndAddContactsByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceFindAndAddContactsByPhoneResult struct {
  Success map[string]*ContactStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceFindAndAddContactsByPhoneResult() *BoteaterServiceFindAndAddContactsByPhoneResult {
  return &BoteaterServiceFindAndAddContactsByPhoneResult{}
}

var BoteaterServiceFindAndAddContactsByPhoneResult_Success_DEFAULT map[string]*ContactStruct

func (p *BoteaterServiceFindAndAddContactsByPhoneResult) GetSuccess() map[string]*ContactStruct {
  return p.Success
}
var BoteaterServiceFindAndAddContactsByPhoneResult_E_DEFAULT *TalkException
func (p *BoteaterServiceFindAndAddContactsByPhoneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceFindAndAddContactsByPhoneResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceFindAndAddContactsByPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceFindAndAddContactsByPhoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceFindAndAddContactsByPhoneResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByPhoneResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*ContactStruct, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key190 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key190 = v
}
    _val191 := &ContactStruct{}
    if err := _val191.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val191), err)
    }
    p.Success[_key190] = _val191
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByPhoneResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByPhoneResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAndAddContactsByPhone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceFindAndAddContactsByPhoneResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceFindAndAddContactsByPhoneResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceFindAndAddContactsByPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceFindAndAddContactsByPhoneResult(%+v)", *p)
}

// Attributes:
//  - ID
type BoteaterServiceGetContactArgs struct {
  // unused field # 1
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewBoteaterServiceGetContactArgs() *BoteaterServiceGetContactArgs {
  return &BoteaterServiceGetContactArgs{}
}


func (p *BoteaterServiceGetContactArgs) GetID() string {
  return p.ID
}
func (p *BoteaterServiceGetContactArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetContactArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *BoteaterServiceGetContactArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *BoteaterServiceGetContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetContactArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetContactResult struct {
  Success *ContactStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetContactResult() *BoteaterServiceGetContactResult {
  return &BoteaterServiceGetContactResult{}
}

var BoteaterServiceGetContactResult_Success_DEFAULT *ContactStruct
func (p *BoteaterServiceGetContactResult) GetSuccess() *ContactStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetContactResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGetContactResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGetContactResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetContactResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetContactResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetContactResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetContactResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetContactResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ContactStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGetContactResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetContactResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetContactResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetContactResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetContactResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Mid
//  - Flag
//  - Value
type BoteaterServiceUpdateContactSettingArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  Flag ContactSettingEnum `thrift:"flag,3" db:"flag" json:"flag"`
  Value string `thrift:"value,4" db:"value" json:"value"`
}

func NewBoteaterServiceUpdateContactSettingArgs() *BoteaterServiceUpdateContactSettingArgs {
  return &BoteaterServiceUpdateContactSettingArgs{}
}


func (p *BoteaterServiceUpdateContactSettingArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceUpdateContactSettingArgs) GetMid() string {
  return p.Mid
}

func (p *BoteaterServiceUpdateContactSettingArgs) GetFlag() ContactSettingEnum {
  return p.Flag
}

func (p *BoteaterServiceUpdateContactSettingArgs) GetValue() string {
  return p.Value
}
func (p *BoteaterServiceUpdateContactSettingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateContactSettingArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceUpdateContactSettingArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *BoteaterServiceUpdateContactSettingArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ContactSettingEnum(v)
  p.Flag = temp
}
  return nil
}

func (p *BoteaterServiceUpdateContactSettingArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *BoteaterServiceUpdateContactSettingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateContactSetting_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUpdateContactSettingArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateContactSettingArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateContactSettingArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("flag", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:flag: ", p), err) }
  if err := oprot.WriteI32(int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flag (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:flag: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateContactSettingArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateContactSettingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUpdateContactSettingArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceUpdateContactSettingResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceUpdateContactSettingResult() *BoteaterServiceUpdateContactSettingResult {
  return &BoteaterServiceUpdateContactSettingResult{}
}

var BoteaterServiceUpdateContactSettingResult_E_DEFAULT *TalkException
func (p *BoteaterServiceUpdateContactSettingResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceUpdateContactSettingResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceUpdateContactSettingResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceUpdateContactSettingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateContactSettingResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateContactSettingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateContactSetting_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUpdateContactSettingResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceUpdateContactSettingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUpdateContactSettingResult(%+v)", *p)
}

type BoteaterServiceGetAllContactIdsArgs struct {
}

func NewBoteaterServiceGetAllContactIdsArgs() *BoteaterServiceGetAllContactIdsArgs {
  return &BoteaterServiceGetAllContactIdsArgs{}
}

func (p *BoteaterServiceGetAllContactIdsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetAllContactIdsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllContactIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetAllContactIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetAllContactIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetAllContactIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetAllContactIdsResult() *BoteaterServiceGetAllContactIdsResult {
  return &BoteaterServiceGetAllContactIdsResult{}
}

var BoteaterServiceGetAllContactIdsResult_Success_DEFAULT []string

func (p *BoteaterServiceGetAllContactIdsResult) GetSuccess() []string {
  return p.Success
}
var BoteaterServiceGetAllContactIdsResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGetAllContactIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetAllContactIdsResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetAllContactIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetAllContactIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetAllContactIdsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetAllContactIdsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem192 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem192 = v
}
    p.Success = append(p.Success, _elem192)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceGetAllContactIdsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetAllContactIdsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllContactIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetAllContactIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetAllContactIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetAllContactIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetAllContactIdsResult(%+v)", *p)
}

type BoteaterServiceGetProfileArgs struct {
}

func NewBoteaterServiceGetProfileArgs() *BoteaterServiceGetProfileArgs {
  return &BoteaterServiceGetProfileArgs{}
}

func (p *BoteaterServiceGetProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetProfileResult struct {
  Success *ProfileStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetProfileResult() *BoteaterServiceGetProfileResult {
  return &BoteaterServiceGetProfileResult{}
}

var BoteaterServiceGetProfileResult_Success_DEFAULT *ProfileStruct
func (p *BoteaterServiceGetProfileResult) GetSuccess() *ProfileStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetProfileResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGetProfileResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGetProfileResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetProfileResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ProfileStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGetProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetProfileResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Attr
//  - Value
type BoteaterServiceUpdateProfileAttributeArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Attr ProfileAttributeEnum `thrift:"attr,2" db:"attr" json:"attr"`
  Value string `thrift:"value,3" db:"value" json:"value"`
}

func NewBoteaterServiceUpdateProfileAttributeArgs() *BoteaterServiceUpdateProfileAttributeArgs {
  return &BoteaterServiceUpdateProfileAttributeArgs{}
}


func (p *BoteaterServiceUpdateProfileAttributeArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceUpdateProfileAttributeArgs) GetAttr() ProfileAttributeEnum {
  return p.Attr
}

func (p *BoteaterServiceUpdateProfileAttributeArgs) GetValue() string {
  return p.Value
}
func (p *BoteaterServiceUpdateProfileAttributeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateProfileAttributeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceUpdateProfileAttributeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ProfileAttributeEnum(v)
  p.Attr = temp
}
  return nil
}

func (p *BoteaterServiceUpdateProfileAttributeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *BoteaterServiceUpdateProfileAttributeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateProfileAttribute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUpdateProfileAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateProfileAttributeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attr", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attr: ", p), err) }
  if err := oprot.WriteI32(int32(p.Attr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attr: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateProfileAttributeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateProfileAttributeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUpdateProfileAttributeArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceUpdateProfileAttributeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceUpdateProfileAttributeResult() *BoteaterServiceUpdateProfileAttributeResult {
  return &BoteaterServiceUpdateProfileAttributeResult{}
}

var BoteaterServiceUpdateProfileAttributeResult_E_DEFAULT *TalkException
func (p *BoteaterServiceUpdateProfileAttributeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceUpdateProfileAttributeResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceUpdateProfileAttributeResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceUpdateProfileAttributeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateProfileAttributeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateProfileAttributeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateProfileAttribute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUpdateProfileAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceUpdateProfileAttributeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUpdateProfileAttributeResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Profile
type BoteaterServiceUpdateProfileArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Profile *ProfileStruct `thrift:"profile,2" db:"profile" json:"profile"`
}

func NewBoteaterServiceUpdateProfileArgs() *BoteaterServiceUpdateProfileArgs {
  return &BoteaterServiceUpdateProfileArgs{}
}


func (p *BoteaterServiceUpdateProfileArgs) GetReqSeq() int32 {
  return p.ReqSeq
}
var BoteaterServiceUpdateProfileArgs_Profile_DEFAULT *ProfileStruct
func (p *BoteaterServiceUpdateProfileArgs) GetProfile() *ProfileStruct {
  if !p.IsSetProfile() {
    return BoteaterServiceUpdateProfileArgs_Profile_DEFAULT
  }
return p.Profile
}
func (p *BoteaterServiceUpdateProfileArgs) IsSetProfile() bool {
  return p.Profile != nil
}

func (p *BoteaterServiceUpdateProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceUpdateProfileArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Profile = &ProfileStruct{}
  if err := p.Profile.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Profile), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUpdateProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateProfileArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("profile", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:profile: ", p), err) }
  if err := p.Profile.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Profile), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:profile: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUpdateProfileArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceUpdateProfileResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceUpdateProfileResult() *BoteaterServiceUpdateProfileResult {
  return &BoteaterServiceUpdateProfileResult{}
}

var BoteaterServiceUpdateProfileResult_E_DEFAULT *TalkException
func (p *BoteaterServiceUpdateProfileResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceUpdateProfileResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceUpdateProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceUpdateProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUpdateProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceUpdateProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUpdateProfileResult(%+v)", *p)
}

type BoteaterServiceGetBlockedContactIdsArgs struct {
}

func NewBoteaterServiceGetBlockedContactIdsArgs() *BoteaterServiceGetBlockedContactIdsArgs {
  return &BoteaterServiceGetBlockedContactIdsArgs{}
}

func (p *BoteaterServiceGetBlockedContactIdsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetBlockedContactIdsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBlockedContactIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetBlockedContactIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetBlockedContactIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetBlockedContactIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetBlockedContactIdsResult() *BoteaterServiceGetBlockedContactIdsResult {
  return &BoteaterServiceGetBlockedContactIdsResult{}
}

var BoteaterServiceGetBlockedContactIdsResult_Success_DEFAULT []string

func (p *BoteaterServiceGetBlockedContactIdsResult) GetSuccess() []string {
  return p.Success
}
var BoteaterServiceGetBlockedContactIdsResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGetBlockedContactIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetBlockedContactIdsResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetBlockedContactIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetBlockedContactIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetBlockedContactIdsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetBlockedContactIdsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem193 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem193 = v
}
    p.Success = append(p.Success, _elem193)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceGetBlockedContactIdsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetBlockedContactIdsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBlockedContactIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetBlockedContactIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetBlockedContactIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetBlockedContactIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetBlockedContactIdsResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
//  - Reference
type BoteaterServiceUnblockContactArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewBoteaterServiceUnblockContactArgs() *BoteaterServiceUnblockContactArgs {
  return &BoteaterServiceUnblockContactArgs{}
}


func (p *BoteaterServiceUnblockContactArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceUnblockContactArgs) GetID() string {
  return p.ID
}

func (p *BoteaterServiceUnblockContactArgs) GetReference() string {
  return p.Reference
}
func (p *BoteaterServiceUnblockContactArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUnblockContactArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceUnblockContactArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *BoteaterServiceUnblockContactArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *BoteaterServiceUnblockContactArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unblockContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUnblockContactArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceUnblockContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *BoteaterServiceUnblockContactArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *BoteaterServiceUnblockContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUnblockContactArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceUnblockContactResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceUnblockContactResult() *BoteaterServiceUnblockContactResult {
  return &BoteaterServiceUnblockContactResult{}
}

var BoteaterServiceUnblockContactResult_E_DEFAULT *TalkException
func (p *BoteaterServiceUnblockContactResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceUnblockContactResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceUnblockContactResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceUnblockContactResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUnblockContactResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceUnblockContactResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unblockContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUnblockContactResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceUnblockContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUnblockContactResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type BoteaterServiceBlockContactArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewBoteaterServiceBlockContactArgs() *BoteaterServiceBlockContactArgs {
  return &BoteaterServiceBlockContactArgs{}
}


func (p *BoteaterServiceBlockContactArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceBlockContactArgs) GetID() string {
  return p.ID
}
func (p *BoteaterServiceBlockContactArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceBlockContactArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceBlockContactArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *BoteaterServiceBlockContactArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("blockContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceBlockContactArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceBlockContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *BoteaterServiceBlockContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceBlockContactArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceBlockContactResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceBlockContactResult() *BoteaterServiceBlockContactResult {
  return &BoteaterServiceBlockContactResult{}
}

var BoteaterServiceBlockContactResult_E_DEFAULT *TalkException
func (p *BoteaterServiceBlockContactResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceBlockContactResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceBlockContactResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceBlockContactResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceBlockContactResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceBlockContactResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("blockContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceBlockContactResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceBlockContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceBlockContactResult(%+v)", *p)
}

type BoteaterServiceGetSettingsArgs struct {
}

func NewBoteaterServiceGetSettingsArgs() *BoteaterServiceGetSettingsArgs {
  return &BoteaterServiceGetSettingsArgs{}
}

func (p *BoteaterServiceGetSettingsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetSettingsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSettings_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetSettingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetSettingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetSettingsResult struct {
  Success *SettingsStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetSettingsResult() *BoteaterServiceGetSettingsResult {
  return &BoteaterServiceGetSettingsResult{}
}

var BoteaterServiceGetSettingsResult_Success_DEFAULT *SettingsStruct
func (p *BoteaterServiceGetSettingsResult) GetSuccess() *SettingsStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetSettingsResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGetSettingsResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGetSettingsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetSettingsResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetSettingsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetSettingsResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetSettingsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetSettingsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SettingsStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGetSettingsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetSettingsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSettings_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetSettingsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetSettingsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetSettingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetSettingsResult(%+v)", *p)
}

// Attributes:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
type BoteaterServiceFetchOpsArgs struct {
  // unused field # 1
  LocalRev int64 `thrift:"localRev,2" db:"localRev" json:"localRev"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
  GlobalRev int64 `thrift:"globalRev,4" db:"globalRev" json:"globalRev"`
  IndividualRev int64 `thrift:"individualRev,5" db:"individualRev" json:"individualRev"`
}

func NewBoteaterServiceFetchOpsArgs() *BoteaterServiceFetchOpsArgs {
  return &BoteaterServiceFetchOpsArgs{}
}


func (p *BoteaterServiceFetchOpsArgs) GetLocalRev() int64 {
  return p.LocalRev
}

func (p *BoteaterServiceFetchOpsArgs) GetCount() int32 {
  return p.Count
}

func (p *BoteaterServiceFetchOpsArgs) GetGlobalRev() int64 {
  return p.GlobalRev
}

func (p *BoteaterServiceFetchOpsArgs) GetIndividualRev() int64 {
  return p.IndividualRev
}
func (p *BoteaterServiceFetchOpsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceFetchOpsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LocalRev = v
}
  return nil
}

func (p *BoteaterServiceFetchOpsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *BoteaterServiceFetchOpsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GlobalRev = v
}
  return nil
}

func (p *BoteaterServiceFetchOpsArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IndividualRev = v
}
  return nil
}

func (p *BoteaterServiceFetchOpsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchOps_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceFetchOpsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("localRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localRev: ", p), err) }
  if err := oprot.WriteI64(int64(p.LocalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.localRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localRev: ", p), err) }
  return err
}

func (p *BoteaterServiceFetchOpsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *BoteaterServiceFetchOpsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("globalRev", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:globalRev: ", p), err) }
  if err := oprot.WriteI64(int64(p.GlobalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.globalRev (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:globalRev: ", p), err) }
  return err
}

func (p *BoteaterServiceFetchOpsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("individualRev", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:individualRev: ", p), err) }
  if err := oprot.WriteI64(int64(p.IndividualRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.individualRev (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:individualRev: ", p), err) }
  return err
}

func (p *BoteaterServiceFetchOpsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceFetchOpsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceFetchOpsResult struct {
  Success []*OperationStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceFetchOpsResult() *BoteaterServiceFetchOpsResult {
  return &BoteaterServiceFetchOpsResult{}
}

var BoteaterServiceFetchOpsResult_Success_DEFAULT []*OperationStruct

func (p *BoteaterServiceFetchOpsResult) GetSuccess() []*OperationStruct {
  return p.Success
}
var BoteaterServiceFetchOpsResult_E_DEFAULT *TalkException
func (p *BoteaterServiceFetchOpsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceFetchOpsResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceFetchOpsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceFetchOpsResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceFetchOpsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceFetchOpsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*OperationStruct, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem194 := &OperationStruct{}
    if err := _elem194.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem194), err)
    }
    p.Success = append(p.Success, _elem194)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceFetchOpsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceFetchOpsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchOps_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceFetchOpsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceFetchOpsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceFetchOpsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceFetchOpsResult(%+v)", *p)
}

type BoteaterServiceGetLastOpRevisionArgs struct {
}

func NewBoteaterServiceGetLastOpRevisionArgs() *BoteaterServiceGetLastOpRevisionArgs {
  return &BoteaterServiceGetLastOpRevisionArgs{}
}

func (p *BoteaterServiceGetLastOpRevisionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetLastOpRevisionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLastOpRevision_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetLastOpRevisionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetLastOpRevisionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetLastOpRevisionResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetLastOpRevisionResult() *BoteaterServiceGetLastOpRevisionResult {
  return &BoteaterServiceGetLastOpRevisionResult{}
}

var BoteaterServiceGetLastOpRevisionResult_Success_DEFAULT int64
func (p *BoteaterServiceGetLastOpRevisionResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetLastOpRevisionResult_Success_DEFAULT
  }
return *p.Success
}
var BoteaterServiceGetLastOpRevisionResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGetLastOpRevisionResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetLastOpRevisionResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetLastOpRevisionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetLastOpRevisionResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetLastOpRevisionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetLastOpRevisionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *BoteaterServiceGetLastOpRevisionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetLastOpRevisionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLastOpRevision_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetLastOpRevisionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetLastOpRevisionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetLastOpRevisionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetLastOpRevisionResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
type BoteaterServiceIssueChannelTokenArgs struct {
  ChannelId string `thrift:"channelId,1" db:"channelId" json:"channelId"`
}

func NewBoteaterServiceIssueChannelTokenArgs() *BoteaterServiceIssueChannelTokenArgs {
  return &BoteaterServiceIssueChannelTokenArgs{}
}


func (p *BoteaterServiceIssueChannelTokenArgs) GetChannelId() string {
  return p.ChannelId
}
func (p *BoteaterServiceIssueChannelTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceIssueChannelTokenArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *BoteaterServiceIssueChannelTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("issueChannelToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceIssueChannelTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:channelId: ", p), err) }
  if err := oprot.WriteString(string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:channelId: ", p), err) }
  return err
}

func (p *BoteaterServiceIssueChannelTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceIssueChannelTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceIssueChannelTokenResult struct {
  Success *ChannelTokenStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceIssueChannelTokenResult() *BoteaterServiceIssueChannelTokenResult {
  return &BoteaterServiceIssueChannelTokenResult{}
}

var BoteaterServiceIssueChannelTokenResult_Success_DEFAULT *ChannelTokenStruct
func (p *BoteaterServiceIssueChannelTokenResult) GetSuccess() *ChannelTokenStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceIssueChannelTokenResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceIssueChannelTokenResult_E_DEFAULT *ChannelException
func (p *BoteaterServiceIssueChannelTokenResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return BoteaterServiceIssueChannelTokenResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceIssueChannelTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceIssueChannelTokenResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceIssueChannelTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceIssueChannelTokenResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ChannelTokenStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceIssueChannelTokenResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceIssueChannelTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("issueChannelToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceIssueChannelTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceIssueChannelTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceIssueChannelTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceIssueChannelTokenResult(%+v)", *p)
}

// Attributes:
//  - ChannelId
//  - Locale
type BoteaterServiceGetChannelInfoArgs struct {
  // unused field # 1
  ChannelId string `thrift:"channelId,2" db:"channelId" json:"channelId"`
  Locale string `thrift:"locale,3" db:"locale" json:"locale"`
}

func NewBoteaterServiceGetChannelInfoArgs() *BoteaterServiceGetChannelInfoArgs {
  return &BoteaterServiceGetChannelInfoArgs{}
}


func (p *BoteaterServiceGetChannelInfoArgs) GetChannelId() string {
  return p.ChannelId
}

func (p *BoteaterServiceGetChannelInfoArgs) GetLocale() string {
  return p.Locale
}
func (p *BoteaterServiceGetChannelInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetChannelInfoArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *BoteaterServiceGetChannelInfoArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *BoteaterServiceGetChannelInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChannelInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetChannelInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:channelId: ", p), err) }
  if err := oprot.WriteString(string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:channelId: ", p), err) }
  return err
}

func (p *BoteaterServiceGetChannelInfoArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("locale", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:locale: ", p), err) }
  if err := oprot.WriteString(string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:locale: ", p), err) }
  return err
}

func (p *BoteaterServiceGetChannelInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetChannelInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetChannelInfoResult struct {
  Success *ChannelInfoStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ChannelException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetChannelInfoResult() *BoteaterServiceGetChannelInfoResult {
  return &BoteaterServiceGetChannelInfoResult{}
}

var BoteaterServiceGetChannelInfoResult_Success_DEFAULT *ChannelInfoStruct
func (p *BoteaterServiceGetChannelInfoResult) GetSuccess() *ChannelInfoStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetChannelInfoResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGetChannelInfoResult_E_DEFAULT *ChannelException
func (p *BoteaterServiceGetChannelInfoResult) GetE() *ChannelException {
  if !p.IsSetE() {
    return BoteaterServiceGetChannelInfoResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetChannelInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetChannelInfoResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetChannelInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetChannelInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ChannelInfoStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGetChannelInfoResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &ChannelException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetChannelInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChannelInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetChannelInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetChannelInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetChannelInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetChannelInfoResult(%+v)", *p)
}

// Attributes:
//  - Request
type BoteaterServiceIssueLiffViewArgs struct {
  Request *LiffViewRequestStruct `thrift:"request,1" db:"request" json:"request"`
}

func NewBoteaterServiceIssueLiffViewArgs() *BoteaterServiceIssueLiffViewArgs {
  return &BoteaterServiceIssueLiffViewArgs{}
}

var BoteaterServiceIssueLiffViewArgs_Request_DEFAULT *LiffViewRequestStruct
func (p *BoteaterServiceIssueLiffViewArgs) GetRequest() *LiffViewRequestStruct {
  if !p.IsSetRequest() {
    return BoteaterServiceIssueLiffViewArgs_Request_DEFAULT
  }
return p.Request
}
func (p *BoteaterServiceIssueLiffViewArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *BoteaterServiceIssueLiffViewArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceIssueLiffViewArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &LiffViewRequestStruct{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *BoteaterServiceIssueLiffViewArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("issueLiffView_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceIssueLiffViewArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *BoteaterServiceIssueLiffViewArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceIssueLiffViewArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceIssueLiffViewResult struct {
  Success *LiffViewStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *LiffException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceIssueLiffViewResult() *BoteaterServiceIssueLiffViewResult {
  return &BoteaterServiceIssueLiffViewResult{}
}

var BoteaterServiceIssueLiffViewResult_Success_DEFAULT *LiffViewStruct
func (p *BoteaterServiceIssueLiffViewResult) GetSuccess() *LiffViewStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceIssueLiffViewResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceIssueLiffViewResult_E_DEFAULT *LiffException
func (p *BoteaterServiceIssueLiffViewResult) GetE() *LiffException {
  if !p.IsSetE() {
    return BoteaterServiceIssueLiffViewResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceIssueLiffViewResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceIssueLiffViewResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceIssueLiffViewResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceIssueLiffViewResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &LiffViewStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceIssueLiffViewResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &LiffException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceIssueLiffViewResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("issueLiffView_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceIssueLiffViewResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceIssueLiffViewResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceIssueLiffViewResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceIssueLiffViewResult(%+v)", *p)
}

// Attributes:
//  - Direction
//  - LastSeenSeqId
type BoteaterServiceGetFriendRequestsArgs struct {
  Direction FriendDirectionEnum `thrift:"direction,1" db:"direction" json:"direction"`
  LastSeenSeqId int64 `thrift:"lastSeenSeqId,2" db:"lastSeenSeqId" json:"lastSeenSeqId"`
}

func NewBoteaterServiceGetFriendRequestsArgs() *BoteaterServiceGetFriendRequestsArgs {
  return &BoteaterServiceGetFriendRequestsArgs{}
}


func (p *BoteaterServiceGetFriendRequestsArgs) GetDirection() FriendDirectionEnum {
  return p.Direction
}

func (p *BoteaterServiceGetFriendRequestsArgs) GetLastSeenSeqId() int64 {
  return p.LastSeenSeqId
}
func (p *BoteaterServiceGetFriendRequestsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetFriendRequestsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := FriendDirectionEnum(v)
  p.Direction = temp
}
  return nil
}

func (p *BoteaterServiceGetFriendRequestsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastSeenSeqId = v
}
  return nil
}

func (p *BoteaterServiceGetFriendRequestsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getFriendRequests_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetFriendRequestsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("direction", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:direction: ", p), err) }
  if err := oprot.WriteI32(int32(p.Direction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.direction (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:direction: ", p), err) }
  return err
}

func (p *BoteaterServiceGetFriendRequestsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastSeenSeqId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastSeenSeqId: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastSeenSeqId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSeenSeqId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastSeenSeqId: ", p), err) }
  return err
}

func (p *BoteaterServiceGetFriendRequestsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetFriendRequestsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetFriendRequestsResult struct {
  Success []*FriendRequestStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetFriendRequestsResult() *BoteaterServiceGetFriendRequestsResult {
  return &BoteaterServiceGetFriendRequestsResult{}
}

var BoteaterServiceGetFriendRequestsResult_Success_DEFAULT []*FriendRequestStruct

func (p *BoteaterServiceGetFriendRequestsResult) GetSuccess() []*FriendRequestStruct {
  return p.Success
}
var BoteaterServiceGetFriendRequestsResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGetFriendRequestsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetFriendRequestsResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetFriendRequestsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetFriendRequestsResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetFriendRequestsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetFriendRequestsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FriendRequestStruct, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem195 := &FriendRequestStruct{}
    if err := _elem195.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem195), err)
    }
    p.Success = append(p.Success, _elem195)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceGetFriendRequestsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetFriendRequestsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getFriendRequests_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetFriendRequestsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetFriendRequestsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetFriendRequestsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetFriendRequestsResult(%+v)", *p)
}

// Attributes:
//  - Direction
//  - MidOrEMid
type BoteaterServiceRemoveFriendRequestArgs struct {
  Direction FriendDirectionEnum `thrift:"direction,1" db:"direction" json:"direction"`
  MidOrEMid string `thrift:"midOrEMid,2" db:"midOrEMid" json:"midOrEMid"`
}

func NewBoteaterServiceRemoveFriendRequestArgs() *BoteaterServiceRemoveFriendRequestArgs {
  return &BoteaterServiceRemoveFriendRequestArgs{}
}


func (p *BoteaterServiceRemoveFriendRequestArgs) GetDirection() FriendDirectionEnum {
  return p.Direction
}

func (p *BoteaterServiceRemoveFriendRequestArgs) GetMidOrEMid() string {
  return p.MidOrEMid
}
func (p *BoteaterServiceRemoveFriendRequestArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceRemoveFriendRequestArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := FriendDirectionEnum(v)
  p.Direction = temp
}
  return nil
}

func (p *BoteaterServiceRemoveFriendRequestArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MidOrEMid = v
}
  return nil
}

func (p *BoteaterServiceRemoveFriendRequestArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeFriendRequest_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceRemoveFriendRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("direction", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:direction: ", p), err) }
  if err := oprot.WriteI32(int32(p.Direction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.direction (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:direction: ", p), err) }
  return err
}

func (p *BoteaterServiceRemoveFriendRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("midOrEMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:midOrEMid: ", p), err) }
  if err := oprot.WriteString(string(p.MidOrEMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.midOrEMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:midOrEMid: ", p), err) }
  return err
}

func (p *BoteaterServiceRemoveFriendRequestArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceRemoveFriendRequestArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceRemoveFriendRequestResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceRemoveFriendRequestResult() *BoteaterServiceRemoveFriendRequestResult {
  return &BoteaterServiceRemoveFriendRequestResult{}
}

var BoteaterServiceRemoveFriendRequestResult_E_DEFAULT *TalkException
func (p *BoteaterServiceRemoveFriendRequestResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceRemoveFriendRequestResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceRemoveFriendRequestResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceRemoveFriendRequestResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceRemoveFriendRequestResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceRemoveFriendRequestResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeFriendRequest_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceRemoveFriendRequestResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceRemoveFriendRequestResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceRemoveFriendRequestResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Attr
//  - Value
type BoteaterServiceUpdateSettingsAttributeArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Attr SettingsAttributeEnum `thrift:"attr,2" db:"attr" json:"attr"`
  Value string `thrift:"value,3" db:"value" json:"value"`
}

func NewBoteaterServiceUpdateSettingsAttributeArgs() *BoteaterServiceUpdateSettingsAttributeArgs {
  return &BoteaterServiceUpdateSettingsAttributeArgs{}
}


func (p *BoteaterServiceUpdateSettingsAttributeArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceUpdateSettingsAttributeArgs) GetAttr() SettingsAttributeEnum {
  return p.Attr
}

func (p *BoteaterServiceUpdateSettingsAttributeArgs) GetValue() string {
  return p.Value
}
func (p *BoteaterServiceUpdateSettingsAttributeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := SettingsAttributeEnum(v)
  p.Attr = temp
}
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSettingsAttribute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateSettingsAttributeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attr", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attr: ", p), err) }
  if err := oprot.WriteI32(int32(p.Attr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attr: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateSettingsAttributeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateSettingsAttributeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUpdateSettingsAttributeArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceUpdateSettingsAttributeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceUpdateSettingsAttributeResult() *BoteaterServiceUpdateSettingsAttributeResult {
  return &BoteaterServiceUpdateSettingsAttributeResult{}
}

var BoteaterServiceUpdateSettingsAttributeResult_E_DEFAULT *TalkException
func (p *BoteaterServiceUpdateSettingsAttributeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceUpdateSettingsAttributeResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceUpdateSettingsAttributeResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceUpdateSettingsAttributeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSettingsAttribute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceUpdateSettingsAttributeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUpdateSettingsAttributeResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - AttributesToUpdate
//  - Settings
type BoteaterServiceUpdateSettingsAttributes2Args struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  AttributesToUpdate []string `thrift:"attributesToUpdate,2" db:"attributesToUpdate" json:"attributesToUpdate"`
  Settings *SettingsStruct `thrift:"settings,3" db:"settings" json:"settings"`
}

func NewBoteaterServiceUpdateSettingsAttributes2Args() *BoteaterServiceUpdateSettingsAttributes2Args {
  return &BoteaterServiceUpdateSettingsAttributes2Args{}
}


func (p *BoteaterServiceUpdateSettingsAttributes2Args) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceUpdateSettingsAttributes2Args) GetAttributesToUpdate() []string {
  return p.AttributesToUpdate
}
var BoteaterServiceUpdateSettingsAttributes2Args_Settings_DEFAULT *SettingsStruct
func (p *BoteaterServiceUpdateSettingsAttributes2Args) GetSettings() *SettingsStruct {
  if !p.IsSetSettings() {
    return BoteaterServiceUpdateSettingsAttributes2Args_Settings_DEFAULT
  }
return p.Settings
}
func (p *BoteaterServiceUpdateSettingsAttributes2Args) IsSetSettings() bool {
  return p.Settings != nil
}

func (p *BoteaterServiceUpdateSettingsAttributes2Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributes2Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributes2Args)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.AttributesToUpdate =  tSet
  for i := 0; i < size; i ++ {
var _elem196 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem196 = v
}
    p.AttributesToUpdate = append(p.AttributesToUpdate, _elem196)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributes2Args)  ReadField3(iprot thrift.TProtocol) error {
  p.Settings = &SettingsStruct{}
  if err := p.Settings.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Settings), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributes2Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSettingsAttributes2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributes2Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateSettingsAttributes2Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attributesToUpdate", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attributesToUpdate: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.AttributesToUpdate)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AttributesToUpdate); i++ {
    for j := i+1; j<len(p.AttributesToUpdate); j++ {
      if reflect.DeepEqual(p.AttributesToUpdate[i],p.AttributesToUpdate[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AttributesToUpdate[i]))
      }
    }
  }
  for _, v := range p.AttributesToUpdate {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attributesToUpdate: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateSettingsAttributes2Args) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("settings", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:settings: ", p), err) }
  if err := p.Settings.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Settings), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:settings: ", p), err) }
  return err
}

func (p *BoteaterServiceUpdateSettingsAttributes2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUpdateSettingsAttributes2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceUpdateSettingsAttributes2Result struct {
  Success []SettingsAttributes2Enum `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceUpdateSettingsAttributes2Result() *BoteaterServiceUpdateSettingsAttributes2Result {
  return &BoteaterServiceUpdateSettingsAttributes2Result{}
}

var BoteaterServiceUpdateSettingsAttributes2Result_Success_DEFAULT []SettingsAttributes2Enum

func (p *BoteaterServiceUpdateSettingsAttributes2Result) GetSuccess() []SettingsAttributes2Enum {
  return p.Success
}
var BoteaterServiceUpdateSettingsAttributes2Result_E_DEFAULT *TalkException
func (p *BoteaterServiceUpdateSettingsAttributes2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceUpdateSettingsAttributes2Result_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceUpdateSettingsAttributes2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceUpdateSettingsAttributes2Result) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceUpdateSettingsAttributes2Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributes2Result)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]SettingsAttributes2Enum, 0, size)
  p.Success =  tSet
  for i := 0; i < size; i ++ {
var _elem197 SettingsAttributes2Enum
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SettingsAttributes2Enum(v)
    _elem197 = temp
}
    p.Success = append(p.Success, _elem197)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributes2Result)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributes2Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSettingsAttributes2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUpdateSettingsAttributes2Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Success); i++ {
      for j := i+1; j<len(p.Success); j++ {
        if reflect.DeepEqual(p.Success[i],p.Success[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success[i]))
        }
      }
    }
    for _, v := range p.Success {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceUpdateSettingsAttributes2Result) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceUpdateSettingsAttributes2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUpdateSettingsAttributes2Result(%+v)", *p)
}

// Attributes:
//  - AttributesToRetrieve
type BoteaterServiceGetSettingsAttributes2Args struct {
  // unused field # 1
  AttributesToRetrieve []SettingsAttributes2Enum `thrift:"attributesToRetrieve,2" db:"attributesToRetrieve" json:"attributesToRetrieve"`
}

func NewBoteaterServiceGetSettingsAttributes2Args() *BoteaterServiceGetSettingsAttributes2Args {
  return &BoteaterServiceGetSettingsAttributes2Args{}
}


func (p *BoteaterServiceGetSettingsAttributes2Args) GetAttributesToRetrieve() []SettingsAttributes2Enum {
  return p.AttributesToRetrieve
}
func (p *BoteaterServiceGetSettingsAttributes2Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetSettingsAttributes2Args)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]SettingsAttributes2Enum, 0, size)
  p.AttributesToRetrieve =  tSet
  for i := 0; i < size; i ++ {
var _elem198 SettingsAttributes2Enum
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SettingsAttributes2Enum(v)
    _elem198 = temp
}
    p.AttributesToRetrieve = append(p.AttributesToRetrieve, _elem198)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *BoteaterServiceGetSettingsAttributes2Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSettingsAttributes2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetSettingsAttributes2Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attributesToRetrieve", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attributesToRetrieve: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I32, len(p.AttributesToRetrieve)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AttributesToRetrieve); i++ {
    for j := i+1; j<len(p.AttributesToRetrieve); j++ {
      if reflect.DeepEqual(p.AttributesToRetrieve[i],p.AttributesToRetrieve[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AttributesToRetrieve[i]))
      }
    }
  }
  for _, v := range p.AttributesToRetrieve {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attributesToRetrieve: ", p), err) }
  return err
}

func (p *BoteaterServiceGetSettingsAttributes2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetSettingsAttributes2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetSettingsAttributes2Result struct {
  Success *SettingsStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetSettingsAttributes2Result() *BoteaterServiceGetSettingsAttributes2Result {
  return &BoteaterServiceGetSettingsAttributes2Result{}
}

var BoteaterServiceGetSettingsAttributes2Result_Success_DEFAULT *SettingsStruct
func (p *BoteaterServiceGetSettingsAttributes2Result) GetSuccess() *SettingsStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetSettingsAttributes2Result_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGetSettingsAttributes2Result_E_DEFAULT *TalkException
func (p *BoteaterServiceGetSettingsAttributes2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetSettingsAttributes2Result_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetSettingsAttributes2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetSettingsAttributes2Result) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetSettingsAttributes2Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetSettingsAttributes2Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SettingsStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGetSettingsAttributes2Result)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetSettingsAttributes2Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSettingsAttributes2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetSettingsAttributes2Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetSettingsAttributes2Result) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetSettingsAttributes2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetSettingsAttributes2Result(%+v)", *p)
}

// Attributes:
//  - AttrBitset
type BoteaterServiceGetSettingsAttributesArgs struct {
  // unused field # 1
  AttrBitset int32 `thrift:"attrBitset,2" db:"attrBitset" json:"attrBitset"`
}

func NewBoteaterServiceGetSettingsAttributesArgs() *BoteaterServiceGetSettingsAttributesArgs {
  return &BoteaterServiceGetSettingsAttributesArgs{}
}


func (p *BoteaterServiceGetSettingsAttributesArgs) GetAttrBitset() int32 {
  return p.AttrBitset
}
func (p *BoteaterServiceGetSettingsAttributesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetSettingsAttributesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AttrBitset = v
}
  return nil
}

func (p *BoteaterServiceGetSettingsAttributesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSettingsAttributes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetSettingsAttributesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attrBitset", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attrBitset: ", p), err) }
  if err := oprot.WriteI32(int32(p.AttrBitset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attrBitset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attrBitset: ", p), err) }
  return err
}

func (p *BoteaterServiceGetSettingsAttributesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetSettingsAttributesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetSettingsAttributesResult struct {
  Success *SettingsStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetSettingsAttributesResult() *BoteaterServiceGetSettingsAttributesResult {
  return &BoteaterServiceGetSettingsAttributesResult{}
}

var BoteaterServiceGetSettingsAttributesResult_Success_DEFAULT *SettingsStruct
func (p *BoteaterServiceGetSettingsAttributesResult) GetSuccess() *SettingsStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetSettingsAttributesResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGetSettingsAttributesResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGetSettingsAttributesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetSettingsAttributesResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetSettingsAttributesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetSettingsAttributesResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetSettingsAttributesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetSettingsAttributesResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SettingsStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGetSettingsAttributesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetSettingsAttributesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSettingsAttributes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetSettingsAttributesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetSettingsAttributesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetSettingsAttributesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetSettingsAttributesResult(%+v)", *p)
}

// Attributes:
//  - Request
type BoteaterServiceGetProductV2Args struct {
  // unused field # 1
  Request *GetProductRequestStruct `thrift:"request,2" db:"request" json:"request"`
}

func NewBoteaterServiceGetProductV2Args() *BoteaterServiceGetProductV2Args {
  return &BoteaterServiceGetProductV2Args{}
}

var BoteaterServiceGetProductV2Args_Request_DEFAULT *GetProductRequestStruct
func (p *BoteaterServiceGetProductV2Args) GetRequest() *GetProductRequestStruct {
  if !p.IsSetRequest() {
    return BoteaterServiceGetProductV2Args_Request_DEFAULT
  }
return p.Request
}
func (p *BoteaterServiceGetProductV2Args) IsSetRequest() bool {
  return p.Request != nil
}

func (p *BoteaterServiceGetProductV2Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetProductV2Args)  ReadField2(iprot thrift.TProtocol) error {
  p.Request = &GetProductRequestStruct{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *BoteaterServiceGetProductV2Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProductV2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetProductV2Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request: ", p), err) }
  return err
}

func (p *BoteaterServiceGetProductV2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetProductV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetProductV2Result struct {
  Success *GetProductStructV2 `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ShopExecption `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetProductV2Result() *BoteaterServiceGetProductV2Result {
  return &BoteaterServiceGetProductV2Result{}
}

var BoteaterServiceGetProductV2Result_Success_DEFAULT *GetProductStructV2
func (p *BoteaterServiceGetProductV2Result) GetSuccess() *GetProductStructV2 {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetProductV2Result_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGetProductV2Result_E_DEFAULT *ShopExecption
func (p *BoteaterServiceGetProductV2Result) GetE() *ShopExecption {
  if !p.IsSetE() {
    return BoteaterServiceGetProductV2Result_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetProductV2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetProductV2Result) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetProductV2Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetProductV2Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetProductStructV2{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGetProductV2Result)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &ShopExecption{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetProductV2Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProductV2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetProductV2Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetProductV2Result) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetProductV2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetProductV2Result(%+v)", *p)
}

// Attributes:
//  - ShopId
//  - ProductId
//  - Locale
type BoteaterServiceGetProductArgs struct {
  // unused field # 1
  ShopId string `thrift:"shopId,2" db:"shopId" json:"shopId"`
  ProductId string `thrift:"productId,3" db:"productId" json:"productId"`
  Locale *LocaleStruct `thrift:"locale,4" db:"locale" json:"locale"`
}

func NewBoteaterServiceGetProductArgs() *BoteaterServiceGetProductArgs {
  return &BoteaterServiceGetProductArgs{}
}


func (p *BoteaterServiceGetProductArgs) GetShopId() string {
  return p.ShopId
}

func (p *BoteaterServiceGetProductArgs) GetProductId() string {
  return p.ProductId
}
var BoteaterServiceGetProductArgs_Locale_DEFAULT *LocaleStruct
func (p *BoteaterServiceGetProductArgs) GetLocale() *LocaleStruct {
  if !p.IsSetLocale() {
    return BoteaterServiceGetProductArgs_Locale_DEFAULT
  }
return p.Locale
}
func (p *BoteaterServiceGetProductArgs) IsSetLocale() bool {
  return p.Locale != nil
}

func (p *BoteaterServiceGetProductArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetProductArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ShopId = v
}
  return nil
}

func (p *BoteaterServiceGetProductArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ProductId = v
}
  return nil
}

func (p *BoteaterServiceGetProductArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.Locale = &LocaleStruct{}
  if err := p.Locale.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Locale), err)
  }
  return nil
}

func (p *BoteaterServiceGetProductArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProduct_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetProductArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("shopId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:shopId: ", p), err) }
  if err := oprot.WriteString(string(p.ShopId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.shopId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:shopId: ", p), err) }
  return err
}

func (p *BoteaterServiceGetProductArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:productId: ", p), err) }
  if err := oprot.WriteString(string(p.ProductId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.productId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:productId: ", p), err) }
  return err
}

func (p *BoteaterServiceGetProductArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("locale", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:locale: ", p), err) }
  if err := p.Locale.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Locale), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:locale: ", p), err) }
  return err
}

func (p *BoteaterServiceGetProductArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetProductArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetProductResult struct {
  Success *GetProductStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ShopExecption `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetProductResult() *BoteaterServiceGetProductResult {
  return &BoteaterServiceGetProductResult{}
}

var BoteaterServiceGetProductResult_Success_DEFAULT *GetProductStruct
func (p *BoteaterServiceGetProductResult) GetSuccess() *GetProductStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetProductResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGetProductResult_E_DEFAULT *ShopExecption
func (p *BoteaterServiceGetProductResult) GetE() *ShopExecption {
  if !p.IsSetE() {
    return BoteaterServiceGetProductResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetProductResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetProductResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetProductResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetProductResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetProductStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGetProductResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &ShopExecption{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetProductResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProduct_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetProductResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetProductResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetProductResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetProductResult(%+v)", *p)
}

// Attributes:
//  - PurchaseOrder
type BoteaterServicePlacePurchaseOrderForFreeProductArgs struct {
  // unused field # 1
  PurchaseOrder *PurchaseOrderStruct `thrift:"purchaseOrder,2" db:"purchaseOrder" json:"purchaseOrder"`
}

func NewBoteaterServicePlacePurchaseOrderForFreeProductArgs() *BoteaterServicePlacePurchaseOrderForFreeProductArgs {
  return &BoteaterServicePlacePurchaseOrderForFreeProductArgs{}
}

var BoteaterServicePlacePurchaseOrderForFreeProductArgs_PurchaseOrder_DEFAULT *PurchaseOrderStruct
func (p *BoteaterServicePlacePurchaseOrderForFreeProductArgs) GetPurchaseOrder() *PurchaseOrderStruct {
  if !p.IsSetPurchaseOrder() {
    return BoteaterServicePlacePurchaseOrderForFreeProductArgs_PurchaseOrder_DEFAULT
  }
return p.PurchaseOrder
}
func (p *BoteaterServicePlacePurchaseOrderForFreeProductArgs) IsSetPurchaseOrder() bool {
  return p.PurchaseOrder != nil
}

func (p *BoteaterServicePlacePurchaseOrderForFreeProductArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServicePlacePurchaseOrderForFreeProductArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.PurchaseOrder = &PurchaseOrderStruct{}
  if err := p.PurchaseOrder.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PurchaseOrder), err)
  }
  return nil
}

func (p *BoteaterServicePlacePurchaseOrderForFreeProductArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("placePurchaseOrderForFreeProduct_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServicePlacePurchaseOrderForFreeProductArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("purchaseOrder", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:purchaseOrder: ", p), err) }
  if err := p.PurchaseOrder.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PurchaseOrder), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:purchaseOrder: ", p), err) }
  return err
}

func (p *BoteaterServicePlacePurchaseOrderForFreeProductArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServicePlacePurchaseOrderForFreeProductArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServicePlacePurchaseOrderForFreeProductResult struct {
  Success *PurchaseOrderResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ShopExecption `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServicePlacePurchaseOrderForFreeProductResult() *BoteaterServicePlacePurchaseOrderForFreeProductResult {
  return &BoteaterServicePlacePurchaseOrderForFreeProductResult{}
}

var BoteaterServicePlacePurchaseOrderForFreeProductResult_Success_DEFAULT *PurchaseOrderResponseStruct
func (p *BoteaterServicePlacePurchaseOrderForFreeProductResult) GetSuccess() *PurchaseOrderResponseStruct {
  if !p.IsSetSuccess() {
    return BoteaterServicePlacePurchaseOrderForFreeProductResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServicePlacePurchaseOrderForFreeProductResult_E_DEFAULT *ShopExecption
func (p *BoteaterServicePlacePurchaseOrderForFreeProductResult) GetE() *ShopExecption {
  if !p.IsSetE() {
    return BoteaterServicePlacePurchaseOrderForFreeProductResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServicePlacePurchaseOrderForFreeProductResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServicePlacePurchaseOrderForFreeProductResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServicePlacePurchaseOrderForFreeProductResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServicePlacePurchaseOrderForFreeProductResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PurchaseOrderResponseStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServicePlacePurchaseOrderForFreeProductResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &ShopExecption{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServicePlacePurchaseOrderForFreeProductResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("placePurchaseOrderForFreeProduct_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServicePlacePurchaseOrderForFreeProductResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServicePlacePurchaseOrderForFreeProductResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServicePlacePurchaseOrderForFreeProductResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServicePlacePurchaseOrderForFreeProductResult(%+v)", *p)
}

// Attributes:
//  - PurchaseOrder
type BoteaterServicePlacePurchaseOrderWithLineCoinArgs struct {
  // unused field # 1
  PurchaseOrder *PurchaseOrderStruct `thrift:"purchaseOrder,2" db:"purchaseOrder" json:"purchaseOrder"`
}

func NewBoteaterServicePlacePurchaseOrderWithLineCoinArgs() *BoteaterServicePlacePurchaseOrderWithLineCoinArgs {
  return &BoteaterServicePlacePurchaseOrderWithLineCoinArgs{}
}

var BoteaterServicePlacePurchaseOrderWithLineCoinArgs_PurchaseOrder_DEFAULT *PurchaseOrderStruct
func (p *BoteaterServicePlacePurchaseOrderWithLineCoinArgs) GetPurchaseOrder() *PurchaseOrderStruct {
  if !p.IsSetPurchaseOrder() {
    return BoteaterServicePlacePurchaseOrderWithLineCoinArgs_PurchaseOrder_DEFAULT
  }
return p.PurchaseOrder
}
func (p *BoteaterServicePlacePurchaseOrderWithLineCoinArgs) IsSetPurchaseOrder() bool {
  return p.PurchaseOrder != nil
}

func (p *BoteaterServicePlacePurchaseOrderWithLineCoinArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServicePlacePurchaseOrderWithLineCoinArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.PurchaseOrder = &PurchaseOrderStruct{}
  if err := p.PurchaseOrder.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PurchaseOrder), err)
  }
  return nil
}

func (p *BoteaterServicePlacePurchaseOrderWithLineCoinArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("placePurchaseOrderWithLineCoin_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServicePlacePurchaseOrderWithLineCoinArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("purchaseOrder", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:purchaseOrder: ", p), err) }
  if err := p.PurchaseOrder.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PurchaseOrder), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:purchaseOrder: ", p), err) }
  return err
}

func (p *BoteaterServicePlacePurchaseOrderWithLineCoinArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServicePlacePurchaseOrderWithLineCoinArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServicePlacePurchaseOrderWithLineCoinResult struct {
  Success *PurchaseOrderResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ShopExecption `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServicePlacePurchaseOrderWithLineCoinResult() *BoteaterServicePlacePurchaseOrderWithLineCoinResult {
  return &BoteaterServicePlacePurchaseOrderWithLineCoinResult{}
}

var BoteaterServicePlacePurchaseOrderWithLineCoinResult_Success_DEFAULT *PurchaseOrderResponseStruct
func (p *BoteaterServicePlacePurchaseOrderWithLineCoinResult) GetSuccess() *PurchaseOrderResponseStruct {
  if !p.IsSetSuccess() {
    return BoteaterServicePlacePurchaseOrderWithLineCoinResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServicePlacePurchaseOrderWithLineCoinResult_E_DEFAULT *ShopExecption
func (p *BoteaterServicePlacePurchaseOrderWithLineCoinResult) GetE() *ShopExecption {
  if !p.IsSetE() {
    return BoteaterServicePlacePurchaseOrderWithLineCoinResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServicePlacePurchaseOrderWithLineCoinResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServicePlacePurchaseOrderWithLineCoinResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServicePlacePurchaseOrderWithLineCoinResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServicePlacePurchaseOrderWithLineCoinResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PurchaseOrderResponseStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServicePlacePurchaseOrderWithLineCoinResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &ShopExecption{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServicePlacePurchaseOrderWithLineCoinResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("placePurchaseOrderWithLineCoin_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServicePlacePurchaseOrderWithLineCoinResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServicePlacePurchaseOrderWithLineCoinResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServicePlacePurchaseOrderWithLineCoinResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServicePlacePurchaseOrderWithLineCoinResult(%+v)", *p)
}

// Attributes:
//  - ShowcaseRequest
type BoteaterServiceGetShowcaseV3Args struct {
  ShowcaseRequest *ShowcaseRequestStruct `thrift:"showcaseRequest,1" db:"showcaseRequest" json:"showcaseRequest"`
}

func NewBoteaterServiceGetShowcaseV3Args() *BoteaterServiceGetShowcaseV3Args {
  return &BoteaterServiceGetShowcaseV3Args{}
}

var BoteaterServiceGetShowcaseV3Args_ShowcaseRequest_DEFAULT *ShowcaseRequestStruct
func (p *BoteaterServiceGetShowcaseV3Args) GetShowcaseRequest() *ShowcaseRequestStruct {
  if !p.IsSetShowcaseRequest() {
    return BoteaterServiceGetShowcaseV3Args_ShowcaseRequest_DEFAULT
  }
return p.ShowcaseRequest
}
func (p *BoteaterServiceGetShowcaseV3Args) IsSetShowcaseRequest() bool {
  return p.ShowcaseRequest != nil
}

func (p *BoteaterServiceGetShowcaseV3Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetShowcaseV3Args)  ReadField1(iprot thrift.TProtocol) error {
  p.ShowcaseRequest = &ShowcaseRequestStruct{}
  if err := p.ShowcaseRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ShowcaseRequest), err)
  }
  return nil
}

func (p *BoteaterServiceGetShowcaseV3Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getShowcaseV3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetShowcaseV3Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("showcaseRequest", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:showcaseRequest: ", p), err) }
  if err := p.ShowcaseRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ShowcaseRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:showcaseRequest: ", p), err) }
  return err
}

func (p *BoteaterServiceGetShowcaseV3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetShowcaseV3Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetShowcaseV3Result struct {
  Success *ShowcaseV3Response `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ShopExecption `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetShowcaseV3Result() *BoteaterServiceGetShowcaseV3Result {
  return &BoteaterServiceGetShowcaseV3Result{}
}

var BoteaterServiceGetShowcaseV3Result_Success_DEFAULT *ShowcaseV3Response
func (p *BoteaterServiceGetShowcaseV3Result) GetSuccess() *ShowcaseV3Response {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetShowcaseV3Result_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGetShowcaseV3Result_E_DEFAULT *ShopExecption
func (p *BoteaterServiceGetShowcaseV3Result) GetE() *ShopExecption {
  if !p.IsSetE() {
    return BoteaterServiceGetShowcaseV3Result_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetShowcaseV3Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetShowcaseV3Result) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetShowcaseV3Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetShowcaseV3Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ShowcaseV3Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGetShowcaseV3Result)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &ShopExecption{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetShowcaseV3Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getShowcaseV3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetShowcaseV3Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetShowcaseV3Result) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetShowcaseV3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetShowcaseV3Result(%+v)", *p)
}

// Attributes:
//  - KeepLoggedIn
//  - SystemName
//  - ReturnCallbackUrl
type BoteaterServiceGetAuthQrcodeArgs struct {
  // unused field # 1
  KeepLoggedIn bool `thrift:"keepLoggedIn,2" db:"keepLoggedIn" json:"keepLoggedIn"`
  SystemName string `thrift:"systemName,3" db:"systemName" json:"systemName"`
  ReturnCallbackUrl bool `thrift:"returnCallbackUrl,4" db:"returnCallbackUrl" json:"returnCallbackUrl"`
}

func NewBoteaterServiceGetAuthQrcodeArgs() *BoteaterServiceGetAuthQrcodeArgs {
  return &BoteaterServiceGetAuthQrcodeArgs{}
}


func (p *BoteaterServiceGetAuthQrcodeArgs) GetKeepLoggedIn() bool {
  return p.KeepLoggedIn
}

func (p *BoteaterServiceGetAuthQrcodeArgs) GetSystemName() string {
  return p.SystemName
}

func (p *BoteaterServiceGetAuthQrcodeArgs) GetReturnCallbackUrl() bool {
  return p.ReturnCallbackUrl
}
func (p *BoteaterServiceGetAuthQrcodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetAuthQrcodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KeepLoggedIn = v
}
  return nil
}

func (p *BoteaterServiceGetAuthQrcodeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SystemName = v
}
  return nil
}

func (p *BoteaterServiceGetAuthQrcodeArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ReturnCallbackUrl = v
}
  return nil
}

func (p *BoteaterServiceGetAuthQrcodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAuthQrcode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetAuthQrcodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keepLoggedIn", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keepLoggedIn: ", p), err) }
  if err := oprot.WriteBool(bool(p.KeepLoggedIn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keepLoggedIn (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keepLoggedIn: ", p), err) }
  return err
}

func (p *BoteaterServiceGetAuthQrcodeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("systemName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemName: ", p), err) }
  if err := oprot.WriteString(string(p.SystemName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemName: ", p), err) }
  return err
}

func (p *BoteaterServiceGetAuthQrcodeArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("returnCallbackUrl", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:returnCallbackUrl: ", p), err) }
  if err := oprot.WriteBool(bool(p.ReturnCallbackUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.returnCallbackUrl (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:returnCallbackUrl: ", p), err) }
  return err
}

func (p *BoteaterServiceGetAuthQrcodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetAuthQrcodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetAuthQrcodeResult struct {
  Success *AuthQrcodeStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetAuthQrcodeResult() *BoteaterServiceGetAuthQrcodeResult {
  return &BoteaterServiceGetAuthQrcodeResult{}
}

var BoteaterServiceGetAuthQrcodeResult_Success_DEFAULT *AuthQrcodeStruct
func (p *BoteaterServiceGetAuthQrcodeResult) GetSuccess() *AuthQrcodeStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceGetAuthQrcodeResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGetAuthQrcodeResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGetAuthQrcodeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetAuthQrcodeResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetAuthQrcodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetAuthQrcodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetAuthQrcodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetAuthQrcodeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AuthQrcodeStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGetAuthQrcodeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetAuthQrcodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAuthQrcode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetAuthQrcodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetAuthQrcodeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetAuthQrcodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetAuthQrcodeResult(%+v)", *p)
}

// Attributes:
//  - LoginRequest
type BoteaterServiceLoginZArgs struct {
  // unused field # 1
  LoginRequest *LoginRequestStruct `thrift:"loginRequest,2" db:"loginRequest" json:"loginRequest"`
}

func NewBoteaterServiceLoginZArgs() *BoteaterServiceLoginZArgs {
  return &BoteaterServiceLoginZArgs{}
}

var BoteaterServiceLoginZArgs_LoginRequest_DEFAULT *LoginRequestStruct
func (p *BoteaterServiceLoginZArgs) GetLoginRequest() *LoginRequestStruct {
  if !p.IsSetLoginRequest() {
    return BoteaterServiceLoginZArgs_LoginRequest_DEFAULT
  }
return p.LoginRequest
}
func (p *BoteaterServiceLoginZArgs) IsSetLoginRequest() bool {
  return p.LoginRequest != nil
}

func (p *BoteaterServiceLoginZArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceLoginZArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.LoginRequest = &LoginRequestStruct{}
  if err := p.LoginRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LoginRequest), err)
  }
  return nil
}

func (p *BoteaterServiceLoginZArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("loginZ_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceLoginZArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("loginRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:loginRequest: ", p), err) }
  if err := p.LoginRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LoginRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:loginRequest: ", p), err) }
  return err
}

func (p *BoteaterServiceLoginZArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceLoginZArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceLoginZResult struct {
  Success *LoginResultStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceLoginZResult() *BoteaterServiceLoginZResult {
  return &BoteaterServiceLoginZResult{}
}

var BoteaterServiceLoginZResult_Success_DEFAULT *LoginResultStruct
func (p *BoteaterServiceLoginZResult) GetSuccess() *LoginResultStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceLoginZResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceLoginZResult_E_DEFAULT *TalkException
func (p *BoteaterServiceLoginZResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceLoginZResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceLoginZResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceLoginZResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceLoginZResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceLoginZResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &LoginResultStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceLoginZResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceLoginZResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("loginZ_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceLoginZResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceLoginZResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceLoginZResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceLoginZResult(%+v)", *p)
}

// Attributes:
//  - FeatureType
type BoteaterServiceAcquireEncryptedAccessTokenArgs struct {
  // unused field # 1
  FeatureType FeatureTypeEnum `thrift:"featureType,2" db:"featureType" json:"featureType"`
}

func NewBoteaterServiceAcquireEncryptedAccessTokenArgs() *BoteaterServiceAcquireEncryptedAccessTokenArgs {
  return &BoteaterServiceAcquireEncryptedAccessTokenArgs{}
}


func (p *BoteaterServiceAcquireEncryptedAccessTokenArgs) GetFeatureType() FeatureTypeEnum {
  return p.FeatureType
}
func (p *BoteaterServiceAcquireEncryptedAccessTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceAcquireEncryptedAccessTokenArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := FeatureTypeEnum(v)
  p.FeatureType = temp
}
  return nil
}

func (p *BoteaterServiceAcquireEncryptedAccessTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acquireEncryptedAccessToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceAcquireEncryptedAccessTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("featureType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:featureType: ", p), err) }
  if err := oprot.WriteI32(int32(p.FeatureType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.featureType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:featureType: ", p), err) }
  return err
}

func (p *BoteaterServiceAcquireEncryptedAccessTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceAcquireEncryptedAccessTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceAcquireEncryptedAccessTokenResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceAcquireEncryptedAccessTokenResult() *BoteaterServiceAcquireEncryptedAccessTokenResult {
  return &BoteaterServiceAcquireEncryptedAccessTokenResult{}
}

var BoteaterServiceAcquireEncryptedAccessTokenResult_Success_DEFAULT string
func (p *BoteaterServiceAcquireEncryptedAccessTokenResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return BoteaterServiceAcquireEncryptedAccessTokenResult_Success_DEFAULT
  }
return *p.Success
}
var BoteaterServiceAcquireEncryptedAccessTokenResult_E_DEFAULT *TalkException
func (p *BoteaterServiceAcquireEncryptedAccessTokenResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceAcquireEncryptedAccessTokenResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceAcquireEncryptedAccessTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceAcquireEncryptedAccessTokenResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceAcquireEncryptedAccessTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceAcquireEncryptedAccessTokenResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *BoteaterServiceAcquireEncryptedAccessTokenResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceAcquireEncryptedAccessTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acquireEncryptedAccessToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceAcquireEncryptedAccessTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceAcquireEncryptedAccessTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceAcquireEncryptedAccessTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceAcquireEncryptedAccessTokenResult(%+v)", *p)
}

// Attributes:
//  - ExpirationTime
//  - MaxUseCount
type BoteaterServiceGenerateUserTicketArgs struct {
  // unused fields # 1 to 2
  ExpirationTime int64 `thrift:"expirationTime,3" db:"expirationTime" json:"expirationTime"`
  MaxUseCount int32 `thrift:"maxUseCount,4" db:"maxUseCount" json:"maxUseCount"`
}

func NewBoteaterServiceGenerateUserTicketArgs() *BoteaterServiceGenerateUserTicketArgs {
  return &BoteaterServiceGenerateUserTicketArgs{}
}


func (p *BoteaterServiceGenerateUserTicketArgs) GetExpirationTime() int64 {
  return p.ExpirationTime
}

func (p *BoteaterServiceGenerateUserTicketArgs) GetMaxUseCount() int32 {
  return p.MaxUseCount
}
func (p *BoteaterServiceGenerateUserTicketArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGenerateUserTicketArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExpirationTime = v
}
  return nil
}

func (p *BoteaterServiceGenerateUserTicketArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxUseCount = v
}
  return nil
}

func (p *BoteaterServiceGenerateUserTicketArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("generateUserTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGenerateUserTicketArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expirationTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expirationTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExpirationTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expirationTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expirationTime: ", p), err) }
  return err
}

func (p *BoteaterServiceGenerateUserTicketArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxUseCount", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxUseCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxUseCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxUseCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxUseCount: ", p), err) }
  return err
}

func (p *BoteaterServiceGenerateUserTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGenerateUserTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGenerateUserTicketResult struct {
  Success *TicketStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGenerateUserTicketResult() *BoteaterServiceGenerateUserTicketResult {
  return &BoteaterServiceGenerateUserTicketResult{}
}

var BoteaterServiceGenerateUserTicketResult_Success_DEFAULT *TicketStruct
func (p *BoteaterServiceGenerateUserTicketResult) GetSuccess() *TicketStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceGenerateUserTicketResult_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceGenerateUserTicketResult_E_DEFAULT *TalkException
func (p *BoteaterServiceGenerateUserTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGenerateUserTicketResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGenerateUserTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGenerateUserTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGenerateUserTicketResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGenerateUserTicketResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TicketStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceGenerateUserTicketResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGenerateUserTicketResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("generateUserTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGenerateUserTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGenerateUserTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGenerateUserTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGenerateUserTicketResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - MessageId
type BoteaterServiceUnsendMessageArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  MessageId string `thrift:"messageId,2" db:"messageId" json:"messageId"`
}

func NewBoteaterServiceUnsendMessageArgs() *BoteaterServiceUnsendMessageArgs {
  return &BoteaterServiceUnsendMessageArgs{}
}


func (p *BoteaterServiceUnsendMessageArgs) GetSeq() int32 {
  return p.Seq
}

func (p *BoteaterServiceUnsendMessageArgs) GetMessageId() string {
  return p.MessageId
}
func (p *BoteaterServiceUnsendMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUnsendMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *BoteaterServiceUnsendMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MessageId = v
}
  return nil
}

func (p *BoteaterServiceUnsendMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unsendMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUnsendMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *BoteaterServiceUnsendMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("messageId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageId: ", p), err) }
  if err := oprot.WriteString(string(p.MessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageId: ", p), err) }
  return err
}

func (p *BoteaterServiceUnsendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUnsendMessageArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceUnsendMessageResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceUnsendMessageResult() *BoteaterServiceUnsendMessageResult {
  return &BoteaterServiceUnsendMessageResult{}
}

var BoteaterServiceUnsendMessageResult_E_DEFAULT *TalkException
func (p *BoteaterServiceUnsendMessageResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceUnsendMessageResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceUnsendMessageResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceUnsendMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceUnsendMessageResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceUnsendMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unsendMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceUnsendMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceUnsendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceUnsendMessageResult(%+v)", *p)
}

// Attributes:
//  - SyncOpRevision
//  - Category
//  - Report
type BoteaterServiceReportArgs struct {
  // unused field # 1
  SyncOpRevision int64 `thrift:"syncOpRevision,2" db:"syncOpRevision" json:"syncOpRevision"`
  Category CategoryEnum `thrift:"category,3" db:"category" json:"category"`
  Report string `thrift:"report,4" db:"report" json:"report"`
}

func NewBoteaterServiceReportArgs() *BoteaterServiceReportArgs {
  return &BoteaterServiceReportArgs{}
}


func (p *BoteaterServiceReportArgs) GetSyncOpRevision() int64 {
  return p.SyncOpRevision
}

func (p *BoteaterServiceReportArgs) GetCategory() CategoryEnum {
  return p.Category
}

func (p *BoteaterServiceReportArgs) GetReport() string {
  return p.Report
}
func (p *BoteaterServiceReportArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceReportArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SyncOpRevision = v
}
  return nil
}

func (p *BoteaterServiceReportArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := CategoryEnum(v)
  p.Category = temp
}
  return nil
}

func (p *BoteaterServiceReportArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Report = v
}
  return nil
}

func (p *BoteaterServiceReportArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("report_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceReportArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncOpRevision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncOpRevision: ", p), err) }
  if err := oprot.WriteI64(int64(p.SyncOpRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncOpRevision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncOpRevision: ", p), err) }
  return err
}

func (p *BoteaterServiceReportArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("category", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:category: ", p), err) }
  if err := oprot.WriteI32(int32(p.Category)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:category: ", p), err) }
  return err
}

func (p *BoteaterServiceReportArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("report", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:report: ", p), err) }
  if err := oprot.WriteString(string(p.Report)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.report (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:report: ", p), err) }
  return err
}

func (p *BoteaterServiceReportArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceReportArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceReportResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceReportResult() *BoteaterServiceReportResult {
  return &BoteaterServiceReportResult{}
}

var BoteaterServiceReportResult_E_DEFAULT *TalkException
func (p *BoteaterServiceReportResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceReportResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceReportResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceReportResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceReportResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceReportResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("report_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceReportResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceReportResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceReportResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ContactIds
type BoteaterServiceCreateRoomV2Args struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ContactIds []string `thrift:"contactIds,2" db:"contactIds" json:"contactIds"`
}

func NewBoteaterServiceCreateRoomV2Args() *BoteaterServiceCreateRoomV2Args {
  return &BoteaterServiceCreateRoomV2Args{}
}


func (p *BoteaterServiceCreateRoomV2Args) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceCreateRoomV2Args) GetContactIds() []string {
  return p.ContactIds
}
func (p *BoteaterServiceCreateRoomV2Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceCreateRoomV2Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceCreateRoomV2Args)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem199 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem199 = v
}
    p.ContactIds = append(p.ContactIds, _elem199)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceCreateRoomV2Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createRoomV2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceCreateRoomV2Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceCreateRoomV2Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:contactIds: ", p), err) }
  return err
}

func (p *BoteaterServiceCreateRoomV2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceCreateRoomV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceCreateRoomV2Result struct {
  Success *RoomStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceCreateRoomV2Result() *BoteaterServiceCreateRoomV2Result {
  return &BoteaterServiceCreateRoomV2Result{}
}

var BoteaterServiceCreateRoomV2Result_Success_DEFAULT *RoomStruct
func (p *BoteaterServiceCreateRoomV2Result) GetSuccess() *RoomStruct {
  if !p.IsSetSuccess() {
    return BoteaterServiceCreateRoomV2Result_Success_DEFAULT
  }
return p.Success
}
var BoteaterServiceCreateRoomV2Result_E_DEFAULT *TalkException
func (p *BoteaterServiceCreateRoomV2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceCreateRoomV2Result_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceCreateRoomV2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceCreateRoomV2Result) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceCreateRoomV2Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceCreateRoomV2Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RoomStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BoteaterServiceCreateRoomV2Result)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceCreateRoomV2Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createRoomV2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceCreateRoomV2Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceCreateRoomV2Result) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceCreateRoomV2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceCreateRoomV2Result(%+v)", *p)
}

// Attributes:
//  - RoomIds
type BoteaterServiceGetRoomsV2Args struct {
  // unused field # 1
  RoomIds []string `thrift:"roomIds,2" db:"roomIds" json:"roomIds"`
}

func NewBoteaterServiceGetRoomsV2Args() *BoteaterServiceGetRoomsV2Args {
  return &BoteaterServiceGetRoomsV2Args{}
}


func (p *BoteaterServiceGetRoomsV2Args) GetRoomIds() []string {
  return p.RoomIds
}
func (p *BoteaterServiceGetRoomsV2Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetRoomsV2Args)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.RoomIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem200 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem200 = v
}
    p.RoomIds = append(p.RoomIds, _elem200)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceGetRoomsV2Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRoomsV2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetRoomsV2Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roomIds", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.RoomIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RoomIds {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomIds: ", p), err) }
  return err
}

func (p *BoteaterServiceGetRoomsV2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetRoomsV2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type BoteaterServiceGetRoomsV2Result struct {
  Success []*RoomStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceGetRoomsV2Result() *BoteaterServiceGetRoomsV2Result {
  return &BoteaterServiceGetRoomsV2Result{}
}

var BoteaterServiceGetRoomsV2Result_Success_DEFAULT []*RoomStruct

func (p *BoteaterServiceGetRoomsV2Result) GetSuccess() []*RoomStruct {
  return p.Success
}
var BoteaterServiceGetRoomsV2Result_E_DEFAULT *TalkException
func (p *BoteaterServiceGetRoomsV2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceGetRoomsV2Result_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceGetRoomsV2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BoteaterServiceGetRoomsV2Result) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceGetRoomsV2Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceGetRoomsV2Result)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RoomStruct, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem201 := &RoomStruct{}
    if err := _elem201.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem201), err)
    }
    p.Success = append(p.Success, _elem201)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceGetRoomsV2Result)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceGetRoomsV2Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRoomsV2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceGetRoomsV2Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetRoomsV2Result) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceGetRoomsV2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceGetRoomsV2Result(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - RoomId
//  - ContactIds
type BoteaterServiceInviteIntoRoomArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  RoomId string `thrift:"roomId,2" db:"roomId" json:"roomId"`
  ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewBoteaterServiceInviteIntoRoomArgs() *BoteaterServiceInviteIntoRoomArgs {
  return &BoteaterServiceInviteIntoRoomArgs{}
}


func (p *BoteaterServiceInviteIntoRoomArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceInviteIntoRoomArgs) GetRoomId() string {
  return p.RoomId
}

func (p *BoteaterServiceInviteIntoRoomArgs) GetContactIds() []string {
  return p.ContactIds
}
func (p *BoteaterServiceInviteIntoRoomArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceInviteIntoRoomArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceInviteIntoRoomArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoomId = v
}
  return nil
}

func (p *BoteaterServiceInviteIntoRoomArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem202 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem202 = v
}
    p.ContactIds = append(p.ContactIds, _elem202)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BoteaterServiceInviteIntoRoomArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("inviteIntoRoom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceInviteIntoRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceInviteIntoRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roomId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err) }
  if err := oprot.WriteString(string(p.RoomId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err) }
  return err
}

func (p *BoteaterServiceInviteIntoRoomArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err) }
  return err
}

func (p *BoteaterServiceInviteIntoRoomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceInviteIntoRoomArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceInviteIntoRoomResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceInviteIntoRoomResult() *BoteaterServiceInviteIntoRoomResult {
  return &BoteaterServiceInviteIntoRoomResult{}
}

var BoteaterServiceInviteIntoRoomResult_E_DEFAULT *TalkException
func (p *BoteaterServiceInviteIntoRoomResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceInviteIntoRoomResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceInviteIntoRoomResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceInviteIntoRoomResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceInviteIntoRoomResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceInviteIntoRoomResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("inviteIntoRoom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceInviteIntoRoomResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceInviteIntoRoomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceInviteIntoRoomResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - RoomId
type BoteaterServiceLeaveRoomArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  RoomId string `thrift:"roomId,2" db:"roomId" json:"roomId"`
}

func NewBoteaterServiceLeaveRoomArgs() *BoteaterServiceLeaveRoomArgs {
  return &BoteaterServiceLeaveRoomArgs{}
}


func (p *BoteaterServiceLeaveRoomArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *BoteaterServiceLeaveRoomArgs) GetRoomId() string {
  return p.RoomId
}
func (p *BoteaterServiceLeaveRoomArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceLeaveRoomArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *BoteaterServiceLeaveRoomArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoomId = v
}
  return nil
}

func (p *BoteaterServiceLeaveRoomArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("leaveRoom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceLeaveRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *BoteaterServiceLeaveRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roomId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err) }
  if err := oprot.WriteString(string(p.RoomId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err) }
  return err
}

func (p *BoteaterServiceLeaveRoomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceLeaveRoomArgs(%+v)", *p)
}

// Attributes:
//  - E
type BoteaterServiceLeaveRoomResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewBoteaterServiceLeaveRoomResult() *BoteaterServiceLeaveRoomResult {
  return &BoteaterServiceLeaveRoomResult{}
}

var BoteaterServiceLeaveRoomResult_E_DEFAULT *TalkException
func (p *BoteaterServiceLeaveRoomResult) GetE() *TalkException {
  if !p.IsSetE() {
    return BoteaterServiceLeaveRoomResult_E_DEFAULT
  }
return p.E
}
func (p *BoteaterServiceLeaveRoomResult) IsSetE() bool {
  return p.E != nil
}

func (p *BoteaterServiceLeaveRoomResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BoteaterServiceLeaveRoomResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *BoteaterServiceLeaveRoomResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("leaveRoom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BoteaterServiceLeaveRoomResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *BoteaterServiceLeaveRoomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BoteaterServiceLeaveRoomResult(%+v)", *p)
}


