// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"boteater_lib"
)

var _ = boteater_lib.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  MessageStruct sendMessage(i32 seq, MessageStruct message)")
  fmt.Fprintln(os.Stderr, "  void sendChatChecked(i32 seq, string chatMid, string lastMessageId)")
  fmt.Fprintln(os.Stderr, "  void removeAllMessages(i32 seq, string lastMessageId)")
  fmt.Fprintln(os.Stderr, "  void sendChatRemoved(i32 seq, string chatMid, string lastMessageId, i64 sessionId)")
  fmt.Fprintln(os.Stderr, "  GroupStruct getGroupWithoutMembers(string groupId)")
  fmt.Fprintln(os.Stderr, "  GroupStruct getGroupsV2(string groupId)")
  fmt.Fprintln(os.Stderr, "  GroupStruct getGroup(string groupId)")
  fmt.Fprintln(os.Stderr, "  GroupStruct createGroupV2(i32 seq, string name,  contactIds)")
  fmt.Fprintln(os.Stderr, "  GroupStruct getCompactGroup(string groupId)")
  fmt.Fprintln(os.Stderr, "   getGroupIdsInvited()")
  fmt.Fprintln(os.Stderr, "   getGroupIdsJoined()")
  fmt.Fprintln(os.Stderr, "  GroupCallStruct getGroupCall(string chatMid)")
  fmt.Fprintln(os.Stderr, "  GroupCallRouteStruct acquireGroupCallRoute(string chatMid, GroupCallMediaTypeEnum mediaType, bool isInitialHost,  capabilities)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoGroup(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void acceptGroupInvitationByTicket(i32 reqSeq, string groupMid, string ticketId)")
  fmt.Fprintln(os.Stderr, "  void rejectGroupInvitation(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  void acceptGroupInvitation(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  void cancelGroupInvitation(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  GroupStruct findGroupByTicket(string ticketId)")
  fmt.Fprintln(os.Stderr, "  string reissueGroupTicket(string groupMid)")
  fmt.Fprintln(os.Stderr, "  void kickoutFromGroup(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoGroupCall(string chatMid,  memberMids, GroupCallMediaTypeEnum mediaType)")
  fmt.Fprintln(os.Stderr, "  void updateGroupPreferenceAttribute(i32 reqSeq, string groupMid,  updatedAttrs)")
  fmt.Fprintln(os.Stderr, "  void updateGroup(i32 reqSeq, GroupStruct group)")
  fmt.Fprintln(os.Stderr, "  void leaveGroup(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByMid(i32 reqSeq, string mid, ContactTypeEnum type, string reference)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByUserid(i32 reqSeq, string searchId)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByPhone(i32 reqSeq,  phones)")
  fmt.Fprintln(os.Stderr, "  ContactStruct getContact(string id)")
  fmt.Fprintln(os.Stderr, "  void updateContactSetting(i32 reqSeq, string mid, ContactSettingEnum flag, string value)")
  fmt.Fprintln(os.Stderr, "   getAllContactIds()")
  fmt.Fprintln(os.Stderr, "  ProfileStruct getProfile()")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttribute(i32 reqSeq, ProfileAttributeEnum attr, string value)")
  fmt.Fprintln(os.Stderr, "  void updateProfile(i32 reqSeq, ProfileStruct profile)")
  fmt.Fprintln(os.Stderr, "   getBlockedContactIds()")
  fmt.Fprintln(os.Stderr, "  void unblockContact(i32 reqSeq, string id, string reference)")
  fmt.Fprintln(os.Stderr, "  void blockContact(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  SettingsStruct getSettings()")
  fmt.Fprintln(os.Stderr, "   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)")
  fmt.Fprintln(os.Stderr, "  i64 getLastOpRevision()")
  fmt.Fprintln(os.Stderr, "  ChannelTokenStruct issueChannelToken(string channelId)")
  fmt.Fprintln(os.Stderr, "  ChannelInfoStruct getChannelInfo(string channelId, string locale)")
  fmt.Fprintln(os.Stderr, "  LiffViewStruct issueLiffView(LiffViewRequestStruct request)")
  fmt.Fprintln(os.Stderr, "   getFriendRequests(FriendDirectionEnum direction, i64 lastSeenSeqId)")
  fmt.Fprintln(os.Stderr, "  void removeFriendRequest(FriendDirectionEnum direction, string midOrEMid)")
  fmt.Fprintln(os.Stderr, "  void updateSettingsAttribute(i32 reqSeq, SettingsAttributeEnum attr, string value)")
  fmt.Fprintln(os.Stderr, "   updateSettingsAttributes2(i32 reqSeq,  attributesToUpdate, SettingsStruct settings)")
  fmt.Fprintln(os.Stderr, "  SettingsStruct getSettingsAttributes2( attributesToRetrieve)")
  fmt.Fprintln(os.Stderr, "  SettingsStruct getSettingsAttributes(i32 attrBitset)")
  fmt.Fprintln(os.Stderr, "  GetProductStructV2 getProductV2(GetProductRequestStruct request)")
  fmt.Fprintln(os.Stderr, "  GetProductStruct getProduct(string shopId, string productId, LocaleStruct locale)")
  fmt.Fprintln(os.Stderr, "  PurchaseOrderResponseStruct placePurchaseOrderForFreeProduct(PurchaseOrderStruct purchaseOrder)")
  fmt.Fprintln(os.Stderr, "  PurchaseOrderResponseStruct placePurchaseOrderWithLineCoin(PurchaseOrderStruct purchaseOrder)")
  fmt.Fprintln(os.Stderr, "  ShowcaseV3Response getShowcaseV3(ShowcaseRequestStruct showcaseRequest)")
  fmt.Fprintln(os.Stderr, "  AuthQrcodeStruct getAuthQrcode(bool keepLoggedIn, string systemName, bool returnCallbackUrl)")
  fmt.Fprintln(os.Stderr, "  LoginResultStruct loginZ(LoginRequestStruct loginRequest)")
  fmt.Fprintln(os.Stderr, "  string acquireEncryptedAccessToken(FeatureTypeEnum featureType)")
  fmt.Fprintln(os.Stderr, "  TicketStruct generateUserTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "  void unsendMessage(i32 seq, string messageId)")
  fmt.Fprintln(os.Stderr, "  void report(i64 syncOpRevision, CategoryEnum category, string report)")
  fmt.Fprintln(os.Stderr, "  RoomStruct createRoomV2(i32 reqSeq,  contactIds)")
  fmt.Fprintln(os.Stderr, "   getRoomsV2( roomIds)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoRoom(i32 reqSeq, string roomId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void leaveRoom(i32 reqSeq, string roomId)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := boteater_lib.NewBoteaterServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "sendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err203 := (strconv.Atoi(flag.Arg(1)))
    if err203 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg204 := flag.Arg(2)
    mbTrans205 := thrift.NewTMemoryBufferLen(len(arg204))
    defer mbTrans205.Close()
    _, err206 := mbTrans205.WriteString(arg204)
    if err206 != nil {
      Usage()
      return
    }
    factory207 := thrift.NewTJSONProtocolFactory()
    jsProt208 := factory207.GetProtocol(mbTrans205)
    argvalue1 := boteater_lib.NewMessageStruct()
    err209 := argvalue1.Read(jsProt208)
    if err209 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendChatChecked":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendChatChecked requires 3 args")
      flag.Usage()
    }
    tmp0, err210 := (strconv.Atoi(flag.Arg(1)))
    if err210 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SendChatChecked(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "removeAllMessages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveAllMessages requires 2 args")
      flag.Usage()
    }
    tmp0, err213 := (strconv.Atoi(flag.Arg(1)))
    if err213 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveAllMessages(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendChatRemoved":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendChatRemoved requires 4 args")
      flag.Usage()
    }
    tmp0, err215 := (strconv.Atoi(flag.Arg(1)))
    if err215 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3, err218 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err218 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.SendChatRemoved(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getGroupWithoutMembers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupWithoutMembers requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupWithoutMembers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupsV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupsV2 requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupsV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createGroupV2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CreateGroupV2 requires 3 args")
      flag.Usage()
    }
    tmp0, err222 := (strconv.Atoi(flag.Arg(1)))
    if err222 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg224 := flag.Arg(3)
    mbTrans225 := thrift.NewTMemoryBufferLen(len(arg224))
    defer mbTrans225.Close()
    _, err226 := mbTrans225.WriteString(arg224)
    if err226 != nil { 
      Usage()
      return
    }
    factory227 := thrift.NewTJSONProtocolFactory()
    jsProt228 := factory227.GetProtocol(mbTrans225)
    containerStruct2 := boteater_lib.NewBoteaterServiceCreateGroupV2Args()
    err229 := containerStruct2.ReadField3(jsProt228)
    if err229 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CreateGroupV2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getCompactGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetCompactGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupIdsInvited":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetGroupIdsInvited requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetGroupIdsInvited(context.Background()))
    fmt.Print("\n")
    break
  case "getGroupIdsJoined":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetGroupIdsJoined requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetGroupIdsJoined(context.Background()))
    fmt.Print("\n")
    break
  case "getGroupCall":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupCall requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupCall(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquireGroupCallRoute":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AcquireGroupCallRoute requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := boteater_lib.GroupCallMediaTypeEnum(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    arg234 := flag.Arg(4)
    mbTrans235 := thrift.NewTMemoryBufferLen(len(arg234))
    defer mbTrans235.Close()
    _, err236 := mbTrans235.WriteString(arg234)
    if err236 != nil { 
      Usage()
      return
    }
    factory237 := thrift.NewTJSONProtocolFactory()
    jsProt238 := factory237.GetProtocol(mbTrans235)
    containerStruct3 := boteater_lib.NewBoteaterServiceAcquireGroupCallRouteArgs()
    err239 := containerStruct3.ReadField4(jsProt238)
    if err239 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Capabilities
    value3 := argvalue3
    fmt.Print(client.AcquireGroupCallRoute(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "inviteIntoGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err240 := (strconv.Atoi(flag.Arg(1)))
    if err240 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg242 := flag.Arg(3)
    mbTrans243 := thrift.NewTMemoryBufferLen(len(arg242))
    defer mbTrans243.Close()
    _, err244 := mbTrans243.WriteString(arg242)
    if err244 != nil { 
      Usage()
      return
    }
    factory245 := thrift.NewTJSONProtocolFactory()
    jsProt246 := factory245.GetProtocol(mbTrans243)
    containerStruct2 := boteater_lib.NewBoteaterServiceInviteIntoGroupArgs()
    err247 := containerStruct2.ReadField3(jsProt246)
    if err247 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "acceptGroupInvitationByTicket":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AcceptGroupInvitationByTicket requires 3 args")
      flag.Usage()
    }
    tmp0, err248 := (strconv.Atoi(flag.Arg(1)))
    if err248 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AcceptGroupInvitationByTicket(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "rejectGroupInvitation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RejectGroupInvitation requires 2 args")
      flag.Usage()
    }
    tmp0, err251 := (strconv.Atoi(flag.Arg(1)))
    if err251 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RejectGroupInvitation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "acceptGroupInvitation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AcceptGroupInvitation requires 2 args")
      flag.Usage()
    }
    tmp0, err253 := (strconv.Atoi(flag.Arg(1)))
    if err253 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AcceptGroupInvitation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "cancelGroupInvitation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CancelGroupInvitation requires 3 args")
      flag.Usage()
    }
    tmp0, err255 := (strconv.Atoi(flag.Arg(1)))
    if err255 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg257 := flag.Arg(3)
    mbTrans258 := thrift.NewTMemoryBufferLen(len(arg257))
    defer mbTrans258.Close()
    _, err259 := mbTrans258.WriteString(arg257)
    if err259 != nil { 
      Usage()
      return
    }
    factory260 := thrift.NewTJSONProtocolFactory()
    jsProt261 := factory260.GetProtocol(mbTrans258)
    containerStruct2 := boteater_lib.NewBoteaterServiceCancelGroupInvitationArgs()
    err262 := containerStruct2.ReadField3(jsProt261)
    if err262 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CancelGroupInvitation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findGroupByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindGroupByTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindGroupByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "reissueGroupTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReissueGroupTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ReissueGroupTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "kickoutFromGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "KickoutFromGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err265 := (strconv.Atoi(flag.Arg(1)))
    if err265 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg267 := flag.Arg(3)
    mbTrans268 := thrift.NewTMemoryBufferLen(len(arg267))
    defer mbTrans268.Close()
    _, err269 := mbTrans268.WriteString(arg267)
    if err269 != nil { 
      Usage()
      return
    }
    factory270 := thrift.NewTJSONProtocolFactory()
    jsProt271 := factory270.GetProtocol(mbTrans268)
    containerStruct2 := boteater_lib.NewBoteaterServiceKickoutFromGroupArgs()
    err272 := containerStruct2.ReadField3(jsProt271)
    if err272 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.KickoutFromGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "inviteIntoGroupCall":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoGroupCall requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg274 := flag.Arg(2)
    mbTrans275 := thrift.NewTMemoryBufferLen(len(arg274))
    defer mbTrans275.Close()
    _, err276 := mbTrans275.WriteString(arg274)
    if err276 != nil { 
      Usage()
      return
    }
    factory277 := thrift.NewTJSONProtocolFactory()
    jsProt278 := factory277.GetProtocol(mbTrans275)
    containerStruct1 := boteater_lib.NewBoteaterServiceInviteIntoGroupCallArgs()
    err279 := containerStruct1.ReadField2(jsProt278)
    if err279 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.MemberMids
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := boteater_lib.GroupCallMediaTypeEnum(tmp2)
    value2 := argvalue2
    fmt.Print(client.InviteIntoGroupCall(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateGroupPreferenceAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateGroupPreferenceAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err280 := (strconv.Atoi(flag.Arg(1)))
    if err280 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg282 := flag.Arg(3)
    mbTrans283 := thrift.NewTMemoryBufferLen(len(arg282))
    defer mbTrans283.Close()
    _, err284 := mbTrans283.WriteString(arg282)
    if err284 != nil { 
      Usage()
      return
    }
    factory285 := thrift.NewTJSONProtocolFactory()
    jsProt286 := factory285.GetProtocol(mbTrans283)
    containerStruct2 := boteater_lib.NewBoteaterServiceUpdateGroupPreferenceAttributeArgs()
    err287 := containerStruct2.ReadField3(jsProt286)
    if err287 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.UpdatedAttrs
    value2 := argvalue2
    fmt.Print(client.UpdateGroupPreferenceAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateGroup requires 2 args")
      flag.Usage()
    }
    tmp0, err288 := (strconv.Atoi(flag.Arg(1)))
    if err288 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg289 := flag.Arg(2)
    mbTrans290 := thrift.NewTMemoryBufferLen(len(arg289))
    defer mbTrans290.Close()
    _, err291 := mbTrans290.WriteString(arg289)
    if err291 != nil {
      Usage()
      return
    }
    factory292 := thrift.NewTJSONProtocolFactory()
    jsProt293 := factory292.GetProtocol(mbTrans290)
    argvalue1 := boteater_lib.NewGroupStruct()
    err294 := argvalue1.Read(jsProt293)
    if err294 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "leaveGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveGroup requires 2 args")
      flag.Usage()
    }
    tmp0, err295 := (strconv.Atoi(flag.Arg(1)))
    if err295 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByMid":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByMid requires 4 args")
      flag.Usage()
    }
    tmp0, err297 := (strconv.Atoi(flag.Arg(1)))
    if err297 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := boteater_lib.ContactTypeEnum(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.FindAndAddContactsByMid(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findAndAddContactsByUserid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByUserid requires 2 args")
      flag.Usage()
    }
    tmp0, err300 := (strconv.Atoi(flag.Arg(1)))
    if err300 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.FindAndAddContactsByUserid(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByPhone":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByPhone requires 2 args")
      flag.Usage()
    }
    tmp0, err302 := (strconv.Atoi(flag.Arg(1)))
    if err302 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg303 := flag.Arg(2)
    mbTrans304 := thrift.NewTMemoryBufferLen(len(arg303))
    defer mbTrans304.Close()
    _, err305 := mbTrans304.WriteString(arg303)
    if err305 != nil { 
      Usage()
      return
    }
    factory306 := thrift.NewTJSONProtocolFactory()
    jsProt307 := factory306.GetProtocol(mbTrans304)
    containerStruct1 := boteater_lib.NewBoteaterServiceFindAndAddContactsByPhoneArgs()
    err308 := containerStruct1.ReadField2(jsProt307)
    if err308 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Phones
    value1 := argvalue1
    fmt.Print(client.FindAndAddContactsByPhone(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateContactSetting":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateContactSetting requires 4 args")
      flag.Usage()
    }
    tmp0, err310 := (strconv.Atoi(flag.Arg(1)))
    if err310 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := boteater_lib.ContactSettingEnum(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.UpdateContactSetting(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getAllContactIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllContactIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllContactIds(context.Background()))
    fmt.Print("\n")
    break
  case "getProfile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetProfile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetProfile(context.Background()))
    fmt.Print("\n")
    break
  case "updateProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err313 := (strconv.Atoi(flag.Arg(1)))
    if err313 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := boteater_lib.ProfileAttributeEnum(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateProfile requires 2 args")
      flag.Usage()
    }
    tmp0, err315 := (strconv.Atoi(flag.Arg(1)))
    if err315 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg316 := flag.Arg(2)
    mbTrans317 := thrift.NewTMemoryBufferLen(len(arg316))
    defer mbTrans317.Close()
    _, err318 := mbTrans317.WriteString(arg316)
    if err318 != nil {
      Usage()
      return
    }
    factory319 := thrift.NewTJSONProtocolFactory()
    jsProt320 := factory319.GetProtocol(mbTrans317)
    argvalue1 := boteater_lib.NewProfileStruct()
    err321 := argvalue1.Read(jsProt320)
    if err321 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getBlockedContactIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockedContactIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockedContactIds(context.Background()))
    fmt.Print("\n")
    break
  case "unblockContact":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UnblockContact requires 3 args")
      flag.Usage()
    }
    tmp0, err322 := (strconv.Atoi(flag.Arg(1)))
    if err322 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UnblockContact(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "blockContact":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockContact requires 2 args")
      flag.Usage()
    }
    tmp0, err325 := (strconv.Atoi(flag.Arg(1)))
    if err325 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockContact(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getSettings":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSettings requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSettings(context.Background()))
    fmt.Print("\n")
    break
  case "fetchOps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FetchOps requires 4 args")
      flag.Usage()
    }
    argvalue0, err327 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err327 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err328 := (strconv.Atoi(flag.Arg(2)))
    if err328 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2, err329 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err329 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err330 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err330 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FetchOps(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getLastOpRevision":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetLastOpRevision requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetLastOpRevision(context.Background()))
    fmt.Print("\n")
    break
  case "issueChannelToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IssueChannelToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IssueChannelToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChannelInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChannelInfo requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetChannelInfo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "issueLiffView":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IssueLiffView requires 1 args")
      flag.Usage()
    }
    arg334 := flag.Arg(1)
    mbTrans335 := thrift.NewTMemoryBufferLen(len(arg334))
    defer mbTrans335.Close()
    _, err336 := mbTrans335.WriteString(arg334)
    if err336 != nil {
      Usage()
      return
    }
    factory337 := thrift.NewTJSONProtocolFactory()
    jsProt338 := factory337.GetProtocol(mbTrans335)
    argvalue0 := boteater_lib.NewLiffViewRequestStruct()
    err339 := argvalue0.Read(jsProt338)
    if err339 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IssueLiffView(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFriendRequests":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFriendRequests requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := boteater_lib.FriendDirectionEnum(tmp0)
    value0 := argvalue0
    argvalue1, err340 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err340 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetFriendRequests(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeFriendRequest":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveFriendRequest requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := boteater_lib.FriendDirectionEnum(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveFriendRequest(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateSettingsAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSettingsAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err342 := (strconv.Atoi(flag.Arg(1)))
    if err342 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := boteater_lib.SettingsAttributeEnum(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateSettingsAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateSettingsAttributes2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSettingsAttributes2 requires 3 args")
      flag.Usage()
    }
    tmp0, err344 := (strconv.Atoi(flag.Arg(1)))
    if err344 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg345 := flag.Arg(2)
    mbTrans346 := thrift.NewTMemoryBufferLen(len(arg345))
    defer mbTrans346.Close()
    _, err347 := mbTrans346.WriteString(arg345)
    if err347 != nil { 
      Usage()
      return
    }
    factory348 := thrift.NewTJSONProtocolFactory()
    jsProt349 := factory348.GetProtocol(mbTrans346)
    containerStruct1 := boteater_lib.NewBoteaterServiceUpdateSettingsAttributes2Args()
    err350 := containerStruct1.ReadField2(jsProt349)
    if err350 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.AttributesToUpdate
    value1 := argvalue1
    arg351 := flag.Arg(3)
    mbTrans352 := thrift.NewTMemoryBufferLen(len(arg351))
    defer mbTrans352.Close()
    _, err353 := mbTrans352.WriteString(arg351)
    if err353 != nil {
      Usage()
      return
    }
    factory354 := thrift.NewTJSONProtocolFactory()
    jsProt355 := factory354.GetProtocol(mbTrans352)
    argvalue2 := boteater_lib.NewSettingsStruct()
    err356 := argvalue2.Read(jsProt355)
    if err356 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateSettingsAttributes2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getSettingsAttributes2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettingsAttributes2 requires 1 args")
      flag.Usage()
    }
    arg357 := flag.Arg(1)
    mbTrans358 := thrift.NewTMemoryBufferLen(len(arg357))
    defer mbTrans358.Close()
    _, err359 := mbTrans358.WriteString(arg357)
    if err359 != nil { 
      Usage()
      return
    }
    factory360 := thrift.NewTJSONProtocolFactory()
    jsProt361 := factory360.GetProtocol(mbTrans358)
    containerStruct0 := boteater_lib.NewBoteaterServiceGetSettingsAttributes2Args()
    err362 := containerStruct0.ReadField1(jsProt361)
    if err362 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.AttributesToRetrieve
    value0 := argvalue0
    fmt.Print(client.GetSettingsAttributes2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSettingsAttributes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettingsAttributes requires 1 args")
      flag.Usage()
    }
    tmp0, err363 := (strconv.Atoi(flag.Arg(1)))
    if err363 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSettingsAttributes(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getProductV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProductV2 requires 1 args")
      flag.Usage()
    }
    arg364 := flag.Arg(1)
    mbTrans365 := thrift.NewTMemoryBufferLen(len(arg364))
    defer mbTrans365.Close()
    _, err366 := mbTrans365.WriteString(arg364)
    if err366 != nil {
      Usage()
      return
    }
    factory367 := thrift.NewTJSONProtocolFactory()
    jsProt368 := factory367.GetProtocol(mbTrans365)
    argvalue0 := boteater_lib.NewGetProductRequestStruct()
    err369 := argvalue0.Read(jsProt368)
    if err369 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetProductV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getProduct":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetProduct requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg372 := flag.Arg(3)
    mbTrans373 := thrift.NewTMemoryBufferLen(len(arg372))
    defer mbTrans373.Close()
    _, err374 := mbTrans373.WriteString(arg372)
    if err374 != nil {
      Usage()
      return
    }
    factory375 := thrift.NewTJSONProtocolFactory()
    jsProt376 := factory375.GetProtocol(mbTrans373)
    argvalue2 := boteater_lib.NewLocaleStruct()
    err377 := argvalue2.Read(jsProt376)
    if err377 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetProduct(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "placePurchaseOrderForFreeProduct":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PlacePurchaseOrderForFreeProduct requires 1 args")
      flag.Usage()
    }
    arg378 := flag.Arg(1)
    mbTrans379 := thrift.NewTMemoryBufferLen(len(arg378))
    defer mbTrans379.Close()
    _, err380 := mbTrans379.WriteString(arg378)
    if err380 != nil {
      Usage()
      return
    }
    factory381 := thrift.NewTJSONProtocolFactory()
    jsProt382 := factory381.GetProtocol(mbTrans379)
    argvalue0 := boteater_lib.NewPurchaseOrderStruct()
    err383 := argvalue0.Read(jsProt382)
    if err383 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PlacePurchaseOrderForFreeProduct(context.Background(), value0))
    fmt.Print("\n")
    break
  case "placePurchaseOrderWithLineCoin":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PlacePurchaseOrderWithLineCoin requires 1 args")
      flag.Usage()
    }
    arg384 := flag.Arg(1)
    mbTrans385 := thrift.NewTMemoryBufferLen(len(arg384))
    defer mbTrans385.Close()
    _, err386 := mbTrans385.WriteString(arg384)
    if err386 != nil {
      Usage()
      return
    }
    factory387 := thrift.NewTJSONProtocolFactory()
    jsProt388 := factory387.GetProtocol(mbTrans385)
    argvalue0 := boteater_lib.NewPurchaseOrderStruct()
    err389 := argvalue0.Read(jsProt388)
    if err389 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PlacePurchaseOrderWithLineCoin(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getShowcaseV3":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetShowcaseV3 requires 1 args")
      flag.Usage()
    }
    arg390 := flag.Arg(1)
    mbTrans391 := thrift.NewTMemoryBufferLen(len(arg390))
    defer mbTrans391.Close()
    _, err392 := mbTrans391.WriteString(arg390)
    if err392 != nil {
      Usage()
      return
    }
    factory393 := thrift.NewTJSONProtocolFactory()
    jsProt394 := factory393.GetProtocol(mbTrans391)
    argvalue0 := boteater_lib.NewShowcaseRequestStruct()
    err395 := argvalue0.Read(jsProt394)
    if err395 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetShowcaseV3(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAuthQrcode":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetAuthQrcode requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.GetAuthQrcode(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "loginZ":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginZ requires 1 args")
      flag.Usage()
    }
    arg399 := flag.Arg(1)
    mbTrans400 := thrift.NewTMemoryBufferLen(len(arg399))
    defer mbTrans400.Close()
    _, err401 := mbTrans400.WriteString(arg399)
    if err401 != nil {
      Usage()
      return
    }
    factory402 := thrift.NewTJSONProtocolFactory()
    jsProt403 := factory402.GetProtocol(mbTrans400)
    argvalue0 := boteater_lib.NewLoginRequestStruct()
    err404 := argvalue0.Read(jsProt403)
    if err404 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LoginZ(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquireEncryptedAccessToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireEncryptedAccessToken requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := boteater_lib.FeatureTypeEnum(tmp0)
    value0 := argvalue0
    fmt.Print(client.AcquireEncryptedAccessToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "generateUserTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GenerateUserTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err405 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err405 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err406 := (strconv.Atoi(flag.Arg(2)))
    if err406 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GenerateUserTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unsendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnsendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err407 := (strconv.Atoi(flag.Arg(1)))
    if err407 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnsendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "report":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Report requires 3 args")
      flag.Usage()
    }
    argvalue0, err409 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err409 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := boteater_lib.CategoryEnum(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.Report(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "createRoomV2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateRoomV2 requires 2 args")
      flag.Usage()
    }
    tmp0, err411 := (strconv.Atoi(flag.Arg(1)))
    if err411 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg412 := flag.Arg(2)
    mbTrans413 := thrift.NewTMemoryBufferLen(len(arg412))
    defer mbTrans413.Close()
    _, err414 := mbTrans413.WriteString(arg412)
    if err414 != nil { 
      Usage()
      return
    }
    factory415 := thrift.NewTJSONProtocolFactory()
    jsProt416 := factory415.GetProtocol(mbTrans413)
    containerStruct1 := boteater_lib.NewBoteaterServiceCreateRoomV2Args()
    err417 := containerStruct1.ReadField2(jsProt416)
    if err417 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ContactIds
    value1 := argvalue1
    fmt.Print(client.CreateRoomV2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRoomsV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoomsV2 requires 1 args")
      flag.Usage()
    }
    arg418 := flag.Arg(1)
    mbTrans419 := thrift.NewTMemoryBufferLen(len(arg418))
    defer mbTrans419.Close()
    _, err420 := mbTrans419.WriteString(arg418)
    if err420 != nil { 
      Usage()
      return
    }
    factory421 := thrift.NewTJSONProtocolFactory()
    jsProt422 := factory421.GetProtocol(mbTrans419)
    containerStruct0 := boteater_lib.NewBoteaterServiceGetRoomsV2Args()
    err423 := containerStruct0.ReadField1(jsProt422)
    if err423 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.RoomIds
    value0 := argvalue0
    fmt.Print(client.GetRoomsV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoRoom":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoRoom requires 3 args")
      flag.Usage()
    }
    tmp0, err424 := (strconv.Atoi(flag.Arg(1)))
    if err424 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg426 := flag.Arg(3)
    mbTrans427 := thrift.NewTMemoryBufferLen(len(arg426))
    defer mbTrans427.Close()
    _, err428 := mbTrans427.WriteString(arg426)
    if err428 != nil { 
      Usage()
      return
    }
    factory429 := thrift.NewTJSONProtocolFactory()
    jsProt430 := factory429.GetProtocol(mbTrans427)
    containerStruct2 := boteater_lib.NewBoteaterServiceInviteIntoRoomArgs()
    err431 := containerStruct2.ReadField3(jsProt430)
    if err431 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoRoom(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "leaveRoom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveRoom requires 2 args")
      flag.Usage()
    }
    tmp0, err432 := (strconv.Atoi(flag.Arg(1)))
    if err432 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveRoom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
